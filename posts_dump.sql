-- MySQL dump 10.13  Distrib 5.7.17, for macos10.12 (x86_64)
--
-- Host: 127.0.0.1    Database: blog
-- ------------------------------------------------------
-- Server version	5.6.36

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `content_half` text NOT NULL,
  `content_full` text NOT NULL,
  `date` varchar(255) NOT NULL,
  `tags` varchar(255) NOT NULL,
  `link` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (1,'Trigger (Tetikleyici) Nedir ? Nasıl Kullanılır ?','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Bu yazımda TRIGGER&#39;ları MYSQL kullanarak inceleyeceğiz.\r\nINSERT , UPDATE , DELETE işlemlerinin ger&ccedil;ekleşmesi halinde devreye girebilen STORED PROCEDURE(SAKLI YORDAM) yapısıdır.Hassas verilerin değişiminin veritabanında kayıtlarını tutmayı , gerek eski haline getirmek ,gerek ise oluşan durumlara g&ouml;re belirlediğimiz işlemleri yapabilmemizi sağlar.\r\n\r\nTRIGGER &ccedil;alışmaya başlamadan &ouml;nce bir TRANSACTION a&ccedil;ılır.TRANSACTION konusuna burada detay... </div>','<p>Bu yazımda <strong>TRIGGER</strong>&#39;ları <strong>MYSQL</strong> kullanarak inceleyeceğiz.<br />\r\n<strong>INSERT , UPDATE , DELETE</strong> işlemlerinin ger&ccedil;ekleşmesi halinde devreye girebilen <strong>STORED PROCEDURE(SAKLI YORDAM) </strong>yapısıdır.Hassas verilerin değişiminin veritabanında kayıtlarını tutmayı , gerek eski haline getirmek ,gerek ise oluşan durumlara g&ouml;re belirlediğimiz işlemleri yapabilmemizi sağlar.<br />\r\n<br />\r\n<strong>TRIGGER</strong> &ccedil;alışmaya başlamadan &ouml;nce bir <strong>TRANSACTION </strong>a&ccedil;ılır.<strong>TRANSACTION </strong>konusuna burada detaylı olarak girmiyorum.Fakat temel bir şekilde kullanımı şu şekilde ger&ccedil;ekleşiyor.Eğer <strong>TRIGGER </strong>bloğunda bir <strong>ROLLBACK </strong>var ifadesi &ccedil;alıştırılırsa oluşan durumlarda son işlem ge&ccedil;ersiz olur ve yapılan işlemler eski haline d&ouml;nderilir , eğer yok ise otomatik olarak <strong>COMMIT </strong>yapılır ve işlem ger&ccedil;ekleştirilir.Bunu ş&ouml;yle &ouml;rnekleyelim ; &ouml;rneğin bir ATM&#39;den birisine para transferi yapıyorsunuz,para hesabınızdan d&uuml;şt&uuml; fakat g&ouml;nderdiğiniz kişinin hesabına para ulaşmadı.İşte bu durumlarda <strong>TRANSACTION </strong>devreye giriyor ve yaptığı kontrol ile parayı sizin hesabınıza tekrar yatırıyor<strong>.</strong><br />\r\n&nbsp;</p>\r\n\r\n<ul>\r\n	<li><strong>INSERT </strong>işleminde sadece <strong>NEW</strong> kullanılır.</li>\r\n	<li><strong>UPDATE</strong> işleminde hem <strong>NEW</strong> hem de <strong>OLD</strong> kullanılır.</li>\r\n	<li><strong>DELETE</strong> işleminde ise sadece <strong>OLD</strong> kullanılır.</li>\r\n</ul>\r\n\r\n<p><br />\r\nSyntax&#39;ı (Yazım Kuralı):</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>CREATE [ DEFINER={ &lt; kullanici adı &gt;} | CURRENT_USER} ] TRIGGER &lt; trigger adı &gt;{ BEFORE | AFTER }{ UPDATE | INSERT | DELETE }ON &lt; tablo ad &gt;FOR EACH ROWBEGIN..&hellip;END ;</p>\r\n\r\n<p>&Ouml;rnek bir uygulama ile daha anlaşılır bir hale getirelim.<br />\r\nYapılan <strong>INSERT </strong>ve <strong>DELETE </strong>işlemlerinde tetiklenecek birer <strong>TRIGGER </strong>oluşturalım.Bir futbol takımı i&ccedil;in m&uuml;lakat se&ccedil;imi yapılsın , eğer ki j&uuml;rinin verdiği puanlarla toplamda 85 puanın &uuml;zerinde olan kişileri futbol takımına aldığımızı varsayalım.Takım alınan her kişiye otomatik olarak 1-100 arasında takım numaraları verilmektedir.Daha sonra takımdan ayrılanları da belirtelim.<br />\r\n<br />\r\n<br />\r\n&Ouml;ncelikle tablolarımızı oluşturuyoruz ;</p>\r\n\r\n<pre>\r\nCREATE TABLE mulakat_listesi (tcno INT NOT NULL,isim VARCHAR(20),soyisim VARCHAR(20),mulakat_puani INT,PRIMARY(tcno));</pre>\r\n\r\n<p>M&uuml;lakat listesine katılan kişilerin <strong>tcno , isim , soyisim</strong> ve m&uuml;lakattan aldıkları puan i&ccedil;in <strong>mulakat_puani</strong> field alanlarını tanımladık.</p>\r\n\r\n<pre>\r\nCREATE TABLE futbol_takimi(takimno INT NOT NULL,ad VARCHAR (20),soyad VARCHAR(30),\r\ntarih TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);</pre>\r\n\r\n<p>Futbol takımına se&ccedil;ilecek olan kişiler i&ccedil;in <strong>futbol_takimi</strong> tablosunda her bir kişinin bir <strong>takimno , ad , soyad ve tarih</strong> field alanlarını tanımladık.</p>\r\n\r\n<pre>\r\nCREATE TABLE ayrilan (ayrilan_isim VARCHAR(20),ayrilan_soyisim VARCHAR(20),\r\ngiris_tarih VARCHAR(100),ayrilma_tarih TIMESTAMPS NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);</pre>\r\n\r\n<p>Takımdan ayrılanları tutacağımız ayrilan tablosunda <strong>ayrilan_isim , ayrilan_soyisim , giris_tarih</strong> ve <strong>ayrilma_tarih</strong> field alanlarını tanımladık.<br />\r\n<br />\r\n<br />\r\nArdından <strong>TRIGGER&#39;</strong>ımızı oluşturuyoruz.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nDELIMITER $$\r\n\r\nCREATE TRIGGER takima_girmek\r\n BEFORE INSERT ON mulakat_listesi\r\n  FOR EACH ROW\r\n   BEGIN\r\n    IF(NEW.mulakat_puani&gt;85) THEN\r\n     INSERT INTO futbol_takimi (takimno,ad,soyad) VALUES  ((FLOOR(RAND()*100)),NEW.isim,NEW.soyisim);\r\n    END IF;\r\n   END;$$ </pre>\r\n\r\n<p>Burada yapmış olduğumuz şey , eğer se&ccedil;melerde <strong>m&uuml;lakat puanı</strong> 85&#39;ten y&uuml;ksek olan bir kişi var ise bu kişinin bilgilerini alıp , 1 ile 100 arasında bir takım numarası verip , <strong>futbol takımı </strong>tablosuna eklemek.Bu <strong>TRIGGER&#39;</strong>ı oluşturup &ccedil;alıştırdığımızda sistem bizim yerimize <strong>TRIGGER </strong>koşulunu sağlayan durumda bu işlemleri ger&ccedil;ekleştirecektir.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nDELIMITER $$\r\nCREATE TRIGGER ayrilma_islemi\r\n AFTER DELETE ON futbol_takimi\r\n  FOR EACH ROW\r\n   BEGIN\r\n    INSERT INTO ayrilan (ayrilan_isim,ayrilan_soyisim,giris_tarih)\r\n    VALUES(OLD.ad,OLD.soyad,OLD.tarih);\r\n   END;$$</pre>\r\n\r\n<p>Burada ise eğer takımdan ayrılan olursa bu kişinin adını , soyadını takıma giriş tarihini ve &ccedil;ıkış tarihini ayrılan tablosuna ekliyor.</p>\r\n','1428973662','mysql , trigger , tetikleyici  , sql',''),(2,'Java -  Sınıflar','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu yazımda Java - Sınıflar&#39;ı anlatmaya &ccedil;alıştım.\r\nUmarım yararlı olur.\r\nBasit bir sınıf oluşturalım.\r\n\r\n\r\nclass Rectangle {\r\n&nbsp;double width;\r\n&nbsp;double height;\r\n&nbsp;double depth;\r\n}\r\n\r\n\r\nRectangle&nbsp;adlı sınıfımız , 3 değişken tanımlıyor:&nbsp;width,height ve depth&nbsp;olarak.Şu anda bu sınıf method i&ccedil;ermiyor.\r\n\r\n\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; ... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu yazımda Java - Sınıflar&#39;ı anlatmaya &ccedil;alıştım.<br />\r\nUmarım yararlı olur.<br />\r\nBasit bir sınıf oluşturalım.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n&nbsp;double width;\r\n&nbsp;double height;\r\n&nbsp;double depth;\r\n}\r\n</pre>\r\n\r\n<p><strong>Rectangle&nbsp;</strong>adlı sınıfımız , 3 değişken tanımlıyor:&nbsp;<strong>width,height ve depth&nbsp;</strong>olarak.Şu anda bu sınıf method i&ccedil;ermiyor.</p>\r\n\r\n<pre>\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; double result;\r\n&nbsp; Rectangle.width = 5;\r\n&nbsp; Rectangle.height = 3;\r\n&nbsp; Rectangle.depth = 2;\r\n&nbsp; result = Rectangle.width * Rectangle.height * Rectangle.depth;\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi myRectangle i&ccedil;in : &quot; + result);\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Dikd&ouml;rtgenin Hacmi: 30\r\n\r\n\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; double result;\r\n&nbsp; Rectangle.width = 5;\r\n&nbsp; Rectangle.height = 3;\r\n&nbsp; Rectangle.depth = 2;\r\n&nbsp; result = Rectangle.width * Rectangle.height * Rectangle.depth;\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi myRectangle i&ccedil;in : &quot; + result);\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Dikd&ouml;rtgenin Hacmi: 30</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Bu program &ccedil;alıştırıldığı zaman 2 adet sınıf oluşturulur , ilki&nbsp;<strong>Rectangle&nbsp;</strong>sınıfı diğeri ise&nbsp;<strong>mainClass&nbsp;</strong>sınıfıdır.Burada oluşturduğumuz&nbsp;<strong>myRectangle&nbsp;</strong>ise<strong>&nbsp;</strong>bir <strong>local </strong>değişkendir ve oluşturulduğu sınıfın tipini referans etmektedir.Eğer bir sınıf i&ccedil;erisindeki verilere(değişken) ve davranışlara(method) erişmek istiyorsak o sınıfı referans eden değişkenleri oluşturmak zorundayız.Eğer bu programı &ccedil;alıştırmak istiyorsak&nbsp;<strong>mainClass&nbsp;</strong>sınıfını &ccedil;alıştırmak zorundayız.Burada yaptığımız işlem oluşturduğumuz bir dikd&ouml;rtgenin hacmini hesaplamak.</p>\r\n\r\n<pre>\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; Rectangle myRectangle2 = new Rectangle();\r\n&nbsp; double result;\r\n&nbsp; myRectangle.width = 5;\r\n&nbsp; myRectangle.height = 3;\r\n&nbsp; myRectangle.depth = 2;\r\n&nbsp; myRectangle2.width = 7;\r\n&nbsp; myRectangle2.height = 5;\r\n&nbsp; myRectangle2.depth = 4;\r\n&nbsp; result = myRectangle.width * myRectangle.height * myRectangle.depth;\r\n&nbsp; System.out.println(&quot;(myRectangle i&ccedil;in) &nbsp;\\\\n Dikd&ouml;rtgenin Hacmi : &quot; + result);\r\n&nbsp; result = myRectangle2.width * myRectangle2.height * myRectangle2.depth;\r\n&nbsp; System.out.println(&quot;(myRectangle2 i&ccedil;in) \\\\n Dikd&ouml;rtgenin Hacmi : &quot; + result);\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: (myRectangle i&ccedil;in) Dikd&ouml;rtgenin Hacmi: 140(myRectangle2 i&ccedil;in) Dikd&ouml;rtgenin Hacmi: 30\r\n</pre>\r\n\r\n<p>Bir nesnenin değişkenine herhangi bir değişiklik yaparsak bundan diğer nesnelerin değişkenleri etkilenmez.&Ouml;rneğin yukarıdaki programda bir &ouml;nceki program gibi&nbsp;<strong>myRectangle&nbsp;</strong>işleminin sonucu yine 30&#39;dur.&Ccedil;ıktıdan anlaşıldığı gibi iki nesneninde verileri birbirinden farklıdır.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','1425725563','Java,OOP,Java SE',''),(3,'Java - Methodlar','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu yazımda bir &ouml;nceki yazımda kullandığım yapıların devamı olarak Methodlar&#39;ı anlatacağım.\r\n&quot; Java - Sınıflar &quot; konulu yazıma bu adresten ulaşabilirsiniz.\r\nMethodlar ;\r\n&nbsp; 1 - Geriye değer d&ouml;nd&uuml;rmeyen methodlar\r\n&nbsp; &nbsp; 1.1 - Parametresiz geriye değer d&ouml;nd&uuml;rmeyen methodlar\r\n&nbsp; &nbsp; 1.2 -&nbsp;Parametreli geriye değer d&ouml;nd&uuml;rmeyen methodlar\r\n&nbsp; 2 - Geriye değer d&ouml;nd&uuml;ren&nbsp;methodlar\r\n&nbsp; &nbs... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu yazımda bir &ouml;nceki yazımda kullandığım yapıların devamı olarak Methodlar&#39;ı anlatacağım.<br />\r\n<a href=\"https://alicankustemur.github.io/#/post?id=2\" target=\"_blank\">&quot; Java - Sınıflar &quot; konulu yazıma bu adresten ulaşabilirsiniz.</a><br />\r\nMethodlar ;<br />\r\n<strong>&nbsp; 1 - Geriye değer d&ouml;nd&uuml;rmeyen methodlar</strong><br />\r\n<strong>&nbsp; &nbsp; 1.1 - Parametresiz g</strong><strong>eriye değer d&ouml;nd&uuml;rmeyen methodlar</strong><br />\r\n<strong>&nbsp; &nbsp; 1.2 -&nbsp;</strong><strong>Parametreli g</strong><strong>eriye değer d&ouml;nd&uuml;rmeyen methodlar</strong><br />\r\n<strong>&nbsp; 2 - Geriye değer d&ouml;nd&uuml;ren&nbsp;</strong><strong>methodlar</strong><br />\r\n<strong>&nbsp; &nbsp; 2.1 - Parametresiz g</strong><strong>eriye değer d&ouml;nd&uuml;ren&nbsp;</strong><strong>methodlar</strong><br />\r\n<strong>&nbsp; &nbsp; 2.2 - Parametreli g</strong><strong>eriye değer d&ouml;nd&uuml;ren&nbsp;</strong><strong>methodlar</strong><br />\r\n&nbsp; olmak &uuml;zere ikiye ayrılırlar.<br />\r\n<br />\r\n<strong>1-Geriye Değer D&ouml;nd&uuml;rmeyen Methodlar&nbsp;</strong><br />\r\nDaha &ouml;nce tanımladığımız <strong>result </strong>değişkenine atadığımız değişkenleri başka işlemlerde kullanmak i&ccedil;in tekrar toplama işlemini oluşturmamız gerekicektir.Bu işlemi <strong>mainClass </strong>sınıfının yerine <strong>Rectangle</strong> sınıfının yapması daha iyi olucaktır.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n&nbsp;double width;\r\n&nbsp;double height;\r\n&nbsp;double depth;\r\n&nbsp;void volume() {\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;: &quot; + (width * height * depth);\r\n&nbsp; }\r\n&nbsp;}</pre>\r\n\r\n<p>Oluşturduğumuz her nesne i&ccedil;in bu methodu &ccedil;ağırabiliriz.B&ouml;ylelikle daha sade bir kullanım oluştu.</p>\r\n\r\n<pre>\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; Rectangle myRectangle2 = new Rectangle();\r\n&nbsp; double result;\r\n&nbsp; myRectangle.width = 5;\r\n&nbsp; myRectangle.height = 3;\r\n&nbsp; myRectangle.depth = 2;\r\n&nbsp; myRectangle2.width = 7;\r\n&nbsp; myRectangle2.height = 5;\r\n&nbsp; myRectangle2.depth = 4;\r\n&nbsp; myRectangle2.volume();\r\n&nbsp; myRectangle.volume();\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Dikd&ouml;rtgenin Hacmi i&ccedil;in: 140 //myRectangle2Dikd&ouml;rtgenin Hacmi &nbsp;i&ccedil;in &nbsp;: 30 //myRectangle</pre>\r\n\r\n<p>Bu şekilde programı &ccedil;alıştırdığımızda bir &ouml;nceki programda olduğu gibi sonucun aynı olduğunu g&ouml;r&uuml;yoruz.B&ouml;ylelikle yapılan tekrarlardan kurtulup daha sade bir kullanım elde ettik.<br />\r\n<br />\r\nAma bu şekilde kullanımda yeterli değildir.Daha dinamik bir hale getirmek i&ccedil;in geriye değer d&ouml;nd&uuml;ren method şekilde kullanmamız gereklidir.<br />\r\n<br />\r\n<strong>2 - Geriye Değer D&ouml;nd&uuml;ren Methodlar</strong><br />\r\n<br />\r\nBir &ouml;nceki programda &ccedil;ağırdımız <strong>volume </strong>methodunda sonucu ekrana yazdıran bir işlem yapıyorduk , bunu her zaman kullanmak mecburiyetinde değiliz.İstenildiği zaman programın &ccedil;ıktısı alınabilir.Bunun dışında diğer işlemler i&ccedil;in kullanılmalıdır.Programı tekrar oluşturalım.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n&nbsp;double width;\r\n&nbsp;double height double depth;\r\n&nbsp;double volume() {\r\n&nbsp; return width * height * depth;\r\n&nbsp;}\r\n}</pre>\r\n\r\n<p><br />\r\nBurada <strong>volume&nbsp;</strong>methodunun &ouml;n&uuml;ne kullandığımız <strong>double</strong> ifadesi methodun geriye d&ouml;ndereceği değerin veri tipini belirtir.Eğer geriye bir <strong>boolean </strong>veri tipine sahip bir değer d&ouml;nd&uuml;rmek istiyorsanız bu methodun tipini <strong>int </strong>olarak tanımlayamazsınız.Geriye değer d&ouml;nd&uuml;ren methodlarda her zaman <strong>return </strong>ifadesi kullanılmak zorundadır.Aksi takdirde program derlenme esnasında hata vericektir.</p>\r\n\r\n<pre>\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; Rectangle myRectangle2 = new Rectangle();\r\n&nbsp; double result;\r\n&nbsp; myRectangle.width = 5;\r\n&nbsp; myRectangle.height = 3;\r\n&nbsp; myRectangle.depth = 2;\r\n&nbsp; myRectangle2.width = 7;\r\n&nbsp; myRectangle2.height = 5;\r\n&nbsp; myRectangle2.depth = 4;\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;myRectangle2 i&ccedil;in : &nbsp;&quot; + myRectangle2.volume());\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;myRectangle i&ccedil;in : &quot; + myRectangle.volume());\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Dikd&ouml;rtgenin Hacmi&nbsp;&nbsp;myRectangle2 i&ccedil;in: 140 Dikd&ouml;rtgenin Hacmi&nbsp;&nbsp;myRectangle i&ccedil;in: 30</pre>\r\n\r\n<p><br />\r\nBu programı &ccedil;alıştırdığımızda ise &ccedil;ıktının yine aynı olduğunu g&ouml;r&uuml;r&uuml;z.Eğer referans eden değişkenlere bir işlem yaptırmak istiyorsak bunu o sınıf i&ccedil;erisinde oluşturup gerekli işlem i&ccedil;in &ccedil;ağrılmaya hazır hale getirmeliyiz.Yapı dinamik olursa eğer bir&ccedil;ok işlemde kullanılabilir hale gelir.<br />\r\n<br />\r\n<strong>Parametreli Methodlar</strong><br />\r\n<br />\r\nYukarıda ki programlar parametresiz methodların kullanımını belirtiyordu.<br />\r\nEğer kodu daha dinamik bir hale getirmek istiyorsak değişkenlere sadece sınıfın methodu i&ccedil;erisinde değer vermeliyiz.Bu durum hem g&uuml;venlik a&ccedil;ısından hemde kodun sadeliği a&ccedil;ısından olduk&ccedil;a &ouml;nemlidir.Daha sonra bu konuya <strong>Sarmalama(Encapsulation) </strong>yazısında &nbsp;ayrıntılı olarak değineceğiz.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n&nbsp;double width;\r\n&nbsp;double height;\r\n&nbsp;double depth;\r\n&nbsp;double setValues(double w, double h, double d) {\r\n&nbsp; width = w;\r\n&nbsp; height = h;\r\n&nbsp; depth = d;\r\n&nbsp;}\r\n&nbsp;double volume() {\r\n&nbsp; return width * height * depth;\r\n&nbsp;}\r\n}</pre>\r\n\r\n<p><br />\r\nKodumuzu bu şekilde d&uuml;zenlediğimizde artık her nesne değişkeni i&ccedil;in tek tek atama yapmak yerine aynı işlemi bir methodda topladık.</p>\r\n\r\n<pre>\r\nclass mainClass {\r\n&nbsp;public static void main(String args[]) {\r\n&nbsp; Rectangle myRectangle = new Rectangle();\r\n&nbsp; Rectangle myRectangle2 = new Rectangle();\r\n&nbsp; myRectangle.setValues(5, 3, 2);\r\n&nbsp; myRectangle2.setValues(7, 5, 4);\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;myRectangle2 i&ccedil;in : &nbsp;&quot; + myRectangle2.volume());\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;myRectangle i&ccedil;in : &quot; + myRectangle.volume());\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Dikd&ouml;rtgenin Hacmi myRectangle2 i&ccedil;in: 140 Dikd&ouml;rtgenin Hacmi myRectangle i&ccedil;in: 30</pre>\r\n\r\n<p>Bu programın &ccedil;ıktısı yine aynı şekildedir , fakat daha dinamik ve kullanışlı bir hale d&ouml;n&uuml;şm&uuml;şt&uuml;r.</p>\r\n\r\n<p>&nbsp;</p>\r\n','1425725563','Java,OOP,Java SE',''),(4,'Java - Yapılandırıcılar ( Constructors )','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nJava - Methodlar adlı yazımın devamı olarak bu yazı da Yapılandırıcılar(Constractor)&#39;ı anlatacağım.\r\n\r\n\r\nclass Rectangle {&nbsp;\r\n&nbsp;double width;&nbsp;\r\n&nbsp;double height;&nbsp;\r\n&nbsp;double depth;&nbsp;\r\n&nbsp;double volume {&nbsp;\r\n&nbsp; return width * height * depth;&nbsp;\r\n&nbsp;}&nbsp;\r\n&nbsp;void setValues(double w, double h, double d) {&nbsp;\r\n&nbsp; width = w;&nbsp;\r\n&nbsp; height = h;&nbsp;\r\n&nbsp; depth = d;&nbsp;\r\n&nbsp;}\r\n}\r\n\r\n\r\nBurada kullandığımız se... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p><a href=\"https://alicankustemur.github.io/#/post?id=3\" target=\"_blank\">Java - Methodlar</a> adlı yazımın devamı olarak bu yazı da <strong>Yapılandırıcılar(Constractor)</strong>&#39;ı anlatacağım.</p>\r\n\r\n<pre>\r\nclass Rectangle {&nbsp;\r\n&nbsp;double width;&nbsp;\r\n&nbsp;double height;&nbsp;\r\n&nbsp;double depth;&nbsp;\r\n&nbsp;double volume {&nbsp;\r\n&nbsp; return width * height * depth;&nbsp;\r\n&nbsp;}&nbsp;\r\n&nbsp;void setValues(double w, double h, double d) {&nbsp;\r\n&nbsp; width = w;&nbsp;\r\n&nbsp; height = h;&nbsp;\r\n&nbsp; depth = d;&nbsp;\r\n&nbsp;}\r\n}\r\n</pre>\r\n\r\n<p>Burada kullandığımız <strong>setValues()</strong> methodu uygun ve kullanışlı g&ouml;z&uuml;kse de , bu işlemleri nesne ilk oluşturulduğunda yapmak daha &ouml;zl&uuml; ve kullanışlı bir hale getirecektir.Java&#39;da Yapılandırıcılar nesne oluşturulduktan hemen sonra onu ilk kullanıma hazır hale getirirler.</p>\r\n\r\n<p><strong>setValues() </strong>methodunu bir yapılandırıcı ile değiştirelim.<br />\r\n<br />\r\n<strong>Parametresiz Yapılandırıcı</strong></p>\r\n\r\n<pre>\r\nclass Rectangle {&nbsp;\r\n&nbsp;double width;&nbsp;\r\n&nbsp;double height;&nbsp;\r\n&nbsp;double depth;&nbsp;\r\n&nbsp;double volume {&nbsp;\r\n&nbsp; return width * height * depth;&nbsp;\r\n&nbsp;}&nbsp;\r\n&nbsp;Rectangle() {&nbsp;\r\n&nbsp; width = 15;&nbsp;\r\n&nbsp; height = 15;&nbsp;\r\n&nbsp; depth = 15;&nbsp;\r\n&nbsp;}\r\n}</pre>\r\n\r\n<p>Sınıf ile aynı isme sahip bir method olduğunu g&ouml;r&uuml;yoruz . İşte bu bir yapılandırıcı oluyor. Yapılandırıcılar her zaman bulunduğu sınıf ile aynı isme sahip olmak zorundadır.Aksi takdirde bu bir yapılandırıcı &ouml;zelliği taşımaz. Burada ki<strong> Rectangle()</strong> yapılandırıcısının yaptığı iş , oluşturulan nesnelere ilk değer ataması yapmak.Oluşturulan nesnelere varsayılan değer olarak değişkenlerine 15 değeri atanıyor.<br />\r\n<br />\r\n<strong>Parametreli Yapılandırıcı</strong><br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass Rectangle {&nbsp;\r\n&nbsp;double width;&nbsp;\r\n&nbsp;double height;&nbsp;\r\n&nbsp;double depth;&nbsp;\r\n&nbsp;double volume() {&nbsp;\r\n&nbsp; return width * height * depth;&nbsp;\r\n&nbsp;}&nbsp;\r\n&nbsp;Rectangle(double w, double h, double d) {&nbsp;\r\n&nbsp; width = w;&nbsp;\r\n&nbsp; height = h;&nbsp;\r\n&nbsp; depth = d;&nbsp;\r\n&nbsp;}\r\n}\r\nclass mainClass {&nbsp;\r\n&nbsp;public static void main(string args[]) {&nbsp;\r\n&nbsp; Rectangle myRectangle = new Rectangle(5, 3, 2);&nbsp;\r\n&nbsp; Rectangle myRectangle2 = new Rectangle(7, 5, 4);&nbsp;\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;myRectangle2 i&ccedil;in : &nbsp;&quot; + myRectangle2.volume());&nbsp;\r\n&nbsp; System.out.println(&quot;Dikd&ouml;rtgenin Hacmi &nbsp;myRectangle i&ccedil;in : &quot; + myRectangle.volume());&nbsp;\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Dikd&ouml;rtgenin Hacmi myRectangle2 i&ccedil;in: 140 \r\nDikd&ouml;rtgenin Hacmi myRectangle i&ccedil;in&nbsp;: 30</pre>\r\n\r\n<p><br />\r\nAyrı bir <strong>setValues()</strong>&nbsp;gibi değer atamasını yapacağımız methodlara gerek kalmadan yapılandırıcı ile kodumuzu daha kısa bir halde getirdik.</p>\r\n','1449480440','Java,OOP,Java SE',''),(5,'Git/GitHub  nedir ? Git/GitHub ile Proje Yönetimi Nasıl Yapılır ?','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Bu yazımda Git ile ilgili kurulum ve gerekli işlemleri nasıl yapabileceğimizi anlatacağım.\r\n&Ouml;ncelikle kurulum i&ccedil;in&nbsp;http://git-scm.com/downloads&nbsp;bu adresten platformumuza uygun olan kurulum dosyasını indirip , standart next next mantığıyla programı kuruyoruz.(Ben &ouml;yle kurdum kuruum ayarlarını değiştirmek size kalmış :) , tabi bir sorun oluşursa sorumlulukta sizde )\r\n\r\n1 - Bilgisayardaki projeleri GitHub hesabımıza y&uuml;klemek :\r\n\r\nKurulum işlemle... </div>','<p>Bu yazımda Git ile ilgili kurulum ve gerekli işlemleri nasıl yapabileceğimizi anlatacağım.<br />\r\n&Ouml;ncelikle kurulum i&ccedil;in&nbsp;<a href=\"\\\">http://git-scm.com/downloads</a>&nbsp;bu adresten platformumuza uygun olan kurulum dosyasını indirip , standart next next mantığıyla programı kuruyoruz.<strong>(Ben &ouml;yle kurdum kuruum ayarlarını değiştirmek size kalmış :) , tabi bir sorun oluşursa sorumlulukta sizde )</strong><br />\r\n<br />\r\n<strong>1 - Bilgisayardaki projeleri GitHub hesabımıza y&uuml;klemek :</strong><br />\r\n<br />\r\nKurulum işlemlerini bitirdiken sonra GitHub hesabımıza girip proje klas&ouml;r&uuml;m&uuml;z ile aynı ada sahip bir repository oluşturuyoruz.</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/5/1.jpg\" style=\"height:350px; width:737px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/5/2.jpg\" style=\"height:583px; width:1041px\" /><br />\r\nBilgisayarımızda bulunan bir projeyi GitHub hesabımıza y&uuml;klemek i&ccedil;in projemizin klasor&uuml;ne sağ tıklayıp &quot;Git Bash&quot;i &ccedil;alıştırıyoruz :</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/5/3.jpg\" /></p>\r\n\r\n<p>Git&#39;in Komut İstemcisi geliyor ekranımıza.</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/5/4.jpg\" /></p>\r\n\r\n<p>Buraya aynen şu komutları uyguluyoruz.</p>\r\n\r\n<pre>\r\n git init\r\n&nbsp;git add --all\r\n&nbsp;git commit -m &quot;Burası yorum b&ouml;l&uuml;m&uuml;&quot;\r\n&nbsp;git remote add origin &lt; reponuzun https ya da ssh adresi &gt;\r\n&nbsp;git push origin master</pre>\r\n\r\n<p><br />\r\nBu komutları &ccedil;alıştırdıktan sonra sizden kullanıcı adı ve parola isteyecektir,bilgileri doğru girdiğiniz takdirde dosyalarınız başarılı bir şekilde GitHub hesabınıza y&uuml;klenmiş olur.<br />\r\n<br />\r\n&Ouml;rnek olarak ben bir proje ekledim.</p>\r\n\r\n<pre>\r\n  git init\r\n&nbsp; git add --all\r\n&nbsp; git commit -m &quot;This is my little commit&quot;\r\n  git remote add origin https://github.com/kustemura/StudentInformationSystem.git \r\n&nbsp; git push origin master\r\n</pre>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/5/5.jpg\" style=\"height:525px; width:737px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/5/6.jpg\" style=\"height:621px; width:1005px\" /></p>\r\n','1431168763','Git,VCS,GitHub',''),(6,'Apache Tomcat Kurulumu ve Eclipse Entregrasyonu','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Bu yazımda Apache Tomcat Kurulumunu yapacağız , ardından kurulumu başarılı bir şekilde ger&ccedil;ekleştirdikden sonra Eclipse IDE&#39;ye entegrasyonunu yapıp &ccedil;alıştıracağız. &Ouml;ncelikle bu&nbsp;bağlantıdan&nbsp;Apache Tomcat&#39;in &nbsp;kurulmasını istediğimiz s&uuml;r&uuml;m&uuml;n&uuml; indiriyoruz , ben bu yazımda Tomcat 7 kurulumunu yapacağım.\r\n\r\n1 - .zip dosyasını indirip.Bilgisayarımızda herhangi bir s&uuml;r&uuml;c&uuml; i&ccedil;erisine taşımak. &... </div>','<p>Bu yazımda <strong>Apache Tomcat </strong>Kurulumunu yapacağız , ardından kurulumu başarılı bir şekilde ger&ccedil;ekleştirdikden sonra<strong> Eclipse IDE</strong>&#39;ye entegrasyonunu yapıp &ccedil;alıştıracağız. &Ouml;ncelikle bu&nbsp;<a href=\"https://tomcat.apache.org/\" target=\"_blank\">bağlantı</a>dan<strong>&nbsp;Apache Tomcat</strong>&#39;in &nbsp;kurulmasını istediğimiz s&uuml;r&uuml;m&uuml;n&uuml; indiriyoruz , ben bu yazımda <strong>Tomcat 7</strong> kurulumunu yapacağım.<br />\r\n<img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/1.jpg\" style=\"height:250px; width:590px\" /><br />\r\n1 - .zip dosyasını indirip.Bilgisayarımızda herhangi bir s&uuml;r&uuml;c&uuml; i&ccedil;erisine taşımak. <strong>&Ouml;rneğin : ( C:\\\\tomcat_7 )</strong><br />\r\n<br />\r\n2 - Ardından <strong>Komut İstemcisini y&ouml;netici </strong>olarak &ccedil;alışırıp şu komutları &ccedil;alıştırmamız gerekli.<strong>( Bunu bir .txt dosyası oluşturup daha sonra .bat uzantılı olarak komutları kaydedip &ccedil;alıştırabilirsiniz,ben komut olarak tek tek &ccedil;alıştırmayı seviyorum. se&ccedil;im sizin :) )</strong><br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nset PATH= &lt; JDK&#39;nın bulunduğu dosya konumu &gt; &nbsp;\\\\bin;%PATH%\r\nset JAVA_HOME= &lt; JDK&#39;nın bulunduğu dosya konumu &nbsp;&gt;\r\nset CATALINA= &lt; Tomcat&#39;in bulunduğu dosya konumu &gt;</pre>\r\n\r\n<p>&Ouml;rnek olarak Ortam Değişkenlerini ayarlayayım ve Catalina Classpath Ayarları Servlet olsun.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nset PATH=C:\\\\Program Files\\\\Java\\\\jdk1.8.0_25\\\\bin;%PATH%\r\nset JAVA_HOME=C:\\\\Program Files\\\\Java\\\\jdk1.8.0_25\r\nset CATALINA=C:\\\\Tomcat_7\r\nset CLASSPATH=%CATALINA%\\\\common\\\\lib\\\\servlet-api.jar;%CLASSPATH%</pre>\r\n\r\n<p>Şimdi Eclipse Entegrasyonuna ge&ccedil;elim.<br />\r\n<br />\r\n3 - Eclipse&#39;te bir Web Uygulaması a&ccedil;tığımız zaman alt b&ouml;l&uuml;mlerdeki <strong>&quot;Servers&quot; </strong>kısmına tıklıyoruz.<br />\r\nArdından oluşturduğumuz projeler &uuml;zerinden bu adımları sırayla ger&ccedil;ekleştiriyoruz.<br />\r\n&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/2.jpg\" style=\"height:722px; width:721px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/3.jpg\" style=\"height:505px; width:533px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/4.jpg\" style=\"height:385px; width:887px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/5.jpg\" style=\"height:695px; width:573px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/6.jpg\" style=\"height:673px; width:561px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/6/7.jpg\" style=\"height:163px; width:368px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n','1431255163','Tomcat,Apache,Eclipse,java',''),(7,'Java - Kalıtım','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu yazıma bir &ouml;nceki yazılarımda kullandığım &ouml;rnek &uuml;zerinden devam ediyorum.\r\nBir &ouml;nceki yazılarıma buradan ulaşabilirsiniz.Eğer bir &ouml;nceki konularla ilgili bilginiz kısıtlı ise bu konuyu okumadan &ouml;nce onları okumakta fayda var.\r\nKalıtım , Nesneye Y&ouml;nelimli Programlama&#39;nın en &ouml;nemli &ouml;zelliklerinden biridir.\r\nKalıtımı kullanarak oluşturuduğunuz alt sınıfların gizli olmayan &ouml;rnek değişkenlerine ve metodlarına eri... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu yazıma bir &ouml;nceki yazılarımda kullandığım &ouml;rnek &uuml;zerinden devam ediyorum.<br />\r\n<a href=\"https://alicankustemur.github.io/#/search?tag=javase\" target=\"_blank\">Bir &ouml;nceki yazılarıma buradan ulaşabilirsiniz</a>.Eğer bir &ouml;nceki konularla ilgili bilginiz kısıtlı ise bu konuyu okumadan &ouml;nce onları okumakta fayda var.<br />\r\nKalıtım , Nesneye Y&ouml;nelimli Programlama&#39;nın en &ouml;nemli &ouml;zelliklerinden biridir.<br />\r\nKalıtımı kullanarak oluşturuduğunuz alt sınıfların gizli olmayan &ouml;rnek değişkenlerine ve metodlarına erişebilirsiniz.<br />\r\nJava&#39;da oluşturduğunuz herhangi bir sınıf i&ccedil;in yalnızca bir &uuml;st sınıf belirtebilirsiniz , &ccedil;&uuml;nk&uuml; bir alt sınıfın birden fazla t&uuml;retilmesini Java desteklemez.Aşağıda Anne&#39;den t&uuml;reyen &Ccedil;ocuk &ouml;rneği verilmektedir.<br />\r\nOluşturduğunuz &uuml;st sınıflardan t&uuml;reyen alt sınıflara kendilerine has &ouml;zellikler ekleyerek , bir &uuml;st sınıfın &ouml;zelliklerini devredebilirsiniz.<br />\r\n<br />\r\nJava&#39;da katılım yoluyla alınan sınıfa <strong>&uuml;st sınıf (superclass) ( t&uuml;reten )</strong> , kalıtımı alan <strong>( t&uuml;retilen )</strong> sınıfa ise alt sınıf<strong> ( subclass) </strong>adı verilir.Bu y&uuml;zden alt sınıf, &uuml;st sınıfın daha &ouml;zelleşmiş bir halidir.<br />\r\n<br />\r\nBir sınıftan kalıtım t&uuml;retmek i&ccedil;in Java&#39;da <strong>extends </strong>anahtar s&ouml;zc&uuml;ğ&uuml; kullanılır.<br />\r\nAşağıdaki program <strong>Mother</strong> adında bir &uuml;st sınıf ve <strong>Child</strong> adında bir alt sınıf oluşturur.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass Mother {\r\n&nbsp;String hairColor = &quot;Siyah&quot;;\r\n&nbsp;void theCharacteristicsOfMother() {\r\n&nbsp; System.out.println(&quot;Mother : \\\\n &quot; + &quot; Sa&ccedil; Rengi : &quot; + hairColor);\r\n&nbsp;}\r\n}\r\nclass Child extends Mother {\r\n&nbsp;String eye = &quot;Mavi&quot;;\r\n&nbsp;void theCharacteristicsOfChild() {\r\n&nbsp; System.out.println(&quot;Child : &nbsp;\\\\n &quot; + &quot; Sa&ccedil; Rengi : &quot; + hairColor + &quot; \\\\n &quot; + &quot; G&ouml;z Rengi : &quot; + eye);\r\n&nbsp;}\r\n}\r\nclass SimpleInheritance {\r\n&nbsp;public static void main(String[] args) {\r\n&nbsp; final Mother rose = new Mother();\r\n&nbsp; final Child jack = new Child();\r\n&nbsp; jack.theCharacteristicsOfMother();\r\n&nbsp; jack.theCharacteristicsOfChild();\r\n&nbsp;}\r\n}\r\nProgramın &Ccedil;ıktısı: Mother: Sa&ccedil; Rengi: SiyahChild: Sa&ccedil; Rengi: Siyah G&ouml;z Rengi: Mavi</pre>\r\n\r\n<p>Burada , Child alt sınıfı , &uuml;st sınıfı olan Mother sınıfının t&uuml;m &uuml;yelerini i&ccedil;erir.Bu y&uuml;zden jack hairColor &ouml;rnek değişkenine erişebilir ve theCharacteristicsOfMother methodunu &ccedil;ağırabilir.Yani burada jack sa&ccedil; rengini annesinden almıştır , fakat g&ouml;z rengi kendine has bir &ouml;zelliktir.Mother , Child i&ccedil;in bir &uuml;st sınıf olmasına rağmen tamamen bağımsız bir sınıftır. &Uuml;st sınıftan kalıtımı devralan bir alt sınıf deklerasyonu şu şekilde olmalıdır :</p>\r\n\r\n<pre>\r\n class alt-sinif-adi extends ust-sinif-adi{ //Sınıfın G&ouml;vdesi}</pre>\r\n\r\n<p>Kalıtım&#39;da &Uuml;ye Erişimi Bir alt sınıf , &uuml;st sınıfın t&uuml;m &uuml;yelerini i&ccedil;ermesine rağmen <strong>private </strong>olarak tanımlı olan hi&ccedil;bir &uuml;yesine erişemez.<br />\r\n&Ouml;rneğimiz &uuml;zerinden devam edelim.</p>\r\n\r\n<pre>\r\nclass Mother {\r\n String hairColor = &quot;Siyah&quot;;\r\n private final String gender = &quot;Kadın&quot;;\r\n\r\n void theCharacteristicsOfMother() {\r\n  System.out.println(&quot;Mother : \\n &quot; + &quot; Sa&ccedil; Rengi : &quot; + hairColor\r\n    + &quot; Cinsiyet : &quot; + gender);\r\n }\r\n}\r\n\r\nclass Child extends Mother {\r\n String eye = &quot;Mavi&quot;;\r\n\r\n void theCharacteristicsOfChild() {\r\n  System.out.println(&quot;Child :  \\n &quot; + &quot; Sa&ccedil; Rengi : &quot; + hairColor\r\n    + &quot; \\n &quot; + &quot; G&ouml;z Rengi : &quot; + eye + &quot; Cinsiyet : &quot; + gender); \r\n  // Burada gender &ouml;rnek değişkenine erişelemez ,\r\n        //  program derlenmeden sonlanır.\r\n }\r\n}\r\n\r\nclass SimpleInheritance {\r\n public static void main(String[] args) {\r\n  final Mother rose = new Mother();\r\n  final Child jack = new Child();\r\n  jack.theCharacteristicsOfMother();\r\n  jack.theCharacteristicsOfChild();\r\n\r\n }\r\n\r\n}</pre>\r\n\r\n<p>Daha iyi bir &ouml;rnekle anlatmaya &ccedil;alışacağım,&ouml;nceki derslerde Rectangle sınıfı &uuml;zerinden &ouml;rnekler vermiştir , aynı sınıf ve yapı &uuml;zerinden &ouml;rneklerimize devam edelim. Box sınıfını genişleterek yeni bir &ouml;zellik daha ekliyoruz , 3 &ouml;zelliğimiz vardı(width , height , depth) eklenen &ouml;zellik weight olsun .Bu şekilde dikd&ouml;rtgenimizin genişliği,y&uuml;ksekliği,derinliği ve ağırlığı oldu.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n double width;\r\n double height;\r\n double depth;\r\n\r\n Rectangle(Rectangle clone) {\r\n  width = clone.width;\r\n  height = clone.height;\r\n  depth = clone.depth;\r\n }\r\n\r\n Rectangle(double width, double height, double depth) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n }\r\n\r\n Rectangle() {\r\n  width = -1;\r\n  height = -1;\r\n  depth = -1;\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n\r\n}\r\n\r\nclass RectangleWeight extends Rectangle {\r\n double weight;\r\n\r\n RectangleWeight(RectangleWeight clone) {\r\n  width = clone.width;\r\n  height = clone.height;\r\n  depth = clone.depth;\r\n  weight = clone.weight;\r\n }\r\n\r\n RectangleWeight(double width, double height, double depth, double w) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n  weight = w;\r\n\r\n }\r\n\r\n RectangleWeight() {\r\n  width = -1;\r\n  height = -1;\r\n  depth = -1;\r\n  weight = -1;\r\n }\r\n\r\n}\r\n\r\nclass DemoRectangleWeight {\r\n public static void main(String[] args) {\r\n  final RectangleWeight myRectangle = new RectangleWeight(5, 10, 15, 25);\r\n  final RectangleWeight myRectangle2 = new RectangleWeight(myRectangle);\r\n\r\n  System.out.println(&quot;(myRectangle i&ccedil;in)\\nDikd&ouml;rtgenin Hacmi :  &quot;\r\n    + myRectangle.volume());\r\n  System.out.println(&quot;Dikd&ouml;rtgenin Ağırlığı : &quot; + myRectangle.weight);\r\n  System.out.println();\r\n  System.out.println(&quot;(myRectangle2 i&ccedil;in)\\nDikd&ouml;rtgenin Hacmi  : &quot;\r\n    + myRectangle2.volume());\r\n  System.out.println(&quot;Dikd&ouml;rtgenin Ağırlığı : &quot; + myRectangle2.weight);\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\n(myRectangle i&ccedil;in)\r\nDikd&ouml;rtgenin Hacmi :  750.0\r\nDikd&ouml;rtgenin Ağırlığı : 25.0\r\n\r\n(myRectangle2 i&ccedil;in)\r\nDikd&ouml;rtgenin Hacmi  : 750.0\r\nDikd&ouml;rtgenin Ağırlığı : 25.0\r\n\r\n</pre>\r\n\r\n<p>Burada RectangleWeight , Rectangle sınıfının &ouml;zelliklerini kalıtım yoluyla devralır ve onlara weight &ouml;zelliğinide ekler.Bir kez daha genişletelim.</p>\r\n\r\n<pre>\r\nclass ColorRectangle extends Rectangle {\r\n  String color;\r\n\r\n ColorRectangle(double width,double height,double depth,String c){\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n  color = c;\r\n\r\n }\r\n}</pre>\r\n\r\n<p>Burada ise Rectangle sınıfınımızı genişletip bir renk &ouml;zelliği verdik.</p>\r\n','1431255163','Java,OOP,Java SE',''),(8,'this Anahtar Sözcüğü','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu yazımda this anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml;n kullanımını anlatacağım , bu konuyu daha iyi anlamak i&ccedil;in bir &ouml;nceki yazım&nbsp;Java - Yapılandırıcılar ( Constructors )&nbsp;konusuna bakmakta fayda var.\r\n&nbsp;\r\n\r\n\r\nclass Rectangle {\r\n double width;\r\n double height;\r\n double depth;\r\n\r\n Rectangle(final double w, final double h, final double d) {\r\n  width = w;\r\n  height = h;\r\n  depth = d;\r\n }\r\n Rectangle(double w,double h){\r\n  width = w;\r\n  height = h;\r\n }\r\n\r\n Re... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu yazımda this anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml;n kullanımını anlatacağım , bu konuyu daha iyi anlamak i&ccedil;in bir &ouml;nceki yazım&nbsp;<a href=\"https://alicankustemur.github.io/#/post?id=4\" target=\"_blank\">Java - Yapılandırıcılar ( Constructors )</a>&nbsp;konusuna bakmakta fayda var.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n double width;\r\n double height;\r\n double depth;\r\n\r\n Rectangle(final double w, final double h, final double d) {\r\n  width = w;\r\n  height = h;\r\n  depth = d;\r\n }\r\n Rectangle(double w,double h){\r\n  width = w;\r\n  height = h;\r\n }\r\n\r\n Rectangle() {\r\n  width = -1;\r\n  height = -1;\r\n  depth = -1;\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n}\r\n</pre>\r\n\r\n<p>Bir &ouml;nceki &ouml;rnekde parametreli yapılandırıcımızı tanımlarken parametre isimlerini&nbsp;<strong>w , h , d</strong>&nbsp;olarak tanımlamıştık.Farklı isimlerde tanımlamamızın sebebi sınıfın değişkenleri ile aynı isme sahip olmamasından kaynaklanır.&nbsp;<strong>this&nbsp;</strong>anahtar s&ouml;zc&uuml;ğ&uuml; ile sınıfın değişkenlerini referans edip aynı ismi verebiliriz.Bunu bir &ouml;rnekle inceleyelim ;</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n double width;\r\n double height;\r\n double depth;\r\n\r\n Rectangle(final double width, final double height, final double depth) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n }\r\n \r\n Rectangle(double width,double height){\r\n  this.width=width;\r\n  this.height=height;\r\n }\r\n \r\n Rectangle() {\r\n  width = -1;\r\n  height = -1;\r\n  depth = -1;\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n}</pre>\r\n\r\n<p><br />\r\nBurada ki&nbsp;<strong>this.</strong>&nbsp;ile başlayan değişkenlerin hepsi aslında sınıfın değişkenlerini referans etmektedir.Daha sonra koda baktığımızda anlaşılabilirliği arttırmak i&ccedil;in bu y&ouml;ntem kullanılabilir.<br />\r\n<br />\r\n<em><strong>this&#39;in Diğer Kullanımı</strong></em></p>\r\n\r\n<pre>\r\nthis(arg&uuml;man listesi);</pre>\r\n\r\n<p><br />\r\nBurada arg&uuml;man listesine karşılık gelen yapılandırıcı &ccedil;ağrılır.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n double width;\r\n double height;\r\n double depth;\r\n\r\n Rectangle(final double width, final double height) {\r\n  this.width = width;\r\n  this.height = height;\r\n }\r\n\r\n Rectangle(final double width, final double height, final double depth) {\r\n  this(width, height);\r\n  this.depth = depth;\r\n }\r\n\r\n Rectangle() {\r\n  this(-1, -1, -1);\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n}</pre>\r\n\r\n<p>Bu programda bir &ouml;nceki program ile aynı işlemi yapar.&Uuml;&ccedil; parametreli <strong>constructor </strong>&ccedil;ağrıldığında iki parametreli <strong>constructor&#39;e </strong>g&ouml;ndermede bulunur.<br />\r\n<br />\r\n<strong>1 - Aynı anda hem this() hemde super() kullanılamaz.</strong><br />\r\n<strong>2 - Yapılandırıcıya ait herhangi bir değişken kullanılamaz.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n','1431427963','Java,OOP,Java SE',''),(9,'super Anahtar Sözcüğü','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir &ouml;nceki &nbsp;Java - Kalıtım&nbsp;adlı yazımdan kaldığım yerden devam ediyorum.\r\n&Ouml;nceki konularda kullandığımız &ouml;rnekler bu yazımda da devam etmektedir.\r\n\r\n&Ouml;rneğin , RectangleWeight&#39;in&nbsp;(subclasss) yapılandırıcısı , Rectangle ( superclass )&#39;ın width,height ve depth alanlarına a&ccedil;ıkca değer ataması yapabilir.Bu işlem yalnızca &uuml;st sınıftan kodu kopyalayıp verimi azaltmaz , aynı zamanda bir alt sınıfın &uuml;yelere er... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir &ouml;nceki &nbsp;<a href=\"https://alicankustemur.github.io/#/post?id=7\" target=\"_blank\">Java - Kalıtım</a>&nbsp;adlı yazımdan kaldığım yerden devam ediyorum.<br />\r\n&Ouml;nceki konularda kullandığımız &ouml;rnekler bu yazımda da devam etmektedir.<br />\r\n<br />\r\n&Ouml;rneğin , <strong>RectangleWeight&#39;in&nbsp;(</strong>subclasss) yapılandırıcısı , <strong>Rectangle </strong>( superclass )&#39;ın <strong>width,height ve depth</strong> alanlarına a&ccedil;ıkca değer ataması yapabilir.Bu işlem yalnızca &uuml;st sınıftan kodu kopyalayıp verimi azaltmaz , aynı zamanda bir alt sınıfın &uuml;yelere erişimini de sağlar.<br />\r\n&Uuml;st sınıfın alanlarını kapatmak isteyeceğimiz ( yani , veri &uuml;yelerini <strong>private </strong>olarak korumak) zamanlar olucaktır. Bu durumda bir &ouml;nceki &ouml;rneklerde kullandığımız yapıyı kullanamayız.Bu y&ouml;ntem ise&nbsp;<strong>Sarmalama </strong>olarak adlandırılır.Nesneye y&ouml;nelimli programlamanın birincil &ouml;zellikliğidir.<br />\r\nBir alt sınıfın , &uuml;st sınıfına g&ouml;ndermede bulunması gerekirse bunu <strong>super </strong>anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml; kullanarak yapmalıyız.<br />\r\n<strong>super </strong>anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml;n iki genel formu vardır,Birincisi &nbsp;, &uuml;st sınıfın yapılandırıcısını &ccedil;ağırır.İkincisi ise bir &uuml;st sınıfın,bir alt sınıf &uuml;yesi tarafından gizlenen bir &uuml;yesine erişmek i&ccedil;in kullanılır.<br />\r\n<br />\r\n<strong>1 - &Uuml;st Sınıf Yapılandırıcılarını &Ccedil;ağırmak İ&ccedil;in super Kullanmak</strong><br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n private final double width;\r\n private final double height;\r\n private final double depth;\r\n\r\n Rectangle(Rectangle clone) {\r\n  width = clone.width;\r\n  height = clone.height;\r\n  depth = clone.depth;\r\n }\r\n\r\n Rectangle(double width, double height, double depth) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n }\r\n\r\n Rectangle() {\r\n  width = -1;\r\n  height = -1;\r\n  depth = -1;\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n\r\n}\r\n\r\nclass RectangleWeight extends Rectangle {\r\n double weight;\r\n\r\n RectangleWeight(RectangleWeight clone) {\r\n  super(clone);\r\n  weight = clone.weight;\r\n }\r\n\r\n RectangleWeight(double width, double height, double depth, double weight) {\r\n  super(width, height, depth);\r\n  this.weight = weight;\r\n\r\n }\r\n\r\n RectangleWeight() {\r\n  super();\r\n  weight = -1;\r\n }\r\n\r\n}\r\n\r\nclass DemoRectangleWeight {\r\n public static void main(String[] args) {\r\n  final RectangleWeight myRectangle = new RectangleWeight(5, 10, 15, 25);\r\n  final RectangleWeight myRectangle2 = new RectangleWeight(myRectangle);\r\n\r\n  System.out.println(&quot;(myRectangle i&ccedil;in)\\nDikd&ouml;rtgenin Hacmi :  &quot;\r\n    + myRectangle.volume());\r\n  System.out.println(&quot;Dikd&ouml;rtgenin Ağırlığı : &quot; + myRectangle.weight);\r\n  System.out.println();\r\n  System.out.println(&quot;(myRectangle2 i&ccedil;in)\\nDikd&ouml;rtgenin Hacmi  : &quot;\r\n    + myRectangle2.volume());\r\n  System.out.println(&quot;Dikd&ouml;rtgenin Ağırlığı : &quot; + myRectangle2.weight);\r\n }\r\n}\r\n(myRectangle i&ccedil;in)\r\nDikd&ouml;rtgenin Hacmi :  750.0\r\nDikd&ouml;rtgenin Ağırlığı : 25.0\r\n\r\n(myRectangle2 i&ccedil;in)\r\nDikd&ouml;rtgenin Hacmi  : 750.0\r\nDikd&ouml;rtgenin Ağırlığı : 25.0</pre>\r\n\r\n<p>Bu programın &ccedil;ıktısı da bir &ouml;nceki yazımda yazdığım program ile aynıdır.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nRectangleWeight(double width, double height, double depth, double w) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n  weight = w;\r\n }</pre>\r\n\r\n<p>Yani bu program ile ,</p>\r\n\r\n<pre>\r\nRectangleWeight(double width, double height, double depth, double w) {\r\n  super(width, height, depth);\r\n  weight = w;\r\n }</pre>\r\n\r\n<p>bu programın yaptığı iş aynıdır.Fakat ikinci program hem verimliliği arttırır , tekrarlamayı &ouml;nler ve ayrıca <strong>Sarmalama </strong>&ouml;zelliğini birebir uygular.<br />\r\n<br />\r\n<strong>2 - super&#39;in İkinci Bir Kullanımı</strong><br />\r\n<br />\r\nsuper&#39;in ikinci kullanımı bir a&ccedil;ıdan <strong>this </strong>gibidir.Tek farkı,her zaman , kullanıldığı alt sınıfın &uuml;st sınıfına g&ouml;ndermede bulunuyor olmasıdır.<br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nsuper.uye</pre>\r\n\r\n<p>Burada ki uye , ya bir method ya da bir &ouml;rnek değişkendir. super&#39;in bu ikinci kullanımı , bir alt sınıfın &uuml;ye adlarının , &uuml;st sınıf i&ccedil;inde ki aynı adlı &uuml;yeler ile gizlendiği durumlarda &ccedil;ok sık g&ouml;r&uuml;l&uuml;r.Bunu bir &ouml;rnek ile inceleyelim.</p>\r\n\r\n<pre>\r\nclass A {\r\n int i;\r\n}\r\n\r\nclass B extends A {\r\n int i;\r\n\r\n B(int a, int b) {\r\n  super.i = a;\r\n  i = b;\r\n }\r\n\r\n void show() {\r\n  System.out.println(&quot; Superclass i = &quot; + super.i);\r\n  System.out.println(&quot; Subclass i = &quot; + i);\r\n }\r\n}\r\n\r\nclass useSuper {\r\n public static void main(String[] args) {\r\n  final B subClone = new B(1, 2);\r\n\r\n  subClone.show();\r\n }\r\n}\r\n Superclass i = 1\r\n Subclass i = 2</pre>\r\n\r\n<p><strong>B</strong>&#39;deki <strong>i</strong> &ouml;rnek değişkeni <strong>A</strong>&#39;dakini gizlemesine rağmen <strong>super</strong> , &uuml;st sınıf i&ccedil;erisinde tanımlanan <strong>i</strong>&#39;ye erişime izin verir.G&ouml;rd&uuml;ğ&uuml;n&uuml;z gibi <strong>super </strong>, ayrıca alt sınıf tarafından gizlenen methodları &ccedil;ağırmak i&ccedil;in de kullanılabilir.</p>\r\n','1431427963','Java,OOP,Java SE',''),(10,'Java - Kalıtım #2  Çok Düzeyli Bir Hiyerarşi Oluşturmak','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir &ouml;nceki yazılarımda kalıtım ile ilgili , bir &uuml;st sınıf birde alt sınıf oluşturmuştuk.Bu yapıyı istediğiniz kadar kalıtım katmanı i&ccedil;eren bir hiyerarşi oluşturabilirsiniz.Oluşturulmuş bir alt sınıfın &nbsp;( subclass) başka bir sınıfın &uuml;st sınıfı olabileceğinden &ouml;nceki yazılarımda bahsetmiştim.\r\nŞimdi &ouml;rneğimize kaldığımız yerden devam edelim ve bu &ouml;rneğe yeni bir sınıf ekleyelim.Dikd&ouml;rtgen &ouml;rneğinde ... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir &ouml;nceki yazılarımda kalıtım ile ilgili , bir &uuml;st sınıf birde alt sınıf oluşturmuştuk.Bu yapıyı istediğiniz kadar kalıtım katmanı i&ccedil;eren bir hiyerarşi oluşturabilirsiniz.Oluşturulmuş bir alt sınıfın &nbsp;( subclass) başka bir sınıfın &uuml;st sınıfı olabileceğinden &ouml;nceki yazılarımda bahsetmiştim.<br />\r\nŞimdi &ouml;rneğimize kaldığımız yerden devam edelim ve bu &ouml;rneğe yeni bir sınıf ekleyelim.<strong>Dikd&ouml;rtgen</strong> &ouml;rneğinde <strong>Dikd&ouml;rtgene Ağırlık </strong>&ouml;zelliği vermiştik , şimdi size bir <strong>Nakliye </strong>&ouml;zelliği ekleyelim ve bu <strong>Dikd&ouml;rtgenimizin </strong>bir &uuml;r&uuml;n veya mal olduğunu d&uuml;ş&uuml;nelim.<br />\r\n&quot;<strong>Shipment</strong>&quot; adında bir sınıf ekliyorum.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n private final double width;\r\n private final double height;\r\n private final double depth;\r\n\r\n Rectangle(Rectangle clone) {\r\n  width = clone.width;\r\n  height = clone.height;\r\n  depth = clone.depth;\r\n }\r\n\r\n Rectangle(double width, double height, double depth) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n }\r\n\r\n Rectangle() {\r\n  width = -1;\r\n  height = -1;\r\n  depth = -1;\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n\r\n}\r\n\r\nclass RectangleWeight extends Rectangle {\r\n double weight;\r\n\r\n RectangleWeight(RectangleWeight clone) {\r\n  super(clone);\r\n  weight = clone.weight;\r\n }\r\n\r\n RectangleWeight(double width, double height, double depth, double weight) {\r\n  super(width, height, depth);\r\n  this.weight = weight;\r\n\r\n }\r\n\r\n RectangleWeight() {\r\n  super();\r\n  weight = -1;\r\n }\r\n}\r\n\r\nclass Shipment extends RectangleWeight {\r\n double cost;\r\n\r\n Shipment(Shipment clone) {\r\n  super(clone);\r\n  cost = clone.cost;\r\n }\r\n\r\n Shipment(double width, double height, double depth, double weight,\r\n   double cost) {\r\n  super(width, height, depth, weight);\r\n  this.cost = cost;\r\n }\r\n\r\n Shipment() {\r\n  super();\r\n  cost = -1;\r\n }\r\n\r\n}\r\n\r\nclass DemoShipment {\r\n public static void main(String args[]) {\r\n  final Shipment shipment = new Shipment(5, 10, 15, 20, 30);\r\n  final Shipment shipment2 = new Shipment(shipment);\r\n\r\n  double vol;\r\n  vol = shipment.volume();\r\n  System.out.println(&quot;( shipment i&ccedil;in ) \\n Dikd&ouml;rtgenin Hacmi &quot; + vol\r\n    + &quot; \\n Dikd&ouml;rtgenin Ağırlığı : &quot; + shipment.weight\r\n    + &quot; \\n Nakliye &Uuml;creti : $&quot; + shipment.cost);\r\n  System.out.println();\r\n  vol = shipment2.volume();\r\n  System.out.println(&quot;( shipment2 i&ccedil;in ) \\n Dikd&ouml;rtgenin Hacmi &quot; + vol\r\n    + &quot; \\n Dikd&ouml;rtgenin Ağırlığı : &quot; + shipment2.weight\r\n    + &quot; \\n Nakliye &Uuml;creti : $&quot; + shipment2.cost);\r\n }\r\n}\r\n( shipment i&ccedil;in ) \r\n Dikd&ouml;rtgenin Hacmi 750.0 \r\n Dikd&ouml;rtgenin Ağırlığı : 20.0 \r\n Nakliye &Uuml;creti : $30.0\r\n\r\n( shipment2 i&ccedil;in ) \r\n Dikd&ouml;rtgenin Hacmi 750.0 \r\n Dikd&ouml;rtgenin Ağırlığı : 20.0 \r\n Nakliye &Uuml;creti : $30.0</pre>\r\n\r\n<p>super() devamlı en yakındaki &uuml;st sınıfın yapılandırıcısına g&ouml;ndermede bulunur.Shipment i&ccedil;indeki super(),RectangleWeight i&ccedil;erisindeki yapılandırıcıyı &ccedil;ağırır .RectangleWeight i&ccedil;erisindeki super() , Rectangle i&ccedil;indeki yapılandırıcıyı &ccedil;ağırır.&Ouml;rneklerimin daha iyi anlaşılması i&ccedil;in aynı dosya i&ccedil;erisinde oluşturarak anlatıyorum , aslında ger&ccedil;ekte her sınıfın farklı dosyalarda tutulması bir standarttır.</p>\r\n','1431427963','Java,OOP,Java SE',''),(11,'Java - Kalıtım #3 Yapılandırıcıların Çağrılma Sırası','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir sınıf hiyerarşisinde t&uuml;retilme sırasına g&ouml;re &ccedil;ağrılırlar .Yani &uuml;st sınıftan alt sınıflara doğru bir şekilde. Bunu basit bir &ouml;rnek ile ele alalım.\r\n\r\n\r\nclass A {\r\n A() {\r\n  System.out.println(&quot; Ben A&#39;nın Yapılandırıcısıyım !&quot;);\r\n }\r\n}\r\n\r\nclass B extends A {\r\n B() {\r\n  System.out.println(&quot; Ben B&#39;nin Yapılandırıcısıyım !&quot;);\r\n }\r\n}\r\n\r\nclass C extends B {\r\n C() {\r\n  System.out.println(&quot; Ben C&#39;nin Yapı... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir sınıf hiyerarşisinde t&uuml;retilme sırasına g&ouml;re &ccedil;ağrılırlar .Yani &uuml;st sınıftan alt sınıflara doğru bir şekilde. Bunu basit bir &ouml;rnek ile ele alalım.</p>\r\n\r\n<pre>\r\nclass A {\r\n A() {\r\n  System.out.println(&quot; Ben A&#39;nın Yapılandırıcısıyım !&quot;);\r\n }\r\n}\r\n\r\nclass B extends A {\r\n B() {\r\n  System.out.println(&quot; Ben B&#39;nin Yapılandırıcısıyım !&quot;);\r\n }\r\n}\r\n\r\nclass C extends B {\r\n C() {\r\n  System.out.println(&quot; Ben C&#39;nin Yapılandırıcısıyım !&quot;);\r\n }\r\n}\r\n\r\nclass CallingConstuructors {\r\n public static void main(String args[]) {\r\n  final C c = new C();\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\n Ben A&#39;nın Yapılandırıcısıyım !\r\n Ben B&#39;nin Yapılandırıcısıyım !\r\n Ben C&#39;nin Yapılandırıcısıyım !</pre>\r\n\r\n<p>Mantıklı olarak bu &ccedil;ağrılmanın sebebi bellidir.Bir &uuml;st sınıf hi&ccedil;bir şekilde bir alt sınıfın bilgisine sahip değildir.</p>\r\n','1431427963','Java,OOP,Java SE',''),(12,'Java - Kalıtım #4 - Methodu Ezmek','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir sınıf hiyerarşisinde , alt sınıfa ait bir method &uuml;st sınıfında ki bir method ile aynı tipe ve ada sahipse ve b&ouml;yle bir method &ccedil;ağrıldığında her zaman methodun alt sınıf tarafından tanımlanan versiyonuna başvurulur.&Uuml;st sınıftaki method gizlenmiş olur.Bunu bir &ouml;rnek ile inceleyelim.\r\n\r\n\r\nclass A {\r\n    int i, j;\r\n\r\n    A(int a, int b) {\r\n        i = a;\r\n        j = b;\r\n    }\r\n\r\n    void show() {\r\n        System.out.println(&quot;i = &quot; +... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir sınıf hiyerarşisinde , alt sınıfa ait bir method &uuml;st sınıfında ki bir method ile aynı tipe ve ada sahipse ve b&ouml;yle bir method &ccedil;ağrıldığında her zaman methodun alt sınıf tarafından tanımlanan versiyonuna başvurulur.&Uuml;st sınıftaki method gizlenmiş olur.Bunu bir &ouml;rnek ile inceleyelim.</p>\r\n\r\n<pre>\r\nclass A {\r\n    int i, j;\r\n\r\n    A(int a, int b) {\r\n        i = a;\r\n        j = b;\r\n    }\r\n\r\n    void show() {\r\n        System.out.println(&quot;i = &quot; + i + &quot; j = &quot; + j);\r\n    }\r\n}\r\n\r\nclass B extends A {\r\n    int k;\r\n\r\n    B(int a, int b, int c) {\r\n        super(a, b);\r\n        k = c;\r\n    }\r\n\r\n    void show() {\r\n        System.out.println(&quot;k = &quot; + k);\r\n    }\r\n}\r\n\r\nclass Override {\r\n    public static void main(String args[]) {\r\n        final B subClone = new B(5, 10, 15);\r\n    }\r\n}\r\n    Programın &Ccedil;ıktısı :k=15\r\n</pre>\r\n\r\n<p><strong>B</strong> tipinde oluşturulan bir nesne &uuml;zerinden , <strong>show()</strong> methodunu &ccedil;ağırdığımızda <strong>B</strong> i&ccedil;inde tanımlı olan <strong>show() </strong>methodu &ccedil;ağrılır , &ccedil;&uuml;nk&uuml; <strong>show()&#39;</strong>un <strong>B </strong>i&ccedil;erisinde ki versiyonu <strong>A </strong>i&ccedil;erisindeki versiyonu ezer.<strong>(Override)</strong>Yine ezilen versiyona ulaşmak i&ccedil;in <strong>super </strong>kullanılır.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nclass A {\r\n    int i, j;\r\n\r\n    A(int a, int b) {\r\n        i = a;\r\n        j = b;\r\n    }\r\n\r\n    void show() {\r\n        System.out.println(&quot;i = &quot; + i + &quot; j = &quot; + j);\r\n    }\r\n}\r\n\r\nclass B extends A {\r\n    int k;\r\n\r\n    B(int a, int b, int c) {\r\n        super(a, b);\r\n        k = c;\r\n    }\r\n\r\n    void show() {\r\n        super.show();\r\n        System.out.println(&quot;k = &quot; + k);\r\n    }\r\n}\r\n\r\nclass Override {\r\n    public static void main(String args[]) {\r\n        final B subClone = new B(5, 10, 15);\r\n    }\r\n}\r\n    Programın &Ccedil;ıktısı :i=5j=10k=15</pre>\r\n\r\n<p>Method ezmesi sadece aynı adı ve tip imzasını taşıması durumunda ge&ccedil;erlidir.Aksi takdirde bir method ezmesi değil , aşırı y&uuml;klenme oluşur.Bunu bir &ouml;rnekle a&ccedil;ıklayayım.</p>\r\n\r\n<pre>\r\nclass A {\r\n    int i, j;\r\n\r\n    A(int a, int b) {\r\n        i = a;\r\n        j = b;\r\n    }\r\n\r\n    void show() {\r\n        System.out.println(&quot;i = &quot; + i + &quot; j = &quot; + j);\r\n    }\r\n}\r\n\r\nclass B extends A {\r\n    int k;\r\n\r\n    B(int a, int b, int c) {\r\n        super(a, b);\r\n        k = c;\r\n    }\r\n\r\n    void show(String msg) {\r\n        System.out.println(msg + k);\r\n    }\r\n}\r\n\r\nclass Override {\r\n    public static void main(String args[]) {\r\n        final B subClone = new B(5, 10, 15);\r\n        subClone.show(&quot;k adında bir değişken = &quot;);\r\n        subClone.show();\r\n    }\r\n}\r\n    Programın &Ccedil;ıktısı :k adında bir değişken=15i=5j=10</pre>\r\n\r\n<p>Burada B i&ccedil;erisinde ki show() methodu , A i&ccedil;erisindeki show() methodunu aşırı y&uuml;klemiştir.</p>\r\n\r\n<p>&nbsp;</p>\r\n','1431427963','Java,OOP,Java SE',''),(13,'Java - Kalıtım #5 Abstract Sınıfları Kullanmak ( Özet/Soyut)','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir sınıf hiyerarşisinde , alt sınıfa ait bir method &uuml;st sınıfında ki bir method ile aynı tipe ve ada sahipse ve b&ouml;yle bir method &ccedil;ağrıldığında her zaman methodun alt sınıf tarafından tanımlanan versiyonuna başvurulur.&Uuml;st sınıftaki method gizlenmiş olur.Bunu bir &ouml;rnek ile inceleyelim. &Ouml;nceki yazılarımda &nbsp;Java - Kalıtım&nbsp;konularını işlemiştik. Şimdi kaldığımız yerden devam ediyoruz.Eğer bu konu hakkında pek bir bilg... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir sınıf hiyerarşisinde , alt sınıfa ait bir method &uuml;st sınıfında ki bir method ile aynı tipe ve ada sahipse ve b&ouml;yle bir method &ccedil;ağrıldığında her zaman methodun alt sınıf tarafından tanımlanan versiyonuna başvurulur.&Uuml;st sınıftaki method gizlenmiş olur.Bunu bir &ouml;rnek ile inceleyelim. &Ouml;nceki yazılarımda &nbsp;Java - Kalıtım&nbsp;konularını işlemiştik. Şimdi kaldığımız yerden devam ediyoruz.Eğer bu konu hakkında pek bir bilginiz yok ise &ouml;nceki konulara bakmakta yarar var.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&Ouml;nceki &ouml;rneklerimizde kullandığımız yapıların hepsinde i&ccedil;eriği hep &uuml;st sınıf tarafından doldurulan ve ona eklemeler yapan alt sınıfları incelemiştik.Bazen yalnızca alt sınıflar tarafından paylaşılacak ve i&ccedil;eriği onlar tarafından doldurulacak , genel bir form tanımlayan &uuml;st sınıflar oluşturmak isteyebilirsiniz.B&ouml;yle bir sınıf , alt sınıfların ger&ccedil;ekleştirmek zorunda olduğu methodların doğasını belirler.</p>\r\n\r\n<p>Bu durumda alt sınıfın ger&ccedil;ekten de t&uuml;m gerekli methodları ezmesini sağlamak i&ccedil;in bir yol olması gerekir.Java bu problemi <strong><em>&ouml;zet-soyut method</em> ( abstract method ) </strong>kavramı ile &ccedil;&ouml;zer.</p>\r\n\r\n<p>&Ouml;zet bir method deklara etmek i&ccedil;in aşağıdaki genel form kullanılır.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>abstract tip_adi ( <em>parametre listesi</em> );</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>G&ouml;rd&uuml;ğ&uuml;n&uuml;z gibi , bir method g&ouml;vdesi yoktur.</p>\r\n\r\n<p>Bir sınıfı &ouml;zet olarak deklere etmek i&ccedil;in <strong><em>class </em></strong>anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml;n sol tarafında <strong><em>abstract </em></strong>anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml; kullanmak yeterlidir.</p>\r\n\r\n<p>Anlattığım şeyleri bir &ouml;rnek &uuml;zerinde inceleyelim.</p>\r\n\r\n<pre>\r\nabstract class A {\r\n abstract void callMe();\r\n\r\n void callMeToo() {\r\n  System.out.println(&quot;Bu bir somut methoddur.&quot;);\r\n }\r\n}\r\n\r\nclass B extends A {\r\n @Override\r\n void callMe() {\r\n  System.out.println(&quot;B A&#39;daki callMe() methodunu i&ccedil;ermek zorundadır. &quot;);\r\n }\r\n}\r\n\r\nclass AbstractDemo {\r\n public static void main(String args[]) {\r\n  final B b = new B();\r\n  b.callMe();\r\n  b.callMeToo();\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nB A&#39;daki callMe() methodunu i&ccedil;ermek zorundadır. \r\nBu bir somut methoddur.</pre>\r\n\r\n<p>Programda A sınıfından bir nesne deklare edilmediğine dikkat edin.&Ouml;zet bir sınıfı &ouml;rneklendirmek m&uuml;mk&uuml;n değildir.Bir başka nokta : A sınıfı callMeToo() adında somut bir method&#39;a sahiptir.&Ouml;zet sınıflar &ouml;rneklendirmek i&ccedil;in kullanılamazlar , sadece nesne referansları oluşturmak i&ccedil;in kullanılabilirler.&Ccedil;&uuml;nk&uuml; Java&#39;nın &ccedil;alışma zamanı &ccedil;ok bi&ccedil;imliliğine yaklaşımı , &uuml;st sınıf referansları aracılığıyla ger&ccedil;ekleşir.Bu y&uuml;zden bir alt sınıf nesnesine işaret etmek &uuml;zere , &ouml;zet bir sınıfa referans oluşturmak m&uuml;mk&uuml;nd&uuml;r. Bunu bir &ouml;rnek ile ele alalım.</p>\r\n\r\n<pre>\r\nabstract class Figure {\r\n double dim1;\r\n double dim2;\r\n\r\n Figure(double a, double b) {\r\n  dim1 = a;\r\n  dim2 = b;\r\n }\r\n\r\n abstract double area();\r\n}\r\n\r\nclass Rectangle extends Figure {\r\n Rectangle(double a, double b) {\r\n  super(a, b);\r\n }\r\n\r\n @Override\r\n double area() {\r\n  System.out.println(&quot;Dikd&ouml;rtgen&#39;in İ&ccedil; Alanı &quot;);\r\n  return dim1 * dim2;\r\n }\r\n}\r\n\r\nclass Triangle extends Figure {\r\n Triangle(double a, double b) {\r\n  super(a, b);\r\n }\r\n\r\n @Override\r\n double area() {\r\n  System.out.println(&quot;&Uuml;&ccedil;gen&#39;in İ&ccedil; Alanı &quot;);\r\n  return dim1 * dim2 / 2;\r\n }\r\n}\r\n\r\nclass AbstractAreas {\r\n public static void main(String args[]) {\r\n  // Figure f = new Figure(10,7); Ge&ccedil;ersiz , oluşturulamaz.\r\n  final Rectangle r = new Rectangle(5, 2);\r\n  final Triangle t = new Triangle(3, 7);\r\n  Figure figureReference;\r\n  figureReference = r;\r\n  System.out.println(figureReference.area());\r\n  figureReference = t;\r\n  System.out.println(figureReference.area());\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı:\r\nDikd&ouml;rtgen&#39;in İ&ccedil; Alanı \r\n10.0\r\n&Uuml;&ccedil;gen&#39;in İ&ccedil; Alanı \r\n10.5</pre>\r\n\r\n<p>G&ouml;rd&uuml;ğ&uuml;n&uuml;z gibi , <strong>area() </strong>methodu abstract bırakılmıştır . &Ccedil;&uuml;nk&uuml;<strong> area()</strong> hesaplaması i&ccedil;in her nesne farklı bir method kullanmaktadır.Dikd&ouml;rtgenin i&ccedil; alanı form&uuml;l&uuml; ile &Uuml;&ccedil;genin i&ccedil; alanı form&uuml;l&uuml; farklı olduğu i&ccedil;in aynı methodu kullanamayız.area() methodunu abstract oluşturmamız nedeni budur.&Uuml;st sınıf tarafından <strong>abstract </strong>oluşturulan methodlar alt sınıflar tarafından kendi i&ccedil;lerinde farklı &ouml;zelliklerde oluşturulmak i&ccedil;in tasarlanmıştır.</p>\r\n','1431514363','Java,OOP,Java SE',''),(14,'Java - Arabirim ( Interface )','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Bu yazımda arabimlerden (interface) bahsedeceğim . interface anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml; kullanarak , bir sınıfın arabirimini onun uygulamasından tamamen &ouml;zetleyebilirsiniz.Yani , interface kullanarak bir sınıfın nasıl yapacağını değil , ne yapması gerektiğini belirtebilirsiniz. Arabirimler s&ouml;z dizimi olarak sınıflarla benzerlik g&ouml;sterirler.Fakat arabirimlerin &ouml;rnek değişkenleri yoktur ve methodları g&ouml;vdesiz olarak deklare edilir.\r\n\r\n- Ara... </div>','<p>Bu yazımda <strong>arabimlerden (interface)</strong> bahsedeceğim . <em><strong>interface</strong></em> anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml; kullanarak , bir sınıfın arabirimini onun uygulamasından tamamen &ouml;zetleyebilirsiniz.Yani , interface kullanarak bir sınıfın nasıl yapacağını değil , ne yapması gerektiğini belirtebilirsiniz. Arabirimler s&ouml;z dizimi olarak sınıflarla benzerlik g&ouml;sterirler.Fakat arabirimlerin &ouml;rnek değişkenleri yoktur ve methodları g&ouml;vdesiz olarak deklare edilir.<br />\r\n<br />\r\n- Arabirim bir kez tanımlandığında bir &ccedil;ok sınıf tarafından implement edilebilir.Ayrıca bir sınıf da bir &ccedil;ok arabirime sahip olabilir.<br />\r\n- &Ouml;zet sınıflara benzemelerine rağmen arabirimlerin bir kabiliyeti daha vardır:Bir sınıf birden fazla arabirim uyguyabilir.Buna karşılık bir sınıf sadece tek bir &uuml;st sınıftan ( &ouml;zet veya başka) t&uuml;retilebilir.<br />\r\n- Bir arabirim implement etmek i&ccedil;in sınıfın arabirim tarafından tanımlanan methodların t&uuml;m&uuml;n&uuml; uygulaması zorunludur.<br />\r\n- Implement edilen arabirimin methodları uyglandığında sınıf kendi methodlarını da ekleyebilir.<br />\r\n- Implement edildiği sınıfın arabirim ile aynı ismi taşıyan methodun aynı tip imzası ve <em><strong>public </strong></em>erişim belirtecine sahip olması gereklidir.</p>\r\n\r\n<p><br />\r\nBasit bir &ouml;rnek ile inceleyelim.</p>\r\n\r\n<pre>\r\ninterface Callback {\r\n void callBack(int param);\r\n}\r\n\r\nclass Client implements Callback {\r\n\r\n @Override\r\n public void callBack(int param) {\r\n  System.out.println(&quot;callBack methodu &ccedil;ağrıldı &quot; + param);\r\n }\r\n\r\n void nonIFaceMeth() {\r\n  System.out\r\n    .println(&quot;Bir sınıfa implement edilen arabirimden (interface) &quot;\r\n      + &quot;&uuml;yelerinden başka kendi &uuml;yelerini tanımlayabilir. &quot;);\r\n }\r\n\r\n}\r\n\r\nclass TestInterface {\r\n public static void main(String args[]) {\r\n  Callback c = new Client();\r\n  c.callBack(5);\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\ncallBack methodu &ccedil;ağrıldı 5</pre>\r\n\r\n<p>Burada <strong>c</strong> , <strong>Callback </strong>arabirim tipinde deklare edilmiştir.Ancak ona <strong>Client&#39;in </strong>bir &ouml;rneği atanmıştır<strong>.c,</strong> <strong>callBack()</strong>&nbsp;methoduna erişmek i&ccedil;in kullanılabilmesine rağmen <strong>Client </strong>sınıfının diğer &uuml;yelerine erişemez.Bir arabirim referans değişkeni sadece kendi interface deklerasyonunda deklare edilen methodun bilgisine sahiptir.Bu sebepten &ouml;t&uuml;r&uuml; c , <strong>nonIFaceMeth</strong>() methoduna erişemez.&Ccedil;&uuml;nk&uuml;<strong> c</strong> , <strong>Callback </strong>tarafından değil , <strong>Client </strong>tarafından tanımlanmıştır. Başka bir &ouml;rnek ile a&ccedil;ıklayayım.</p>\r\n\r\n<pre>\r\ninterface Callback {\r\n void callBack(int param);\r\n}\r\n\r\nclass Client implements Callback {\r\n\r\n @Override\r\n public void callBack(int param) {\r\n  System.out.println(&quot;Client \\n callBack methodu &ccedil;ağrıldı &quot; + param);\r\n }\r\n\r\n void nonIFaceMeth() {\r\n  System.out\r\n    .println(&quot;Bir sınıfa implement edilen arabirimden (interface) &quot;\r\n      + &quot;&uuml;yelerinden başka kendi &uuml;yelerini tanımlayabilir. &quot;);\r\n }\r\n\r\n}\r\n\r\nclass AnotherClient implements Callback {\r\n @Override\r\n public void callBack(int param) {\r\n  System.out.println(&quot;AnotherClient&quot;);\r\n  System.out.println(&quot; &quot; + param + &quot;&#39;in Karesi &quot; + (param * param));\r\n }\r\n}\r\n\r\nclass TestInterface2 {\r\n public static void main(String args[]) {\r\n  Callback c = new Client();\r\n  final AnotherClient ac = new AnotherClient();\r\n\r\n  c.callBack(5);\r\n  c = ac;\r\n  c.callBack(5);\r\n\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nClient \r\n callBack methodu &ccedil;ağrıldı 5\r\nAnotherClient\r\n 5&#39;in Karesi 25</pre>\r\n\r\n<p><strong>Yuvalanmış Arabimler</strong> Bir arabirim bir sınıfın yada başka bir arabirim &uuml;yesi olarak deklare edilebilir.B&ouml;yle bir arabirime &uuml;ye <strong>arabirim </strong>veya <strong>yuvalanmış arabirim </strong>denir. Bir &ouml;rnek yapalım.</p>\r\n\r\n<pre>\r\nclass A {\r\n public interface NestedIF {\r\n  boolean isNotNegative(int x);\r\n }\r\n}\r\n\r\nclass B implements A.NestedIF {\r\n @Override\r\n public boolean isNotNegative(int x) {\r\n  if (x &lt; 0) {\r\n   return false;\r\n  } else {\r\n   return true;\r\n  }\r\n }\r\n}\r\n\r\nclass NestedIFDemo {\r\n public static void main(String args[]) {\r\n   A.NestedIF nif = new B();\r\n  if (nif.isNotNegative(10)) {\r\n   System.out.println(&quot;10 : Bu bir pozitif sayıdır.&quot;);\r\n  }\r\n\r\n  if (nif.isNotNegative(-10)) {\r\n   System.out.println(&quot;-10 : Bu bir pozitif sayıdır.&quot;);\r\n  } else {\r\n   System.out.println(&quot;-10 : Bu bir negatif sayıdır.&quot;);\r\n  }\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\n10 : Bu bir pozitif sayıdır.\r\n-10 : Bu bir negatif sayıdır.</pre>\r\n\r\n<p><strong>A&#39;nın NestedIF</strong> adlı bir &uuml;ye arabirim tanımladığına ve bu arabirimin public olarak deklare edildiğine dikkat edelim.<strong>B</strong> sınıfı implements <strong>A.NestedIF</strong> şeklinde belirtilerek yuvalanmış arabirimi uygular.nif adlı <strong>A.NestedIF</strong> referansı oluşturulur ve <strong>B </strong>nesnesine referans atanır.<strong>B</strong> sınıfı<strong> A.NestedIF</strong> arabirimini uygulandığından bu kullanım ge&ccedil;erlidir.</p>\r\n','1431514363','Java,OOP,Java SE',''),(15,'Java - Interface & Abstract Örneği','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\n&Ouml;nceki yazılarımda Interface ( Arabirim )&nbsp;ve Abstract ( &Ouml;zet / Soyut)&nbsp;konularından&nbsp;bahsetmiştim.\r\nŞimdi daha geniş ve anlaşılabilir bir &ouml;rnek ile bunu ele alalım.\r\n\r\n\r\ninterface Living {\r\n String talk();\r\n String myNameIs();\r\n}\r\n\r\nabstract class People implements Living {\r\n private final String name;\r\n\r\n protected People(String name) {\r\n  this.name = name;\r\n }\r\n\r\n @Override\r\n public String myNameIs() {\r\n  return name;\r\n }\r\n\r\n}\r\n\r\nclass Ali extends Peopl... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>&Ouml;nceki yazılarımda <strong><a href=\"https://alicankustemur.github.io/#/post?id=14\" target=\"_blank\">Interface ( Arabirim )&nbsp;</a></strong>ve<a href=\"https://alicankustemur.github.io/#/post?id=13\" target=\"_blank\"><strong> Abstract ( &Ouml;zet / Soyut)</strong></a><strong>&nbsp;</strong>konularından&nbsp;bahsetmiştim.<br />\r\nŞimdi daha geniş ve anlaşılabilir bir &ouml;rnek ile bunu ele alalım.</p>\r\n\r\n<pre>\r\ninterface Living {\r\n String talk();\r\n String myNameIs();\r\n}\r\n\r\nabstract class People implements Living {\r\n private final String name;\r\n\r\n protected People(String name) {\r\n  this.name = name;\r\n }\r\n\r\n @Override\r\n public String myNameIs() {\r\n  return name;\r\n }\r\n\r\n}\r\n\r\nclass Ali extends People {\r\n\r\n public Ali(String name) {\r\n  super(name);\r\n\r\n }\r\n\r\n @Override\r\n public String talk() {\r\n  return &quot; Merhaba , Benim Adım&quot;;\r\n }\r\n\r\n}\r\n\r\nclass Can extends People {\r\n public Can(String name) {\r\n  super(name);\r\n }\r\n\r\n @Override\r\n public String talk() {\r\n  return &quot; Merhaba , Ben &quot;;\r\n }\r\n}\r\n\r\nclass PeopleDemo {\r\n public static void main(String args[]) {\r\n  final Living[] peoples = { new Ali(&quot; Ali &quot;), new Can(&quot; Can &quot;) };\r\n  for (final Living people : peoples) {\r\n   System.out.println(people.talk() + people.myNameIs());\r\n  }\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\n Merhaba , Benim Adım Ali \r\n Merhaba , Ben  Can </pre>\r\n\r\n<p>Bu programda <strong>Living (Canlılar)</strong> adında bir <strong>interface </strong>oluşturdum . Ardından bir<strong> abstract</strong> sınıfa bunu <strong>implement </strong>ettim. Daha sonra oluşturduğum bu <strong>abstract People (İnsan)</strong> sınıfından 2 adet <strong>alt sınıf (subclass)</strong> oluşturdum.Oluşturduğum 2 alt class&#39;ında <strong>talk()</strong> methodu birbirinden bağımsız bir sonu&ccedil; d&ouml;nderiyor.Fakat name değişkeni ise hep aynı constructoru ve sadece abstract class i&ccedil;erisindeki <strong>myNameIs()</strong> methoduna g&ouml;nderme yapıyor.Bu sayede <strong>myNameIs()</strong> methodunu tekrar tekrar yazmaktansa sadece 1 kere yazıp b&uuml;t&uuml;n alt classlarda &ccedil;ağırmış olduk.Bu yapı aynı zamanda &Ccedil;ok Bi&ccedil;imlilik &ouml;zelliğini işaret eder.Temel sınıf ( People )&#39;dan t&uuml;retilmiş olan alt sınıflarda paylaşılan aynı methodun bu sınıflarda farklı şekillerde uyarlanabilmesidir.</p>\r\n','1431514363','Java,OOP,Java SE',''),(16,'Java - Interface & Abstract Örneği #2','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir &ouml;nceki &ouml;rneğe buradan ulaşabilirsiniz.\r\nBu &ouml;rneğe GitHub &uuml;zerinden erişebilirsiniz.\r\nGitHub - InterfaceAbstractExampleTwo\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @Author : Ali Can Kuştemur\r\n * @Date : 14 May 2015\r\n * @File_Name : Animal.java\r\n * @Blog : http://alicankustemur.github.io\r\n */\r\ninterface BasicAnimals {\r\n String talk();\r\n\r\n void sit();\r\n\r\n void run();\r\n\r\n void features();\r\n}\r\n\r\nabstract class Animal implements BasicAnimals {\r\n private String name;\r\n private double heigh... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir &ouml;nceki &ouml;rneğe <a href=\"https://alicankustemur.github.io/#/post?id=15\" target=\"_blank\">buradan </a>ulaşabilirsiniz.<br />\r\nBu &ouml;rneğe GitHub &uuml;zerinden erişebilirsiniz.<br />\r\n<a href=\"https://github.com/alicankustemur/InterfaceAbstractExampleTwo\" target=\"_blank\">GitHub - InterfaceAbstractExampleTwo</a></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/16/1.jpg\" style=\"height:272px; width:500px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/16/2.jpg\" style=\"height:295px; width:392px\" /></p>\r\n\r\n<pre>\r\n/**\r\n * @Author : Ali Can Kuştemur\r\n * @Date : 14 May 2015\r\n * @File_Name : Animal.java\r\n * @Blog : <a href=\"http://alicankustemur.github.io/\">http://alicankustemur.github.io</a>\r\n */\r\ninterface BasicAnimals {\r\n String talk();\r\n\r\n void sit();\r\n\r\n void run();\r\n\r\n void features();\r\n}\r\n\r\nabstract class Animal implements BasicAnimals {\r\n private String name;\r\n private double height;\r\n private double weight;\r\n private String color;\r\n private String eyeColor;\r\n\r\n @Override\r\n abstract public String talk();\r\n\r\n protected Animal(final String name, final double height,\r\n   final double weight, final String color, final String eyeColor) {\r\n  setName(name);\r\n  setHeight(height);\r\n  setWeight(weight);\r\n  setColor(eyeColor);\r\n  setEyeColor(eyeColor);\r\n }\r\n\r\n protected Animal() {\r\n  setName(&quot;İsimsiz bir hayvan&quot;);\r\n  setHeight(-1);\r\n  setWeight(-1);\r\n  setColor(&quot;Siyah&quot;);\r\n  setEyeColor(&quot;Siyah&quot;);\r\n }\r\n\r\n @Override\r\n public void sit() {\r\n  System.out.println(&quot; Oturuyorum !&quot;);\r\n }\r\n\r\n @Override\r\n public void run() {\r\n  System.out.println(&quot; Koşuyorum !&quot;);\r\n }\r\n\r\n @Override\r\n public void features() {\r\n  System.out.println(&quot; Adı :&quot; + getName());\r\n  System.out.println(&quot; Boyu :&quot; + getHeight() + &quot; cm&quot;);\r\n  System.out.println(&quot; Ağırlığı :&quot; + getWeight() + &quot; kg&quot;);\r\n  System.out.println(&quot; Rengi :&quot; + getColor());\r\n  System.out.println(&quot; G&ouml;z Rengi :&quot; + getEyeColor());\r\n }\r\n\r\n public String getName() {\r\n  return name;\r\n }\r\n\r\n public void setName(final String name) {\r\n  this.name = name;\r\n }\r\n\r\n public double getHeight() {\r\n  return height;\r\n }\r\n\r\n public void setHeight(final double height) {\r\n  this.height = height;\r\n }\r\n\r\n public double getWeight() {\r\n  return weight;\r\n }\r\n\r\n public void setWeight(final double weight) {\r\n  this.weight = weight;\r\n }\r\n\r\n public String getColor() {\r\n  return color;\r\n }\r\n\r\n public void setColor(final String color) {\r\n  this.color = color;\r\n }\r\n\r\n public String getEyeColor() {\r\n  return eyeColor;\r\n }\r\n\r\n public void setEyeColor(final String eyeColor) {\r\n  this.eyeColor = eyeColor;\r\n }\r\n\r\n}\r\n\r\nclass Dog extends Animal {\r\n Dog(final String name, final double height, final double weight,\r\n   final String color, final String eyeColor) {\r\n  super(name, height, weight, color, eyeColor);\r\n }\r\n\r\n Dog() {\r\n  super();\r\n }\r\n\r\n @Override\r\n public String talk() {\r\n  return &quot; Hav Hav!&quot;;\r\n }\r\n}\r\n\r\nclass Cat extends Animal {\r\n Cat(final String name, final double height, final double weight,\r\n   final String color, final String eyeColor) {\r\n  super(name, height, weight, color, eyeColor);\r\n }\r\n\r\n Cat() {\r\n  super();\r\n }\r\n\r\n @Override\r\n public String talk() {\r\n  return &quot; Miyav Miyav&quot;;\r\n }\r\n}\r\n\r\nclass AnimalDemo {\r\n public static void main(final String args[]) {\r\n  final BasicAnimals myDog = new Dog(&quot;Karabaş&quot;, 45, 25, &quot;Beyaz&quot;,\r\n    &quot;Kahverengi&quot;);\r\n  myDog.features();\r\n  myDog.sit();\r\n  myDog.run();\r\n  System.out.println(myDog.talk());\r\n\r\n  System.out.println();\r\n\r\n  final BasicAnimals myCat = new Cat(&quot;Minnoş&quot;, 20, 3, &quot; Gri &quot;, &quot; Yeşil&quot;);\r\n  myCat.features();\r\n  myCat.sit();\r\n  myCat.run();\r\n  System.out.println(myCat.talk());\r\n\r\n  System.out.println();\r\n\r\n  final BasicAnimals dog = new Dog();\r\n  dog.features();\r\n  dog.sit();\r\n  dog.run();\r\n  System.out.println(dog.talk());\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\n Adı :Karabaş\r\n Boyu :45.0 cm\r\n Ağırlığı :25.0 kg\r\n Rengi :Beyaz\r\n G&ouml;z Rengi :Kahverengi\r\n Oturuyorum !\r\n Koşuyorum !\r\n Hav Hav!\r\n\r\n Adı :Minnoş\r\n Boyu :20.0 cm\r\n Ağırlığı :3.0 kg\r\n Rengi : Gri \r\n G&ouml;z Rengi : Yeşil\r\n Oturuyorum !\r\n Koşuyorum !\r\n Miyav Miyav\r\n\r\n Adı :İsimsiz bir hayvan\r\n Boyu :-1.0 cm\r\n Ağırlığı :-1.0 kg\r\n Rengi :Siyah\r\n G&ouml;z Rengi :Siyah\r\n Oturuyorum !\r\n Koşuyorum !\r\n Hav Hav!</pre>\r\n\r\n<p><strong>BasicAnimals interface&#39;i </strong>ile bir <strong>Hayvan </strong>&ouml;rneği &uuml;zerinden &ccedil;alışıyoruz.Temel hayvanların , temel &ouml;zellikleri asla değişmeyeceğinden bunların birka&ccedil;ını <strong>BasicAnimals&#39;da</strong>&nbsp;topluyoruz.Ardından oluşturduğumuz t&uuml;m hayvanlar bu &ouml;zellikleri zaten i&ccedil;ermek zorunda.<br />\r\n<strong>Animals </strong>sınıfında tanımladığımız değişkenlerin <strong>private </strong>olarak tanımlandığına dikkat edin.Bu değişkenlere sadece <strong>get </strong>ve <strong>set </strong>methodları ile erişilebilir.Buradaki kavram&nbsp;<strong>Object-Oriented Programming</strong>&#39;te <strong>Encapsulation (Kaps&uuml;lleme) </strong>olarak adlandırılır.<br />\r\n<br />\r\n<strong>BasicAnimals interface&#39;i </strong>sayesinde alt sınıflara implement edeceğimiz methodları oluşturduk.<strong>Animals </strong>sınıfına <strong>BasicAnimals </strong>interface&#39;ini implement ediyoruz.Oluşturduğumuz <strong>Animals </strong>soyut sınıfı ,<strong> BasicAnimals&#39;ın</strong> t&uuml;m &ouml;zelliklerini aynı şekilde uygulamak zorundadır.<strong>sit() , run() ve features()</strong> methodları t&uuml;m hayvanlar i&ccedil;in aynı şeyi ifade ettiğinden <strong>Animals </strong>sınıfı i&ccedil;erisinde methodlarımızı oluşturup oluşturduğumuz nesneler &uuml;zerinden bunlara erişebiliriz.Ancak her hayvanın konuşması kendine &ouml;zg&uuml; bir yapıya sahip olduğu i&ccedil;in diğer hayvanlardan bağımsız olmalıdır.Bu y&uuml;zden&nbsp;<strong>talk()</strong>&nbsp;methodunu soyut olarak tanımlıyoruz.Her sınıf kendi i&ccedil;erisinde&nbsp;<strong>talk()&nbsp;</strong>methodunu farklı bi&ccedil;imlerde işleyecektir.Animals sınıfından genişlettiğimiz&nbsp;<strong>Dog&nbsp;</strong>ve&nbsp;<strong>Cat&nbsp;</strong>sınıflarında g&ouml;r&uuml;ld&uuml;ğ&uuml; gibi t&uuml;m&nbsp;<strong>sit()</strong>&nbsp;,<strong>&nbsp;run()&nbsp;</strong>ve<strong>&nbsp;features()&nbsp;</strong>methodları aynı yere &ccedil;ağrı yaparken ,&nbsp;<strong>talk()</strong>&nbsp;methodu birbirinden bağımsız bir şekilde &ccedil;ağrılıyor.Bu kavram&nbsp;<strong>Object-Oriented Programming</strong>&#39;te <strong>Polimorfizm(&Ccedil;ok Bi&ccedil;imlilik)</strong> olarak adlandırılır.</p>\r\n\r\n<p>&nbsp;</p>\r\n','1431600763','Java,OOP,Java SE',''),(17,'Java - Interface (Arabirim) Genişletmek','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBir arabirim, extends anahtar s&ouml;zc&uuml;ğ&uuml; ile aynı sınıflardaki gibi kalıtım aldığı arabirimi genişletebilir.Kalıtım zinciri tamamlanan arabirimin tanımlanan t&uuml;m methodlarını uyguladığı sınıf sağlamak zorundadır. Bunu bir &ouml;rnek ile ele alalım.\r\n\r\n\r\ninterface A {\r\n void method1();\r\n\r\n void method2();\r\n}\r\n\r\ninterface B extends A {\r\n void method3();\r\n}\r\n\r\nclass TestInterfaceInheritance implements B {\r\n @Override\r\n public void method1() {\r\n  System.out... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bir arabirim, <strong>extends </strong>anahtar s&ouml;zc&uuml;ğ&uuml; ile aynı sınıflardaki gibi kalıtım aldığı arabirimi genişletebilir.Kalıtım zinciri tamamlanan arabirimin tanımlanan t&uuml;m methodlarını uyguladığı sınıf sağlamak zorundadır. Bunu bir &ouml;rnek ile ele alalım.</p>\r\n\r\n<pre>\r\ninterface A {\r\n void method1();\r\n\r\n void method2();\r\n}\r\n\r\ninterface B extends A {\r\n void method3();\r\n}\r\n\r\nclass TestInterfaceInheritance implements B {\r\n @Override\r\n public void method1() {\r\n  System.out.println(&quot;method1 &ccedil;ağrıldı!&quot;);\r\n }\r\n\r\n @Override\r\n public void method2() {\r\n  System.out.println(&quot;method2 &ccedil;ağrıldı!&quot;);\r\n }\r\n\r\n @Override\r\n public void method3() {\r\n  System.out.println(&quot;method3 &ccedil;ağrıldı!&quot;);\r\n }\r\n}\r\n\r\nclass MainClass {\r\n public static void main(String args[]) {\r\n  final TestInterfaceInheritance t = new TestInterfaceInheritance();\r\n  t.method1();\r\n  t.method2();\r\n  t.method3();\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı :\r\nmethod1 &ccedil;ağrıldı!\r\nmethod2 &ccedil;ağrıldı!\r\nmethod3 &ccedil;ağrıldı!</pre>\r\n\r\n<p>Burada <strong>B </strong>arabirimi , <strong>A </strong>arabiriminin b&uuml;t&uuml;n methodlarını i&ccedil;erir , <strong>method3()</strong>&#39;&uuml; ekler<strong>.B</strong> arabirimini uygulayan <strong>TestInterfaceInheritance </strong>sınıfı ise <strong>A ve B </strong>arabirimlerinin b&uuml;t&uuml;n methodlarını uygulamak zorundadır.</p>\r\n','1431773563','Java,OOP,Java SE',''),(18,'Java - Çok Kanallı Programlama (Multi-Threaded Programming) #1','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nMerhaba bu yazım &Ccedil;ok Kanallı Programlama konusunu i&ccedil;eriyor.Vermiş olduğum link&#39;te &ccedil;ok kanallı programlamanın temel işlemlerini , Runnable Interface&#39;ini ve Deprecated olmuş methodların ayrıntılı ve anlaşılır bir bi&ccedil;imde a&ccedil;ıklaması yer alıyor.\r\n\r\n\r\nclass CurrentThreadDemo {\r\n public static void main(final String args[]) {\r\n  final Thread thread = Thread.currentThread();\r\n  System.out.println(&quot;Varsayılan ismi :&quot; + thread);\r... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Merhaba bu yazım <a href=\"\\\">&Ccedil;ok Kanallı Programlama</a> konusunu i&ccedil;eriyor.Vermiş olduğum link&#39;te &ccedil;ok kanallı programlamanın temel işlemlerini , <strong>Runnable Interface&#39;ini </strong>ve <strong>Deprecated</strong> olmuş methodların ayrıntılı ve anlaşılır bir bi&ccedil;imde a&ccedil;ıklaması yer alıyor.</p>\r\n\r\n<pre>\r\nclass CurrentThreadDemo {\r\n public static void main(final String args[]) {\r\n  final Thread thread = Thread.currentThread();\r\n  System.out.println(&quot;Varsayılan ismi :&quot; + thread);\r\n  thread.setName(&quot;myThread&quot;);\r\n  System.out.println(&quot;Adı Değişti :&quot; + thread);\r\n\r\n  try {\r\n   for (int i = 5; i &gt; 0; i--) {\r\n    System.out.println(i);\r\n    Thread.sleep(1000);\r\n   }\r\n\r\n  } catch (final InterruptedException e) {\r\n   e.printStackTrace();\r\n  }\r\n\r\n }\r\n}</pre>\r\n\r\n<p>Programın &Ccedil;ıktısı :</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/18/1.gif\" style=\"height:200px; width:330px\" /></p>\r\n\r\n<p>Burada <strong>Thread </strong>sınıfından referans ettiğimiz <strong>thread </strong>&ouml;rnek değişkeni <strong>Thread </strong>sınıfının<strong> currentThread() </strong>methoduna g&ouml;ndermede bulunur.Oluşan &ccedil;ıktıların sıralaması ,&nbsp;</p>\r\n\r\n<p><em>1 -Ana Kanalın Adı &nbsp;, 2- &nbsp;&Ouml;nceliği , 3-Grubunun Adı. </em><strong>( Thread[main,5,main])</strong></p>\r\n\r\n<p>Programın &ccedil;ıktısından da anlaşıldığı gibi <strong>try </strong>bloğu i&ccedil;erisinde ki <strong>for </strong>d&ouml;ng&uuml;s&uuml;nde &ccedil;ağrılan i değişkeni 1000 milisaniye yani 1 saniye bekleyerek beşten geriye doğru ekrana yazdırıyor.Bu d&ouml;ng&uuml; tekrarındaki duraklama <strong>sleep() methodu</strong> tarafından sağlanır.<strong>sleep() </strong>methodu bir <strong>InterruptedException </strong>fırlatabilir.Bunu catch constructorunda yakalıyoruz.</p>\r\n\r\n<p><strong>setName()&nbsp;</strong>methodu varsayılan kanal adını değiştirmek i&ccedil;in kullanılır.</p>\r\n\r\n<p><strong>getName()</strong> methodu ise kanal adını elde etmek i&ccedil;in kullanılır.</p>\r\n\r\n<pre>\r\npackage com.blogger_project;\r\n\r\nclass CurrentThreadDemo {\r\n public static void main(final String args[]) {\r\n  final Thread thread = Thread.currentThread();\r\n  thread.setName(&quot;myThread&quot;);\r\n  System.out.println(thread.getName());\r\n\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nmyThread</pre>\r\n','1432205563','Java,thread,OOP,Java SE',''),(19,'Java - Çok Kanallı Programlama (Multi-Threaded Programming) #2','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\n&Ouml;nceki &ouml;rnek &uuml;zerinden devam ediyorum.Buradan ona ulaşabilirsiniz.\r\n\r\n\r\nclass NewThread implements Runnable {\r\n Thread thread;\r\n\r\n NewThread() {\r\n  thread = new Thread(this, &quot;Demo Thread&quot;);\r\n  System.out.println(&quot;&Ccedil;ocuk Thread&quot; + thread);\r\n  thread.start();\r\n }\r\n\r\n @Override\r\n public void run() {\r\n  try {\r\n   for (int i = 5; i &gt; 0; i--) {\r\n    System.out.println(&quot;&Ccedil;ocuk Thread &quot; + i);\r\n    Thread.sleep(500);\r\n   }\r\n  } catch (final... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>&Ouml;nceki &ouml;rnek &uuml;zerinden devam ediyorum.<a href=\"alicankustemur.github.io/#/post?id=18\" target=\"_blank\">Buradan ona ulaşabilirsiniz.</a></p>\r\n\r\n<pre>\r\nclass NewThread implements Runnable {\r\n Thread thread;\r\n\r\n NewThread() {\r\n  thread = new Thread(this, &quot;Demo Thread&quot;);\r\n  System.out.println(&quot;&Ccedil;ocuk Thread&quot; + thread);\r\n  thread.start();\r\n }\r\n\r\n @Override\r\n public void run() {\r\n  try {\r\n   for (int i = 5; i &gt; 0; i--) {\r\n    System.out.println(&quot;&Ccedil;ocuk Thread &quot; + i);\r\n    Thread.sleep(500);\r\n   }\r\n  } catch (final InterruptedException e) {\r\n   e.printStackTrace();\r\n  }\r\n  System.out.println(&quot;&Ccedil;ocuk Thread&#39;den &ccedil;ıkıldı.&quot;);\r\n }\r\n}\r\n\r\nclass ThreadDemo {\r\n public static void main(final String args[]) {\r\n  new NewThread();\r\n  try {\r\n   for (int i = 5; i &gt; 0; i--) {\r\n    System.out.println(&quot;Ana Thread &quot; + i);\r\n    Thread.sleep(1000);\r\n   }\r\n  } catch (final InterruptedException e) {\r\n   e.printStackTrace();\r\n   \r\n  }\r\n  System.out.println(&quot;Ana Thread&#39;den &ccedil;ıkıldı.&quot;);\r\n }\r\n}</pre>\r\n\r\n<p>Programın &Ccedil;ıktısı :&nbsp;</p>\r\n\r\n<p><a href=\"\\\"><img src=\"\\\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>run() </strong>methodunu oluşturabilmemiz i&ccedil;in Runnable arabirimini sınıfımıza implement ediyoruz.</p>\r\n\r\n<pre>\r\nthread = new Thread(this, &quot;Demo Thread&quot;); </pre>\r\n\r\n<p>Burada <strong>this </strong>arg&uuml;manı nesne thread nesnesi &uuml;zerindeki <strong>run()</strong> methoduna g&ouml;ndermede bulunur.<strong>start()</strong> methodu ise <strong>run() </strong>methodunu başlatır.Bu <strong>&Ccedil;ocuk Thread&#39;i</strong>n başlamasına neden olur.Ardından main methodundaki <strong>NewThread()</strong> <strong>constructoru </strong>&ccedil;alışmaya başlar ve <strong>main() </strong>methoduna geri d&ouml;ner.Burada her iki <strong>for </strong>d&ouml;ng&uuml;s&uuml; CPU&#39;yu paylaşarak &ccedil;alışmaya devam ederler.( Programı &ccedil;alıştırdığınızda elde edeceğiniz &ccedil;ıktı buradaki &ccedil;ıktı ile aynı <strong>olmayabilir</strong>, işlemci hızına ve g&ouml;rev y&uuml;k&uuml;ne g&ouml;re farklılıklar g&ouml;stericektir.) Genellikle &ccedil;alışmayı bitiren son kanal <strong>Ana Kanal</strong> olmak zorundadır<strong>.<em>JVM&#39;in bazı versiyonlarında ana kanal &ccedil;ocuk kanaldan &ouml;nce biterse , &nbsp;Java &ccedil;alışma zamanı sistemi askıya alınabilir.(suspended).Yukarıdaki program her zaman Ana Thread&#39;in &Ccedil;ocuk Thread&#39;den sonra bitmesini garantiler .&Ccedil;&uuml;nk&uuml; &Ccedil;ocuk Thread 500 milisaniye uyurken , Ana Thread 1000 milisaniye uyur ve bu yapı &Ccedil;ocuk Thread&#39;in Ana Threadden daha hızlı bir şekilde sonlanmasına neden olur.</em></strong></p>\r\n','1432205563','Java,thread,OOP,Java SE',''),(20,'Java - Çok Kanallı Programlama  (Multi-Threaded Programming)  #3 Thread Sınıfını Genişletmek','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\n&Ouml;nceki &ouml;rneklere aşağıdaki bağlantılardan ulaşabilirsiniz:\r\nJava - &Ccedil;ok Kanallı Programlama (Multi-Threaded Programming) &nbsp;#2\r\nJava - &Ccedil;ok Kanallı Programlama (Multi-Threaded Programming) &nbsp;#1\r\n\r\nBir &ouml;nceki &ouml;rneği daha iyi bir yoldan yapalım.\r\n\r\n\r\nclass NewThread extends Thread {\r\n NewThread() {\r\n  super(&quot;Demo Thread&quot;);\r\n  System.out.print(&quot;&Ccedil;ocuk Thread&quot;);\r\n  System.out.print(&quot;&Ccedil;ocuk Thread&quot; + this);... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>&Ouml;nceki &ouml;rneklere aşağıdaki bağlantılardan ulaşabilirsiniz:<br />\r\n<a href=\"https://alicankustemur.github.io/#/post?id=19\" target=\"_blank\">Java - &Ccedil;ok Kanallı Programlama (Multi-Threaded Programming) &nbsp;#2</a><br />\r\n<a href=\"https://alicankustemur.github.io/#/post?id=18\" target=\"_blank\">Java - &Ccedil;ok Kanallı Programlama (Multi-Threaded Programming) &nbsp;#1</a><br />\r\n<br />\r\nBir &ouml;nceki &ouml;rneği daha iyi bir yoldan yapalım.</p>\r\n\r\n<pre>\r\nclass NewThread extends Thread {\r\n NewThread() {\r\n  super(&quot;Demo Thread&quot;);\r\n  System.out.print(&quot;&Ccedil;ocuk Thread&quot;);\r\n  System.out.print(&quot;&Ccedil;ocuk Thread&quot; + this);\r\n  start();\r\n }\r\n\r\n @Override\r\n public void run() {\r\n  try {\r\n   for (int i = 5; i &gt; 0; i--) {\r\n    System.out.println(&quot;&Ccedil;ocuk Thread&quot; + i);\r\n    Thread.sleep(500);\r\n   }\r\n  } catch (final InterruptedException e) {\r\n   e.printStackTrace();\r\n  }\r\n  System.out.println(&quot;&Ccedil;ocuk Thread&#39;den &ccedil;ıkıldı.&quot;);\r\n }\r\n}\r\n\r\nclass ExtendThread {\r\n public static void main(final String args[]) {\r\n  new NewThread();\r\n  try {\r\n   for (int i = 5; i &gt; 0; i--) {\r\n    System.out.println(&quot;Ana Thread&quot; + i);\r\n    Thread.sleep(1000);\r\n   }\r\n  } catch (final InterruptedException e) {\r\n   e.printStackTrace();\r\n  }\r\n }\r\n}</pre>\r\n\r\n<p>Bir &ouml;nceki program ile bu programın yaptığı iş aynıdır.Yeni bir kanal oluşturmanın bir diğer yolu ise Thread sınıfını genişleten bir sınıf oluşturup ve bu sınıfın bir &ouml;rneğini oluşturmak.</p>\r\n\r\n<pre>\r\nsuper(&quot;Demo Thread&quot;);</pre>\r\n\r\n<p><strong>NewThread&#39;in i&ccedil;indeki super()&#39;e yapılan &ccedil;ağrı Thread yapılandırıcısının aşağıdaki formunu &ccedil;ağırır.</strong></p>\r\n\r\n<pre>\r\npublic Thread(String threadName);</pre>\r\n\r\n<p>Buradaki threadName kanalın adını belirler.</p>\r\n','1432205563','Java,thread,OOP,Java SE',''),(21,'Java - Set ve Get Methodları','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu yazımdaki &ouml;rnekleri this anahtar s&ouml;zc&uuml;ğ&uuml;&nbsp;&uuml;zerinden devam etmek istiyorum.\r\n&Ouml;nceki programlarda oluşturduğumuz yapılar kullanışlı olsada tam olarak yeterli değildir.Hi&ccedil;bir değişkene direk erişim m&uuml;mk&uuml;n olmamalıdır.Nesneye Y&ouml;nelimli Programlama&#39;nın en &ouml;nemli &ouml;zelliklerinden olan Encapsulation ( Kaps&uuml;lleme ) kavramını tam olarak uygulamamız i&ccedil;in değişkenlerimizin Set ve Get methodlarını o... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu yazımdaki &ouml;rnekleri <a href=\"https://alicankustemur.github.io/#/post?id=8\" target=\"_blank\">this anahtar s&ouml;zc&uuml;ğ&uuml;</a>&nbsp;&uuml;zerinden devam etmek istiyorum.<br />\r\n&Ouml;nceki programlarda oluşturduğumuz yapılar kullanışlı olsada tam olarak yeterli değildir.Hi&ccedil;bir değişkene direk erişim m&uuml;mk&uuml;n olmamalıdır.<strong>Nesneye Y&ouml;nelimli Programlama&#39;nın</strong> en &ouml;nemli &ouml;zelliklerinden olan <strong>Encapsulation ( Kaps&uuml;lleme ) </strong>kavramını tam olarak uygulamamız i&ccedil;in değişkenlerimizin Set ve Get methodlarını oluşturmalıyız.<br />\r\n&Ouml;rnek &uuml;zerinden devam edelim.</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n double width;\r\n double height;\r\n double depth;\r\n\r\n Rectangle(double width, double height, double depth) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.depth = depth;\r\n }\r\n}</pre>\r\n\r\n<p>Buradaki değişkenler default değer olarak sadece kendi paketleri i&ccedil;erisinde &ccedil;ağrılabilirler , fakat direkt olarak &ccedil;ağrılıp &uuml;zerinde işlem yapılabilir durumdadırlar.Bu kullanım olduk&ccedil;a tehlikeli ve yanlıştır.Aşağıdaki programı inceleyelim:</p>\r\n\r\n<pre>\r\nclass Rectangle {\r\n private double width;\r\n private double height;\r\n private double depth;\r\n\r\n Rectangle(final double width, final double height, final double depth) {\r\n  setWidth(width);\r\n  setHeight(height);\r\n  setDepth(depth);\r\n }\r\n\r\n Rectangle() {\r\n  setWidth(-1);\r\n  setHeight(-1);\r\n  setDepth(-1);\r\n }\r\n\r\n double volume() {\r\n  return width * height * depth;\r\n }\r\n\r\n public double getWidth() {\r\n  return width;\r\n }\r\n\r\n public void setWidth(final double width) {\r\n  this.width = width;\r\n }\r\n\r\n public double getHeight() {\r\n  return height;\r\n }\r\n\r\n public void setHeight(final double height) {\r\n  this.height = height;\r\n }\r\n\r\n public double getDepth() {\r\n  return depth;\r\n }\r\n\r\n public void setDepth(final double depth) {\r\n  this.depth = depth;\r\n }\r\n}\r\n\r\nclass RectangleDemo {\r\n public static void main(final String args[]) {\r\n  final Rectangle myRectangle = new Rectangle(5, 12, 6);\r\n  System.out.println(&quot;Genişlik :&quot; + myRectangle.getWidth());\r\n  System.out.println(&quot;Y&uuml;kseklik :&quot; + myRectangle.getHeight());\r\n  System.out.println(&quot;Derinlik :&quot; + myRectangle.getDepth());\r\n  System.out.println(&quot;Hacim : &quot; + myRectangle.volume());\r\n\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nGenişlik :5.0\r\nY&uuml;kseklik :12.0\r\nDerinlik :6.0\r\nHacim : 360.0</pre>\r\n\r\n<p>Bir &ouml;nceki kullanımda</p>\r\n\r\n<pre>\r\nthis.width = width; this.height = height; this.depth = depth;</pre>\r\n\r\n<p>olarak constructor&#39;e uygulayarak değerlerimizi atamıştık.Fakat burada <strong>set&lt; Değişken Adı&gt; </strong>isimli methodlarımızda yaptığımız işlemler aslında &uuml;stteki &uuml;&ccedil; işlem ile aynı işi yapar. (<strong> set &lt; Değişken Adı&gt; </strong>ve <strong>get &lt; Değişken Adı&gt;</strong> kullanımı programcılıkta bir standart haline geldiği i&ccedil;in bu &ouml;rnekte bu şekilde kullanılmaktadır.<strong>Eclipse -&gt; Sağ Tık -&gt; Source&nbsp;-&gt; Generate Setters and Getters</strong> işlemini uygulayarak <strong>Set </strong>ve <strong>Get </strong>methodlarını otomatik oluşturabilirsiniz.<strong>Eclipse </strong>standart kullanımı yapmakla beraber method isimlerini değiştirmenize olanak sağlar. )Ayrıca değişkenleri gizler ve dışardan herhangi bir değişime izin vermezler.Burada değişken değerini değiştirmek i&ccedil;in sadece değişkenin <strong>set </strong>methodu kullanılabilir.Bu yapıyı kullanarak artık değişkenlere direkt bir şekilde erişilemez.Sadece <strong>get&lt; Değişken Adı&gt; </strong>methodu kullanılarak erişilebilir.</p>\r\n','1432291963','Java,OOP,Java SE',''),(22,'Java - Enums ( Numaralandırmalar )','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu &ouml;zellik Java&#39;ya 1.5 s&uuml;r&uuml;m&uuml;yle beraber eklenmiştir.\r\nEnum adlandırılmış sabitlerden oluşan bir listedir.&Ouml;rneğin g&uuml;nler gibi.\r\nJava&#39;da numaralandırmalar bir sınıf tipini tanımlarlar.\r\nBir &ouml;rnek ile ele alalım.\r\n\r\n\r\n/**\r\n * @Author    : Ali Can Kuştemur\r\n * @Date      : 22 May 2015\r\n * @File_Name : EnumDemo.java\r\n * @Blog      : http://alicankustemur.github.io\r\n */\r\npublic class EnumDemo {\r\n\r\n public enum Day {\r\n  PAZARTESI, SALI, CARSA... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu &ouml;zellik Java&#39;ya 1.5 s&uuml;r&uuml;m&uuml;yle beraber eklenmiştir.<br />\r\nEnum adlandırılmış sabitlerden oluşan bir listedir.&Ouml;rneğin g&uuml;nler gibi.<br />\r\nJava&#39;da numaralandırmalar bir sınıf tipini tanımlarlar.<br />\r\nBir &ouml;rnek ile ele alalım.</p>\r\n\r\n<pre>\r\n/**\r\n * @Author    : Ali Can Kuştemur\r\n * @Date      : 22 May 2015\r\n * @File_Name : EnumDemo.java\r\n * @Blog      : <a href=\"http://alicankustemur.github.io/\">http://alicankustemur.github.io</a>\r\n */\r\npublic class EnumDemo {\r\n\r\n public enum Day {\r\n  PAZARTESI, SALI, CARSAMBA, PERSEMBE, CUMA, CUMARTESİ, PAZAR\r\n }\r\n\r\n public static void main(final String[] args) {\r\n  Day theDay = Day.PAZARTESI;\r\n  printToday(theDay);\r\n\r\n  theDay = Day.PERSEMBE;\r\n  printToday(theDay);\r\n\r\n  theDay = Day.valueOf(&quot;PERSEMBE&quot;);\r\n  printToday(theDay);\r\n\r\n  System.out.println();\r\n\r\n  for (final Day allDay : Day.values()) {\r\n   System.out.println(allDay);\r\n  }\r\n\r\n }\r\n\r\n public static void printToday(final Day day) {\r\n  if (day == Day.PAZARTESI) {\r\n   System.out.println(&quot;Pazartesi g&uuml;n&uuml;ne bir \\&quot;Merhaba\\&quot; de bakalım. &quot;);\r\n  } else {\r\n   System.out.println(&quot;Bug&uuml;n şanslı g&uuml;n&uuml;ndesin.&quot;);\r\n  }\r\n }\r\n\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nPazartesi g&uuml;n&uuml;ne bir &quot;Merhaba&quot; de bakalım. \r\nBug&uuml;n şanslı g&uuml;n&uuml;ndesin.\r\nBug&uuml;n şanslı g&uuml;n&uuml;ndesin.\r\n\r\nPAZARTESI\r\nSALI\r\nCARSAMBA\r\nPERSEMBE\r\nCUMA\r\nCUMARTESİ\r\nPAZAR</pre>\r\n\r\n<p>Burada <strong>PAZARTESI,SALI </strong>ve diğer tanımlayıcılar , numaralandırma sabitleri olarak adlandırılırlar.Her biri kapalı olarak <strong>Day&#39;in public,static </strong>ve <strong>final </strong>birer &uuml;yesi olarak deklare edilmiştir.Bu sabitlerin tipleri deklare edildikleri tiplerdir yani burada Day tipinde.<strong>Enum&#39;lar bir sınıf tipi olmalarına rağmen new anahtar s&ouml;zc&uuml;ğ&uuml; ile bir enum &ouml;rneği oluşturulamaz</strong>;ama bir numaralandırma değişkenini ilkel değişken tiplerinde olduğu gibi aynı şekilde deklare edebilirsiniz. &Ouml;rneğimizde <strong>theDay </strong>adında bir <strong>Day </strong>&ouml;rneği oluşturduk ve bu &ouml;rneğe <strong>PAZARTESI </strong>sabitini atadık.)enumlar if veya switch yapılarında kullanılabilirler.)Ardından <strong>printToday()</strong> methoduna arg&uuml;man olarak ge&ccedil;tiğimiz <strong>theDay </strong>değişkeni ile d&ouml;nen değere g&ouml;re yazdırma işlemlerimizi yapıyoruz. <strong>valueOf() </strong>methoduna aktarılan karakter katarına karşılık gelen sabiti d&ouml;nd&uuml;r&uuml;r. &quot;Bug&uuml;n şanslı g&uuml;n&uuml;ndesin.&quot; &ccedil;ıktısının iki adet olduğuna dikkat edin.Bunun sebebi <strong>valueOf()</strong> methoduna arg&uuml;man olarak yazdığımız &quot;<strong>PERSEMBE</strong>&quot; karakter katarının <strong>printToday()</strong> methodunda else bloğuna d&uuml;şmesidir.<strong> values() </strong>methodu &ccedil;ağrıldı <strong>enum </strong>tipinde bir diziyi d&ouml;nd&uuml;r&uuml;r.Burada for-each i&ccedil;erisindeki <strong>allDay</strong> değişkenine <strong>Day </strong>enum&#39;unun sabitleri birer birer aktarılır ve ekrana yazdırılır.<br />\r\n<br />\r\n<strong>Java Numaralandırmaları Sınıf Tipleridir</strong><br />\r\nenum&#39;larda new kullanarak bir enum &ouml;rneği oluşturamasakta , bunun dışında diğer sınıflar ile aynı yeteneklere sahiptirler.&Ouml;rneğin numaralandırmalara yapılandırıcı verebilir ,&ouml;rnek değişken ve methodlar ekleyebilir hatta arabirimler uygulayabilirsiniz.<br />\r\nBir &ouml;rnekle inceleyelim.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\n/**\r\n * @Author : Ali Can Kuştemur\r\n * @Date : 22 May 2015\r\n * @File_Name : EnumDemo.java\r\n * @Blog : <a href=\"http://alicankustemur.github.io/\">http://alicankustemur.github.io</a>\r\n */\r\npublic class EnumDemo {\r\n enum Fruit {\r\n  Apple(5), Banana(7), Orange(2), Peach(4), Melon(6), WaterMelon;\r\n  private int price;\r\n\r\n  Fruit() {\r\n   price = -1;\r\n  }\r\n\r\n  Fruit(final int price) {\r\n   setPrice(price);\r\n  }\r\n\r\n  void setPrice(final int price) {\r\n   this.price = price;\r\n  }\r\n\r\n  int getPrice() {\r\n   return price;\r\n  }\r\n\r\n }\r\n\r\n public static void main(final String args[]) {\r\n  Fruit myFruit = Fruit.Orange;\r\n  System.out.println(myFruit + &quot; : &quot; + myFruit.getPrice() + &quot; $&quot;);\r\n\r\n  myFruit = Fruit.Peach;\r\n  System.out.println(myFruit + &quot; : &quot; + myFruit.getPrice() + &quot; $&quot;);\r\n\r\n  System.out.println(&quot;Fruit/Melon :&quot; + Fruit.Melon.getPrice() + &quot; $&quot;);\r\n\r\n  System.out.println();\r\n\r\n  System.out.println(&quot;Fruit Numaralandırma Sabitleri Listesi &quot;);\r\n  for (final Fruit fruit : Fruit.values()) {\r\n   System.out.println(fruit + &quot; : &quot; + fruit.getPrice() + &quot; $&quot;);\r\n  }\r\n\r\n }\r\n}\r\nOrange : 2 $\r\nPeach : 4 $\r\nFruit/Melon :6 $\r\n\r\nFruit Numaralandırma Sabitleri Listesi \r\nApple : 5 $\r\nBanana : 7 $\r\nOrange : 2 $\r\nPeach : 4 $\r\nMelon : 6 $\r\nWaterMelon : -1 $</pre>\r\n\r\n<p><strong>Constructor </strong>değerlerini sabitlere tanımladıktan sonra <strong>getPrice()</strong> methodu ile <strong>Fruit </strong>numaralandırıcı sabitlerinin price değerlerine ulaşıp yazdırdık.Bir <strong>enum </strong>&ouml;rnek değişkeni oluşturup new ifadesi kullanmadığımıza dikkat edelim. <strong>Constructor&#39;u </strong>boş ge&ccedil;ilen <strong>WaterMelon </strong>sabiti ise yine sınıflarda olduğu gibi aşırı y&uuml;klenebilir.<strong>Constructor </strong>arg&uuml;manı boş ge&ccedil;ilen sabit&#39;in -1 değer aldığını g&ouml;r&uuml;yoruz.Buradaki &ouml;nemli par&ccedil;alar :</p>\r\n\r\n<pre>\r\nFruit myFruit = Fruit.Orange;\r\nmyFruit.getPrice(); \r\nFruit.Melon.getPrice();</pre>\r\n\r\n<p>Burada getPrice() methodunun 2 farklı &ccedil;ağrılma şeklini g&ouml;rd&uuml;k. <strong>Numaralandırlar ile ilgili &ouml;nemli kısıtlamalar:</strong> <em>1 - Bir numaralandırma bir başka sınıfı kalıtımla devralamaz. 2 - Bir <strong>enum </strong>bir &uuml;st sınıf olamaz. ( <strong>enum&#39;lar </strong>genişletilemezler.) 3 - Her bir numaralandırma sabiti tanımlandığı sınıfın tipinde bir nesne olmalıdır. </em></p>\r\n\r\n<pre>\r\n/**\r\n * @Author : Ali Can Kuştemur\r\n * @Date : 23 May 2015\r\n * @File_Name : EnumDemo2.java\r\n * @Blog : <a href=\"http://alicankustemur.github.io/\">http://alicankustemur.github.io</a>\r\n */\r\npublic class EnumDemo2 {\r\n enum Fruit {\r\n  Apple, Banana, Orange, Peach, Melon, WaterMelon;\r\n }\r\n\r\n public static void main(final String args[]) {\r\n\r\n  final Fruit fr1, fr2, fr3;\r\n\r\n  for (final Fruit fruit : Fruit.values()) {\r\n   System.out.println(fruit + &quot; : &quot; + fruit.ordinal());\r\n  }\r\n\r\n  System.out.println();\r\n\r\n  fr1 = Fruit.Apple;\r\n  fr2 = Fruit.Banana;\r\n  fr3 = Fruit.Apple;\r\n\r\n  if (fr1.compareTo(fr2) &lt; 0) {\r\n   System.out.println(fr1 + &quot; &quot; + fr2 + &quot;&#39;dan &ouml;nce gelir.&quot;);\r\n  }\r\n\r\n  if (fr1.compareTo(fr2) &gt; 0) {\r\n   System.out.println(fr2 + &quot; &quot; + fr1 + &quot;&#39;dan &ouml;nce gelir.&quot;);\r\n  }\r\n\r\n  if (fr1.compareTo(fr3) == 0) {\r\n   System.out.println(fr1 + &quot; eşittir &quot; + fr3 + &quot;&#39;a&quot;);\r\n  }\r\n\r\n  if (fr1.equals(fr3)) {\r\n   System.out.println(fr1 + &quot; eşittir &quot; + fr3 + &quot;&#39;a&quot;);\r\n  }\r\n\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nApple : 0\r\nBanana : 1\r\nOrange : 2\r\nPeach : 3\r\nMelon : 4\r\nWaterMelon : 5\r\n\r\nApple Banana&#39;dan &ouml;nce gelir.\r\nApple eşittir Apple&#39;a\r\nApple eşittir Apple&#39;a</pre>\r\n\r\n<p>T&uuml;m numaralandırmalar <strong>java.lang.Enum</strong> sınıfını devralır.Bu sınıfın bazı methodları vardır.Bu &ouml;rnekte <strong>for-each</strong> d&ouml;ng&uuml;s&uuml; i&ccedil;erisinde kullanmış olduğum<strong> ordinal() </strong>methodu ilgili enum sabitinin konumunu <strong>integer</strong> olarak d&ouml;nderir.( Dizideki indis(index) mantığı ile aynı) <strong>compareTo()</strong> methodu ise &ccedil;ağrıldığı sabit ile parametresine aldığı sabit&#39;in konumlarını karşılaştırır.Eğer &ccedil;ağıran sabitin ordinal değeri &ccedil;ağrılandan k&uuml;&ccedil;&uuml;k ise negatif bir değer d&ouml;nd&uuml;r&uuml;r.B&uuml;y&uuml;k ise pozitif değer d&ouml;nd&uuml;r&uuml;r.Eğer sıfır değerini d&ouml;nd&uuml;r&uuml;rse 2 sabitin konumu eşit demektir.Buradaki <strong>equals() </strong>methodu ise &ccedil;ağıran ve &ccedil;ağrılan sabitlerin her ikiside aynı numaralandırmadan gelen aynı sabite karşılık geliyorsa <strong>true</strong> d&ouml;nd&uuml;r&uuml;r.</p>\r\n','1432378363','Java,OOP,Java SE',''),(23,'Java - Dosya Okuma ve Dosya Yazma','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nMerhaba bu yazımda Java&#39;da Dosya İşlemleri ile ilgili en &ccedil;ok kullanılan 2 yapıyı anlatacağım.\r\n&nbsp;\r\n\r\n\r\nFileInputStream(String fileName) throws FileNotFoundException\r\nFileOutputStream(String fileName) throws FileNotFoundException\r\n\r\nBuradaki fileName a&ccedil;mak istediğiniz dosyanın ismini belirtir.Eğer dosya bulunamaz ise&nbsp;IOException sınıfının bir alt sınıfı olan&nbsp;FileNotFoundException&#39;ı&nbsp;fırlatır.\r\n\r\nYapılan dosya işlemleri tamamlandı... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Merhaba bu yazımda Java&#39;da Dosya İşlemleri ile ilgili en &ccedil;ok kullanılan 2 yapıyı anlatacağım.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nFileInputStream(String fileName) throws FileNotFoundException\r\nFileOutputStream(String fileName) throws FileNotFoundException</pre>\r\n\r\n<p>Buradaki <strong>fileName </strong>a&ccedil;mak istediğiniz dosyanın ismini belirtir.Eğer dosya bulunamaz ise&nbsp;<strong>IOException </strong>sınıfının bir alt sınıfı olan&nbsp;<strong>FileNotFoundException&#39;ı&nbsp;</strong>fırlatır.<br />\r\n<br />\r\nYapılan dosya işlemleri tamamlandığında&nbsp;<strong>close()</strong> methodu ile kapatılmalıdır.Aksi takdirde sistem kaynakları&nbsp;serbest kalır ve burada bir g&uuml;venlik a&ccedil;ığı meydana gelmiş olur.<br />\r\n<br />\r\n<strong><em>1 - Dosya Okuma</em></strong><br />\r\n<br />\r\n&Ouml;rnek &uuml;zerinden anlatayım :<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass FileRead {\r\n public static void main(final String args[]) {\r\n  int i;\r\n  String str = &quot;&quot;;\r\n  FileInputStream input = null;\r\n\r\n  try {\r\n   input = new FileInputStream(&quot;C:\\\\first.txt&quot;);\r\n\r\n   do {\r\n    i = input.read();\r\n    if (i != -1) {\r\n     str += (char) i;\r\n    }\r\n   } while (i != -1);\r\n  } catch (final IOException e) {\r\n   e.printStackTrace();\r\n  }\r\n\r\n  try {\r\n   input.close();\r\n  } catch (final IOException e) {\r\n   e.printStackTrace();\r\n  }\r\n\r\n  System.out.println(str);\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nHello World !\r\n</pre>\r\n\r\n<p>Yukarıda ki programda <strong>input </strong>değişkeni<strong> FileInputStream </strong>sınıfını referans etmektedir.<strong>try </strong>bloğunun i&ccedil;erisinde nesnemizi oluşturuyoruz ve bir parametreli Constructor&#39;un aldığı arg&uuml;man değeri dosyanın ismidir.(Dosya ismi i&ccedil;erisindeki arg&uuml;manın iki adet &quot;\\\\&quot; ifadesi almasının sebebi derleyicinin &quot;\\\\&quot; karakterinden sonraki karakteri dikkate almadan derleme işlemine devam etmesini sağladık.Yani <strong>&quot;C:\\\\\\\\first.txt&quot; </strong>bu değerin &ccedil;ıktısı <strong>&quot;C:\\\\first.txt&quot;</strong> bu olucaktır.Onu başka bir yazımda anlatacağım.<strong>[Escape Characters]) . do-while</strong> i&ccedil;erisinde ki <strong>i</strong> değişkenine atadığımız <strong>input </strong>değişkeni <strong>FileInputStream</strong> sınıfının <strong>read()</strong> methodunu &ccedil;ağırır ve bu method bir tamsayı değer d&ouml;nd&uuml;r&uuml;r.Eğer dosya okuma işleminin sonuna yaklaşırsa d&ouml;nd&uuml;rd&uuml;r&uuml;ğ&uuml; değer <strong>-1</strong> olur.<strong>i</strong> değişkenini <strong>char </strong>tipinde <strong>cast </strong>ettikten sonra <strong>str&#39;ye </strong>ekliyoruz.Ben &ouml;rnek olarak <strong>first.txt </strong>i&ccedil;erisine <strong>&quot;Hello World !&quot; </strong>yazıp kaydettim.Okuma işlemini yaptıktan sonra yukarıda belirttiğim gibi dosyayı kapatmamız gerekiyor.Bunuda bir <strong>try-catch </strong>bloğunda <strong>close() </strong>methodunu &ccedil;ağırarak yapıyoruz.Yapılan bu işlemlerin hepsi birer <strong>IOException </strong>fırlatabilir.<br />\r\n<br />\r\n&nbsp;<strong><em>2 - Dosya Yazma </em></strong><br />\r\n<br />\r\nBuradaki program<strong> &quot; first.txt &quot;</strong> i&ccedil;erisindeki verileri <strong>&quot; second.txt &quot;</strong> &#39;ye aktarır.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass FileRead {\r\n public static void main(final String args[]) {\r\n  int i;\r\n  FileInputStream input = null;\r\n  FileOutputStream output = null;\r\n\r\n  try {\r\n   input = new FileInputStream(&quot;C:\\\\first.txt&quot;);\r\n   output = new FileOutputStream(&quot;C:\\\\second.txt&quot;);\r\n\r\n   do {\r\n    i = input.read();\r\n    if (i != -1) {\r\n     output.write(i);\r\n    }\r\n   } while (i != -1);\r\n  } catch (final IOException e) {\r\n   e.printStackTrace();\r\n  } finally {\r\n   try {\r\n    if (input != null) {\r\n     input.close();\r\n    }\r\n\r\n   } catch (final IOException e) {\r\n    e.printStackTrace();\r\n   }\r\n   try {\r\n    if (output != null) {\r\n     output.close();\r\n    }\r\n   } catch (final IOException e2) {\r\n    e2.printStackTrace();\r\n   }\r\n  }\r\n\r\n }\r\n}</pre>\r\n\r\n<p>Burada <strong>&quot;Dosya Okuma&quot; </strong>işlemlerinde yapmış olduğumuz <strong>str </strong>&nbsp;değişkenine eklediğimiz değerleri output nesnesine <strong>FileOutputStream</strong> sınıfının <strong>write()</strong> methodunu kullanarak aktarıyoruz.Bir &ouml;nceki işlemlerden farklı olarak <strong>try-catch</strong> bloğunda bir <strong>finally </strong>bloğu yer alıyor.Burası programımıza bir esneklik sağlıyor.<strong>finally</strong> bloğu her zaman <strong>try-catch </strong>bloklarından sonra kesinlikle &ccedil;alıştırılır.Dosya kapatma işlemlerini burdan y&ouml;netmek hem daha &ouml;nceden oluşan sorunlardan &ouml;t&uuml;r&uuml; kapanmayan dosyaları kapatır hemde kodu kısaltır.</p>\r\n','1432378363','Java,OOP,Java SE',''),(24,'Java - Dosya Okuma ve Dosya Yazma #2','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\nBir &ouml;nceki yazıma buradan ulaşabilirsiniz.\r\n\r\nBu yazımda daha gelişmiş JDK 7 s&uuml;r&uuml;m&uuml; ile gelen bir &ouml;zellik&nbsp;try-with resources ile birlikte Dosya Okuma ve Dosya Yazma işlemlerini g&ouml;stereceğim.\r\n\r\nJDK 7&#39;den &ouml;nce dosya kapatma işlemi halen ge&ccedil;erli ve faydalı olmasına rağmen , yeni &ouml;zellik ile kapatma işlemini otomatik hale getirerek daha kullanışlı bir yapı oluşturur.\r\n\r\nArtık bu yeni &ouml;zellik ile close() methodunu &cced... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /><br />\r\n<a href=\"https://alicankustemur.github.io/#/post?id=23\" target=\"_blank\">Bir &ouml;nceki yazıma buradan ulaşabilirsiniz.</a><br />\r\n<br />\r\nBu yazımda daha gelişmiş <strong>JDK 7 </strong>s&uuml;r&uuml;m&uuml; ile gelen bir &ouml;zellik&nbsp;<strong>try-with resources </strong>ile birlikte <strong>Dosya Okuma ve Dosya Yazma</strong> işlemlerini g&ouml;stereceğim.<br />\r\n<br />\r\n<strong>JDK 7</strong>&#39;den &ouml;nce dosya kapatma işlemi halen ge&ccedil;erli ve faydalı olmasına rağmen , yeni &ouml;zellik ile kapatma işlemini otomatik hale getirerek daha kullanışlı bir yapı oluşturur.<br />\r\n<br />\r\nArtık bu yeni &ouml;zellik ile <strong>close() </strong>methodunu &ccedil;ağırmamıza gerek yoktur.Bir başka deyişle dosyayı kapatmayı unutmamıza imkan yoktur.<br />\r\nHemen &ouml;rnek &uuml;zerinde bunu g&ouml;relim.</p>\r\n\r\n<pre>\r\nclass FileRead {\r\n public static void main(final String args[]) {\r\n  int i;\r\n\r\n  try (FileInputStream input = new FileInputStream(&quot;C:\\\\first.txt&quot;);\r\n    FileOutputStream output = new FileOutputStream(&quot;C:\\\\second.txt&quot;)) {\r\n\r\n   do {\r\n    i = input.read();\r\n    if (i != -1) {\r\n     output.write(i);\r\n    }\r\n\r\n   } while (i != -1);\r\n  } catch (final IOException e) {\r\n   e.printStackTrace();\r\n  }\r\n }\r\n}</pre>\r\n\r\n<p>Bu program ile <strong>&quot; Dosya Yazma &quot; </strong>b&ouml;l&uuml;m&uuml;ndeki program aynı işlemi yapar.Daha kısa ve sade bir kullanıma sahiptir.Ayrıca daha kullanışlıdır.</p>\r\n\r\n<pre>\r\ntry (FileInputStream input = new FileInputStream(&quot;C:\\\\first.txt&quot;);\r\n    FileOutputStream output = new FileOutputStream(&quot;C:\\\\second.txt&quot;)) {</pre>\r\n\r\n<p>Buradaki kullanıma dikkat edelim.<strong>try </strong>bloğu sonlandığında otomatik olarak <strong>input </strong>ve <strong>output </strong>dosya işlemleri kapatılacaktır.</p>\r\n','1432378363','Java,OOP,Java SE',''),(25,'Java  - instanceof Anahtar Sözcüğü','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu yazımda instanceof anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml;n ne işe yaradığını ve kullanımını anlatacağım.\r\nJava&#39;da ge&ccedil;ersiz tip d&ouml;n&uuml;ş&uuml;m&uuml; bir &ccedil;alışma hatasına neden olur.Ge&ccedil;ersiz tip d&ouml;n&uuml;ş&uuml;mlerinin &ccedil;oğu &ccedil;alışma zamanında yakalanabilir.Ancak sınıf hiyerarşisindeki tip d&ouml;n&uuml;ş&uuml;mleri ancak &ccedil;alışma zamanında algılabilen ge&ccedil;ersiz tip d&ouml;n&uuml;ş&uuml;mleri &uuml;r... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" /></p>\r\n\r\n<p>Bu yazımda instanceof anahtar s&ouml;zc&uuml;ğ&uuml;n&uuml;n ne işe yaradığını ve kullanımını anlatacağım.<br />\r\nJava&#39;da ge&ccedil;ersiz tip d&ouml;n&uuml;ş&uuml;m&uuml; bir &ccedil;alışma hatasına neden olur.Ge&ccedil;ersiz tip d&ouml;n&uuml;ş&uuml;mlerinin &ccedil;oğu &ccedil;alışma zamanında yakalanabilir.Ancak sınıf hiyerarşisindeki tip d&ouml;n&uuml;ş&uuml;mleri ancak &ccedil;alışma zamanında algılabilen ge&ccedil;ersiz tip d&ouml;n&uuml;ş&uuml;mleri &uuml;retebilirler.Bu bir &ccedil;alışma zamanı hatası fırlatır.Java bu durumlara &ccedil;&ouml;z&uuml;m bulabilmek i&ccedil;in <strong>instanceof </strong>adında bir &ccedil;alışma zamanı operatoru tanımlar.<br />\r\n&nbsp;Kullanım şekli aşağıda olduğu gibidir.</p>\r\n\r\n<pre>\r\n<code>&lt; &Ouml;rnek Referans &gt;&nbsp;</code><code>instanceof</code> <code>&lt; Sınıf Tipi&gt;</code>\r\n</pre>\r\n\r\n<p><strong>&quot;&Ouml;rnek Referans&quot; </strong> belirtilen sınıf tipinde ise veya belirtilen tipe d&ouml;n&uuml;şt&uuml;rebiliyorsa <strong>true</strong> değerini d&ouml;nd&uuml;r&uuml;r. Bir &ouml;rnek ile inceleyelim.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n/**\r\n * @Author : Ali Can Kuştemur\r\n * * @Date : 24 May 2015\r\n * * @File_Name : InstanceOf.java\r\n * * @Blog : http://alicankustemur.github.io\r\n */\r\nclass Ford {\r\n    int weight, model;\r\n}\r\n\r\nclass Volkswagen {\r\n    int weight, model;\r\n}\r\n\r\nclass GT extends Ford {\r\n    int speed;\r\n}\r\n\r\nclass Mustang extends Ford {\r\n    int speed;\r\n}\r\n\r\nclass InstanceOf {\r\n    public static void main(final String args[]) {\r\n        final Ford car = new Ford();\r\n        final Volkswagen car1 = new Volkswagen();\r\n        final GT car2 = new GT();\r\n        final Mustang car3 = new Mustang();\r\n        if (car instanceof Ford) {\r\n            System.out.println(&quot;car &ouml;rnek referansı ,&quot; + &quot; Ford sınıf tipinin bir &ouml;rneğidir.&quot;);\r\n        }\r\n        if (car1 instanceof Volkswagen) {\r\n            System.out.println(&quot;car1 &ouml;rnek referansı ,&quot; + &quot; Volkswagen sınıf tipinin bir &ouml;rneğidir.&quot;);\r\n        }\r\n        if (car2 instanceof GT) {\r\n            System.out.println(&quot;car2 &ouml;rnek referansı ,&quot; + &quot; GT sınıf tipinin bir &ouml;rneğidir.&quot;);\r\n        }\r\n        if (car3 instanceof Mustang) {\r\n            System.out.println(&quot;car3 &ouml;rnek referansı ,&quot; + &quot; Mustang sınıf tipinin bir &ouml;rneğidir.&quot;);\r\n        }\r\n        if (car instanceof GT) {\r\n            System.out.println(&quot;car &ouml;rnek referansı ,&quot; + &quot; GT sınıf tipine d&ouml;n&uuml;şt&uuml;r&uuml;lebilir.&quot;);\r\n        }\r\n        System.out.println();\r\n        Ford newCar;\r\n        newCar = car3;\r\n        if (newCar instanceof Mustang) {\r\n            System.out.println(&quot;newCar &ouml;rnek referansı ,&quot; + &quot; Mustang sınıf tipinin bir &ouml;rneğidir.&quot;);\r\n        }\r\n        newCar = car2;\r\n        if (newCar instanceof GT) {\r\n            System.out.println(&quot;newCar &ouml;rnek referansı ,&quot; + &quot; GT sınıf tipinin bir &ouml;rneğidir.&quot;);\r\n        }\r\n        if (newCar instanceof Mustang) {\r\n            System.out.println(&quot;newCar &ouml;rnek referansı ,&quot; + &quot; Mustang sınıf tipine d&ouml;n&uuml;şt&uuml;r&uuml;lebilir.&quot;);\r\n        } else {\r\n            System.out.println(&quot;newCar &ouml;rnek referansı ,&quot; + &quot; Mustang sınıf tipine d&ouml;n&uuml;şt&uuml;r&uuml;lemez!&quot;);\r\n        }\r\n        if (newCar instanceof Ford) {\r\n            System.out.println(&quot;newCar &ouml;rnek referansı ,&quot; + &quot; Ford sınıf tipine d&ouml;n&uuml;şt&uuml;r&uuml;lebilir.&quot;);\r\n        }\r\n    }\r\n}</pre>\r\n','1432464763','Java,OOP,Java SE',''),(26,'Java - Jenerikler ( Generics )','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nMerhaba , bu yazımda Jenerikler(Generics)&#39;den bahsedeceğim. Jenerikler Java&#39;ya JDK 5 ile eklenmiştir.\r\nJeneriklerin kullanıldığı kaynak kodlar javac derleyicisinin daha &ouml;nceki versiyonlarında derlenemez. \r\nJenerikler, Java&#39;yı iki &ouml;nemli bakımdan değiştirmiştir.Birincisi , bu yeni &ouml;zellik dile yeni bir s&ouml;zdizimi &ouml;ğesi eklemiştir.İkincisi ise , &ccedil;ekirdek API&#39;daki bir&ccedil;ok sınıf ve method&#39;da değişikliklere neden olmuşt... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/java-logo.png\" style=\"height:343px; width:670px\" /></p>\r\n\r\n<p>Merhaba , bu yazımda Jenerikler(Generics)&#39;den bahsedeceğim. Jenerikler Java&#39;ya JDK 5 ile eklenmiştir.<br />\r\n<strong><em>Jeneriklerin kullanıldığı kaynak kodlar javac derleyicisinin daha &ouml;nceki versiyonlarında derlenemez. </em></strong><br />\r\n<strong>Jenerikler</strong>,<strong> Java&#39;yı </strong>iki &ouml;nemli bakımdan değiştirmiştir.Birincisi , bu yeni &ouml;zellik dile yeni bir s&ouml;zdizimi &ouml;ğesi eklemiştir.İkincisi ise , &ccedil;ekirdek <strong>API&#39;daki </strong>bir&ccedil;ok sınıf ve method&#39;da değişikliklere neden olmuştur.Java kodlarının yazılma bi&ccedil;imini temelden değiştirmiştir.<br />\r\nTemel olarak jenerikler terimi , <em>parametreli tipler </em>anlamına gelir.Bu yapı &ouml;nemlidir , &uuml;zerinde &ccedil;alışacakları veri tipinin bir parametre olarak belirtildiği sınıflar , arabirimler ve methodlar oluşturabilmenizi sağlar.<br />\r\n<strong>Jenerikler&#39;den </strong>&ouml;nce <strong>Object </strong>tipindeki referanslar yoluyla yazılan kaynak kodları hala g&uuml;n&uuml;m&uuml;zde kullanıma devam etmektedir.<strong>Object </strong>tipindeki sorun tip g&uuml;venliği olmamasıydı.<strong>Jenerikler </strong>bu soruna &ccedil;&ouml;z&uuml;m olarak tasarlanmıştır.Ayrıca s&uuml;reci hızlandırır artık <strong>Object </strong>ve &uuml;zerinde &ccedil;alışan tip arasında d&ouml;n&uuml;ş&uuml;m yapılmasına gerek duyulmaz.<strong>Jeneriklerde </strong>t&uuml;m tip atamaları otomatik ve kapalı olarak yapılır.Bu şekilde Jenerikler kodunuzu tekrar kullanabilme yeteneğinizi arttırır , bunu g&uuml;venle ve kolaylıkla yapabilmenizi sağlar.Bir &ouml;rnek &uuml;zerinden inceleyelim.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\nclass NonGen {\r\n Object type;\r\n\r\n NonGen(final Object type) {\r\n  this.type = type;\r\n }\r\n\r\n Object getObject() {\r\n  return type;\r\n }\r\n\r\n void showType() {\r\n  System.out.println(&quot;Object type&#39;ın tipi :&quot; + type.getClass().getName());\r\n }\r\n\r\n}\r\n\r\nclass NonGenDemo {\r\n public static void main(final String args[]) {\r\n  final NonGen intType = new NonGen(35);\r\n  final int v = (Integer) intType.getObject();\r\n  intType.showType();\r\n  System.out.println(&quot;Değeri :&quot; + v);\r\n\r\n  System.out.println();\r\n\r\n  final NonGen strType = new NonGen(&quot;Hello World!&quot;);\r\n  final String str = (String) strType.getObject();\r\n  strType.showType();\r\n  System.out.println(&quot;Değeri : &quot; + str);\r\n\r\n  System.out.println();\r\n\r\n  final NonGen doubleType = new NonGen(12.5);\r\n  final Double d = (Double) doubleType.getObject();\r\n  doubleType.showType();\r\n  System.out.println(&quot;Değeri : &quot; + d);\r\n\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nObject type&#39;ın tipi :java.lang.Integer\r\nDeğeri :35\r\n\r\nObject type&#39;ın tipi :java.lang.String\r\nDeğeri : Hello World!\r\n\r\nObject type&#39;ın tipi :java.lang.Double\r\nDeğeri : 12.5\r\n</pre>\r\n\r\n<p><br />\r\nYukarıdaki programda <strong>Object </strong>tanımlamaları olduğu i&ccedil;in <strong>NonGen&#39;in jenerik versiyon</strong> gibi her tipte nesneyi depolayabilmesini sağlar.Ancak aynı zamanda java derleyicisinin ger&ccedil;ekte <strong>NonGen </strong>i&ccedil;erisinde depolanan verinin tipi hakkında ger&ccedil;ek bir bilgiye sahip olmasını &ouml;nler.Bu , iki nedenle k&ouml;t&uuml;d&uuml;r.<strong><em>Birincisi depolanan veriyi elde etmek i&ccedil;in a&ccedil;ık tip atamaları gereklidir.İkincisi ise &ccedil;alışma zamanında &ccedil;eşitli t&uuml;rlerde tip uyuşmazlığı hataları oluşabilir. </em></strong></p>\r\n\r\n<pre>\r\nint v = (Integer) intType.getObject();</pre>\r\n\r\n<p><br />\r\nBurada ,<strong> getObject() </strong>methodunun d&ouml;n&uuml;ş tipi <strong>Object </strong>olduğundan , değerin kutudan &ccedil;ıkartılıp<strong> v </strong>değişkeninde depolanmasını sağlamak i&ccedil;in <strong>Integer&#39;a </strong>tip ataması gereklidir.Tip atamasını kaldırırsanız program derlenmemez.</p>\r\n\r\n<pre>\r\nintType = strType;v = (Integer) intType.getObject();</pre>\r\n\r\n<p><br />\r\nBurada bir &ccedil;alışma zamanı hatası oluşur.&Ccedil;&uuml;nk&uuml; <strong>intType&#39;a strType </strong>atanır.Ancak <strong>strType </strong>bir tamsayı değil , karakter katarı i&ccedil;eren bir nesneye referans yapar.Bu atama s&ouml;zdizimsel a&ccedil;ıdan ge&ccedil;erli değildir.&Ccedil;&uuml;nk&uuml; t&uuml;m <strong>NonGen </strong>referansları aynıdır ve herhangi bir <strong>NonGen </strong>referansı bir başka <strong>NonGen </strong>nesnesine referans yapabilir.Ancak bu mantıksal olarak yanlıştır.<strong>getObject() </strong>methodunun d&ouml;&uuml;ş tipi tip atamasıyla integer yapılır ve sonra bu değeri <strong>v</strong> değişkenine atama yapılır.Sorun artık <strong>intType&#39;in </strong>bir Integer değil bir <strong>String </strong>i&ccedil;eren nesneye referans yapmasıdır.İşte burada <strong>Jenerikler </strong>kullanılmadan java derleyicisinin bunu bilmesine imkan yoktur ve bir &ccedil;alışma zamanı hatası ortaya &ccedil;ıkmıştır.<strong>Jeneriklerde </strong>aynı işlem denenseydi , derleyici sorunu yakalayacak ve bir hata bildirecekti.Bu da bir &ccedil;alışma zamanı hatasını &ouml;nleyecekti.<strong>Jenerikler </strong>sayesinde oluşan &ccedil;alışma zamanı hataları , artık derlenme zamanı hatası haline gelmiştir.<br />\r\n<br />\r\n<em><strong>Bir programcının en &ccedil;ok korktuğu şeydir bu! Eğer iyi bir programcı olmak istiyorsak , kullanacağımız herşey t&uuml;m kurallara uygun olmalıdır.İyi bir programcı &ccedil;alışma zamanı hatalarına izin vermemelidir.Bir işi yapan her program doğru sonu&ccedil;lar verebilir fakat doğru kullanıma sahip değildir :)</strong></em><br />\r\n<br />\r\nŞimdi yukarıda ki programın <strong>Jenerik </strong>versiyonunu oluşturalım.</p>\r\n\r\n<pre>\r\nclass Gen {\r\n T type;\r\n\r\n Gen(final T type) {\r\n  this.type = type;\r\n }\r\n\r\n T getType() {\r\n  return type;\r\n }\r\n\r\n void showType() {\r\n  System.out.println(&quot;Jenerik type&#39;ın tipi : &quot;+ type.getClass().getName());\r\n }\r\n\r\n}\r\n\r\nclass GenDemo {\r\n public static void main(final String args[]) {\r\n  final Gen intType = new Gen(35);\r\n  intType.showType();\r\n  final int v = intType.getType();\r\n  System.out.println(&quot;Değeri :&quot; + v);\r\n\r\n  System.out.println();\r\n\r\n  final Gen strType = new Gen(&quot;Hello World!&quot;);\r\n  strType.showType();\r\n  final String str = strType.getType();\r\n  System.out.println(&quot;Değeri : &quot; + str);\r\n\r\n  System.out.println();\r\n\r\n  final Gen doubleType = new Gen(12.5);\r\n  doubleType.showType();\r\n  final Double d = doubleType.getType();\r\n  System.out.println(&quot;Değeri : &quot; + d);\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı :\r\nJenerik type&#39;ın tipi : java.lang.Integer\r\nDeğeri :35\r\n\r\nJenerik type&#39;ın tipi : java.lang.String\r\nDeğeri : Hello World!\r\n\r\nJenerik type&#39;ın tipi : java.lang.Double\r\nDeğeri : 12.5\r\n</pre>\r\n\r\n<pre>\r\nclass Gen { ..</pre>\r\n\r\n<p><br />\r\nBu kullanıma dikkat edelim.<br />\r\n<strong>T</strong> , bir tip parametresinin adıdır.Bu ad nesne oluşturulurken <strong>Gen </strong>sınıfına aktarılacak olan ger&ccedil;ek tip i&ccedil;in bir <em><strong>yer tutucudur.</strong></em>Bu y&uuml;zden <strong>type </strong>, <strong>T</strong>&#39;ye akratılan tipte bir nesne olucaktır.&Ouml;rnekte olduğu gibi <strong>T</strong>&#39;ye aktarılan tip<strong> Integer,String ve Double </strong>tipleri , <strong>type&#39;ı </strong>o tipe ait bir nesne yapıyor.<strong>Java </strong>derleyicisinin ger&ccedil;ekte <strong>Gen&#39;in </strong>ya da bir başka <strong>jenerik </strong>sınıfın değişik versiyonlarının oluşturulmadığını belirtmemiz gerekir.<strong>Derleyici </strong>, t&uuml;m <strong>jenerik </strong>tip bilgilerini ortadan kaldırır.Bu işleme <em><strong>silme( erasure ) </strong></em>denir.</p>\r\n\r\n<pre>\r\nGen intType = new Gen(35);</pre>\r\n\r\n<p><br />\r\nBu satır <strong>Gen constructoru</strong> &ccedil;ağrıldığında , <strong>Integer </strong>tip arg&uuml;manının da belirtildiğine dikkat edelim.Bu gereklidir , &ccedil;&uuml;nk&uuml; referans atanacağı nesnenin <strong>(intType) </strong>tipi <strong>Gen &lt; Integer &gt;</strong>&#39;dır.Bu y&uuml;zden <strong>new </strong>tarafından d&ouml;nd&uuml;r&uuml;len referansda aynı tipe sahip olmalıdır.Değilse bir derleme zamanı hatası ger&ccedil;ekleşir.</p>\r\n\r\n<pre>\r\nGen intType;intType = new Gen(35);</pre>\r\n\r\n<p><br />\r\nYukarıdaki kod buna bir &ouml;rnektir.Nesne <strong>Gen</strong><strong> </strong>tipinde olduğundan <strong>Gen</strong><strong> </strong>tipinde bir nesneye başvuramaz.Tip kontrol&uuml; <strong>Jeneriklerin </strong>en başlıca avantajlarından biridir.<br />\r\n<br />\r\nJenerikler sadece nesnelerle &ccedil;alışır.Jenerik bir tipte &ouml;rnek deklare ederken , tip parametresine aktarılan tip sınıf tipi olmalıdır.int yada char gibi bir primitif tip kullanılamaz.</p>\r\n\r\n<pre>\r\nGen intType = new Gen(35);</pre>\r\n\r\n<p>&Ouml;rnek olarak <strong>Gen </strong>sınıfında , <strong>T&#39;</strong>ye herhangi bir sınıf tipi aktarabilirsiniz,ancak tip parametresine bir primitif tip aktaramazsınız.<br />\r\n<br />\r\nJenerikler iki tip parametreli olarakda kullanılabilir.Aşağıdaki programı inceleyelim.</p>\r\n\r\n<pre>\r\nclass Gen {\r\n T type;\r\n\r\n Gen(final T type) {\r\n  this.type = type;\r\n }\r\n\r\n T getType() {\r\n  return type;\r\n }\r\n\r\n void showType() {\r\n  System.out.println(&quot;Jenerik type&#39;ın tipi : &quot;+ type.getClass().getName());\r\n }\r\n\r\n}\r\n\r\nclass GenDemo {\r\n public static void main(final String args[]) {\r\n  final Gen intType = new Gen(35);\r\n  intType.showType();\r\n  final int v = intType.getType();\r\n  System.out.println(&quot;Değeri :&quot; + v);\r\n\r\n  System.out.println();\r\n\r\n  final Gen strType = new Gen(&quot;Hello World!&quot;);\r\n  strType.showType();\r\n  final String str = strType.getType();\r\n  System.out.println(&quot;Değeri : &quot; + str);\r\n\r\n  System.out.println();\r\n\r\n  final Gen doubleType = new Gen(12.5);\r\n  doubleType.showType();\r\n  final Double d = doubleType.getType();\r\n  System.out.println(&quot;Değeri : &quot; + d);\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı :\r\nJenerik type&#39;ın tipi : java.lang.Integer\r\nDeğeri :35\r\n\r\nJenerik type&#39;ın tipi : java.lang.String\r\nDeğeri : Hello World!\r\n\r\nJenerik type&#39;ın tipi : java.lang.Double\r\nDeğeri : 12.5\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nclass Gen { ..</pre>\r\n\r\n<p><br />\r\nBu kullanıma dikkat edelim.<br />\r\n<strong>T</strong>&nbsp;, bir tip parametresinin adıdır.Bu ad nesne oluşturulurken&nbsp;<strong>Gen&nbsp;</strong>sınıfına aktarılacak olan ger&ccedil;ek tip i&ccedil;in bir&nbsp;<em><strong>yer tutucudur.</strong></em>Bu y&uuml;zden&nbsp;<strong>type&nbsp;</strong>,&nbsp;<strong>T</strong>&#39;ye akratılan tipte bir nesne olucaktır.&Ouml;rnekte olduğu gibi&nbsp;<strong>T</strong>&#39;ye aktarılan tip<strong>&nbsp;Integer,String ve Double&nbsp;</strong>tipleri ,&nbsp;<strong>type&#39;ı&nbsp;</strong>o tipe ait bir nesne yapıyor.<strong>Java&nbsp;</strong>derleyicisinin ger&ccedil;ekte&nbsp;<strong>Gen&#39;in&nbsp;</strong>ya da bir başka&nbsp;<strong>jenerik&nbsp;</strong>sınıfın değişik versiyonlarının oluşturulmadığını belirtmemiz gerekir.<strong>Derleyici&nbsp;</strong>, t&uuml;m&nbsp;<strong>jenerik&nbsp;</strong>tip bilgilerini ortadan kaldırır.Bu işleme&nbsp;<em><strong>silme( erasure )&nbsp;</strong></em>denir.</p>\r\n\r\n<pre>\r\nGen intType = new Gen(35);</pre>\r\n\r\n<p><br />\r\nBu satır&nbsp;<strong>Gen constructoru</strong>&nbsp;&ccedil;ağrıldığında ,&nbsp;<strong>Integer&nbsp;</strong>tip arg&uuml;manının da belirtildiğine dikkat edelim.Bu gereklidir , &ccedil;&uuml;nk&uuml; referans atanacağı nesnenin&nbsp;<strong>(intType)&nbsp;</strong>tipi&nbsp;<strong>Gen &lt; Integer &gt;</strong>&#39;dır.Bu y&uuml;zden&nbsp;<strong>new&nbsp;</strong>tarafından d&ouml;nd&uuml;r&uuml;len referansda aynı tipe sahip olmalıdır.Değilse bir derleme zamanı hatası ger&ccedil;ekleşir.</p>\r\n\r\n<pre>\r\nGen intType;\r\nintType = new Gen(35);</pre>\r\n\r\n<p><br />\r\nYukarıdaki kod buna bir &ouml;rnektir.Nesne&nbsp;<strong>Gen</strong><strong>&nbsp;</strong>tipinde olduğundan&nbsp;<strong>Gen</strong><strong>&nbsp;</strong>tipinde bir nesneye başvuramaz.Tip kontrol&uuml;&nbsp;<strong>Jeneriklerin&nbsp;</strong>en başlıca avantajlarından biridir.<br />\r\n<br />\r\nJenerikler sadece nesnelerle &ccedil;alışır.Jenerik bir tipte &ouml;rnek deklare ederken , tip parametresine aktarılan tip sınıf tipi olmalıdır.int yada char gibi bir primitif tip kullanılamaz.</p>\r\n\r\n<pre>\r\nGen intType = new Gen(35);\r\n</pre>\r\n\r\n<p>&Ouml;rnek olarak&nbsp;<strong>Gen&nbsp;</strong>sınıfında ,&nbsp;<strong>T&#39;</strong>ye herhangi bir sınıf tipi aktarabilirsiniz,ancak tip parametresine bir primitif tip aktaramazsınız.<br />\r\n<br />\r\n<br />\r\nJenerikler iki tip parametreli olarakda kullanılabilir.Aşağıdaki programı inceleyelim.</p>\r\n\r\n<pre>\r\nclass TwoGen {\r\n T type;\r\n Y type2;\r\n\r\n TwoGen(final T type, final Y type2) {\r\n  this.type = type;\r\n  this.type2 = type2;\r\n }\r\n\r\n T getType() {\r\n  return type;\r\n }\r\n\r\n Y getType2() {\r\n  return type2;\r\n }\r\n\r\n void showType() {\r\n  System.out.println(&quot;Jenerik type&#39;ın tipi : &quot;\r\n    + type.getClass().getName());\r\n  System.out.println(&quot;Jenerik type2&#39;ın tipi : &quot;\r\n    + type2.getClass().getName());\r\n }\r\n\r\n}\r\n\r\nclass GenDemo {\r\n public static void main(final String args[]) {\r\n  final TwoGen twoType = new TwoGen(35,\r\n    &quot;Hello World!&quot;);\r\n  twoType.showType();\r\n  final int v = twoType.getType();\r\n  System.out.println(&quot;Değeri (int):&quot; + v);\r\n\r\n  final String str = twoType.getType2();\r\n  System.out.println(&quot;Değeri (String):&quot; + str);\r\n\r\n }\r\n}\r\nProgramın &Ccedil;ıktısı : \r\nJenerik type&#39;ın tipi : java.lang.Integer\r\nJenerik type2&#39;ın tipi : java.lang.String\r\nDeğeri (int):35\r\nDeğeri (String):Hello World!\r\n</pre>\r\n','1432464763','Java,OOP,Java SE,Generics',''),(27,'Giriş Sayfası ve CRUD Paneli (Servlet JSP / PHP)','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Bu yazımda yapmış olduğum ufak bir projeyi paylaşıyorum.\r\nProjeyi kaynak belirtmeden herhangi bir yerde kullanabilirsiniz.\r\nBir giriş sayfamız var,eğer giriş başarılı bir şekilde ger&ccedil;ekleşirse yine giriş sayfası i&ccedil;in anlık olarak kullanıcı/yetkili oluşurup , listeleyip, g&uuml;ncelleyip , silebileceğimiz bir sayfa geliyor.\r\nVeritabanı sunucusu olarak MySQL&#39;i kullandım.Bazı işlemler i&ccedil;in &ccedil;ok kısa JavaScript kullanılmıştır.\r\n\r\nServlet ... </div>','<p>Bu yazımda yapmış olduğum ufak bir projeyi paylaşıyorum.<br />\r\nProjeyi kaynak belirtmeden herhangi bir yerde kullanabilirsiniz.<br />\r\nBir giriş sayfamız var,eğer giriş başarılı bir şekilde ger&ccedil;ekleşirse yine giriş sayfası i&ccedil;in anlık olarak kullanıcı/yetkili oluşurup , listeleyip, g&uuml;ncelleyip , silebileceğimiz bir sayfa geliyor.<br />\r\nVeritabanı sunucusu olarak <strong>MySQL</strong>&#39;i kullandım.Bazı işlemler i&ccedil;in &ccedil;ok kısa <strong>JavaScript </strong>kullanılmıştır.<br />\r\n<br />\r\n<strong>Servlet </strong>ile oluşturulan versiyonu <strong>JDBC </strong>, <strong>JSP </strong>sayfaları ise <strong>JSTL </strong>kullanılarak&nbsp; <strong>MVC </strong>ve <strong>DAO </strong>Tasarım Şablonları uygulanarak <strong>Maven Project </strong>olarak<strong> Eclipse</strong>&#39;de hazırlanmıştır.<br />\r\n<br />\r\n<strong>PHP </strong>versiyonunda herhangi bir framework kullanılmamıştır.<br />\r\n<br />\r\n<strong>Servlet&nbsp; JSP </strong>versiyonu <strong>GitHub </strong>linki :<br />\r\n<a href=\"\\\">https://github.com/kustemura/LoginCrudServletJSPExample</a><br />\r\n<br />\r\n<strong>Servlet JSP </strong>versiyonu<strong> Google Drive</strong> linki :<br />\r\n<a href=\"\\\">https://drive.google.com/file/d/0BytHrEwKQAMjOVJFMERZRThuRTg/view</a><br />\r\n<br />\r\n<strong>PHP </strong>versiyonu <strong>GitHub </strong>linki :<br />\r\n<a href=\"\\\">https://github.com/kustemura/LoginCrudPHPExample</a><br />\r\n<br />\r\n<strong>PHP</strong> versiyonu <strong>Google Drive</strong> linki :<br />\r\n<a href=\"\\\">https://drive.google.com/open?id=0BytHrEwKQAMjT3ZJRWhHTV80c1E</a><br />\r\n<br />\r\nAşağıdaki resimler projenin 2 versiyonundaki ekran g&ouml;r&uuml;nt&uuml;leri bulunmaktadır.<br />\r\n<br />\r\nGiriş Sayfası</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/1.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n&nbsp;&nbsp;&nbsp; giriş sayfasında oluşan durumlar i&ccedil;in bir validasyon sistemine sahip ve &uuml;st tarafta uyarılar oluşmakta .Kullanıcı adı veya şifre boş ge&ccedil;ilirse ,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/2.png\" />&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>sistemdeki t&uuml;m kullanıcıları kaldırıp &ccedil;ıkış yaptıktan sonra tekrar giriş yapmayı denersek ,<br />\r\n&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/3.png\" /></p>\r\n\r\n<p><br />\r\n&nbsp;hatalı girilirse ,</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/4.png\" />&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>eğer giriş yapan kişi yetkili değil ise ,&nbsp;&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/5.png\" />&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>kullanıcı adı ve şifre doğru girildikten sonra giren kişi yetkili ise CRUD paneli ve kullanıcı listesi sayfası ekranı gelmektedir.</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/6.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Yapılan diğer işlemlerde oluşan ekran g&ouml;r&uuml;nt&uuml;leri aşağıdadır.</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/7.png\" /></p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;aynı isme sahip eklemelere izin verilmez.<br />\r\n&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/8.png\" />&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>G&uuml;ncelleme yapılacağı zaman sadece kullanıcı adı değiştirilip şifre boş ge&ccedil;ilirse aynı şifre ge&ccedil;erliliğini devam ettirmektedir.G&uuml;ncellemeden &ouml;nce</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/9.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/10.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>g&uuml;ncellendikten sonra ,<br />\r\n&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/11.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/12.png\" />&nbsp;</p>\r\n\r\n<p>kullanıcı adı ve şifre g&uuml;ncellendiğinde ,&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://alicankustemur.github.io/images/id/27/13.png\" />&nbsp;</p>\r\n\r\n<p>silinmek istendiğinde</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><a href=\"\\\"><img src=\"https://alicankustemur.github.io/images/id/27/14.png\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','1436266363','Java,Servlet,JSP,JDBC',''),(28,'indir.com Mobil Uygulama Ödülleri 2016 Yarışması','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>İndir.com ekibini d&uuml;zenlemiş olduğu &lsquo;indir.com Mobil Uygulama &Ouml;d&uuml;lleri&rsquo; yarışmasının 3. Turu i&ccedil;in başvurular başladı!\r\n\r\n\r\n\r\nHer yaştan geliştiricinin katılma fırsatı bulduğu Mobil Uygulama Yarışması&rsquo;nda tek şart uygulama veya oyunun 1 Ocak 2016 tarihinden sonra uygulama mağazasına y&uuml;klenmiş olması.Mobil uyumlu uygulama ve oyunların tanıtılmasına destek olmak amacıyla d&uuml;zenlenen indir.com Mobil Uygulama &Ouml;d&uuml;l... </div>','<p>İndir.com ekibini d&uuml;zenlemiş olduğu &lsquo;indir.com Mobil Uygulama &Ouml;d&uuml;lleri&rsquo; yarışmasının 3. Turu i&ccedil;in başvurular başladı!</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/28/1.jpg\" style=\"height:354px; width:664px\" /></p>\r\n\r\n<p>Her yaştan geliştiricinin katılma fırsatı bulduğu Mobil Uygulama Yarışması&rsquo;nda tek şart uygulama veya oyunun 1 Ocak 2016 tarihinden sonra uygulama mağazasına y&uuml;klenmiş olması.Mobil uyumlu uygulama ve oyunların tanıtılmasına destek olmak amacıyla d&uuml;zenlenen indir.com Mobil Uygulama &Ouml;d&uuml;lleri&rsquo; yarışmasının bu yıl ki programında değişiklik yapıldı.</p>\r\n\r\n<p>İlki 2014 yılında başlayan ve ardından 2015 yılında devam eden Mobil Uygulama Yarışması&rsquo;nın 2016 takvimi 2 etkinlik ve 2 yarışma şeklinde d&uuml;zenlendi.</p>\r\n\r\n<p>Yarışmacılar daha fazla kullanıcıya ulaşmayı bekleyen mobil uygulamalarını tanıtma fırsatı bulabilecekleri gibi aynı zamanda muhteşem &ouml;d&uuml;llerin de sahibi olacak.</p>\r\n\r\n<p>Yarışmaya katılmaya hak kazanan uygulamalar &ouml;nce j&uuml;ri daha sonra halk oylamasından ge&ccedil;erek ilk 3&rsquo;&uuml; belirlenecek. Değerlendirmelerin ardından dereceye giren uygulama veya oyunlar i&ccedil;in geliştiricilere harika &ouml;d&uuml;ller takdim edilecek.</p>\r\n\r\n<p><strong>Kazananlara Verilecek &Ouml;d&uuml;ller</strong></p>\r\n\r\n<p><strong>Birinciye</strong> 1 hafta Silikon Vadisi tatili (San Francisco), bukalemun.com&#39;dan 5000 TL değerinde ASO hizmeti,&nbsp;indir.com&#39;dan 5.000TL değerinde reklam.</p>\r\n\r\n<p><strong>İkinciye</strong> Antalya&#39;da 1 hafta tatil,&nbsp;indir.com&#39;dan 2.500TL değerinde uygulamanın tanıtımı.</p>\r\n\r\n<p>&Uuml;&ccedil;&uuml;nc&uuml;ye Antalya&#39;da 3 g&uuml;n tatil,&nbsp;indir.com&#39;dan 1.000TL değerinde uygulamanın tanıtımı</p>\r\n\r\n<p><strong>&Uuml;niversitelilere &Ouml;zel &Ouml;d&uuml;l</strong></p>\r\n\r\n<p><strong>Mobil Uygulama Yarışması kapsamında &uuml;niversiteler i&ccedil;in ayrı bir &ouml;d&uuml;llendirme de yapılacaktır. &Uuml;niversitelere </strong>&ouml;zel d&uuml;zenlenen &ouml;d&uuml;l t&ouml;reninde ise kazanana Silikon Vadisi tatilindeki ihtiya&ccedil;larını karşılamak amacıyla&nbsp;<strong>5000 TL nakit para &ouml;d&uuml;l&uuml;</strong>&nbsp;verilecektir.</p>\r\n\r\n<p><strong>&lsquo;&Uuml;niversiteler İ&ccedil;in</strong> <strong>indir.com Mobil Uygulama &Ouml;d&uuml;lleri 2016</strong>&#39; Takvimi</p>\r\n\r\n<p><strong>Yarışma Başlangıcı:</strong>&nbsp;1 Ocak 2016</p>\r\n\r\n<p><strong>Son Başvuru:</strong> 30 Ağustos 2016</p>\r\n\r\n<p><strong>Halk Oylaması:</strong> 5 Eyl&uuml;l 2016</p>\r\n\r\n<p><strong>J&uuml;ri Değerlendirmesi:</strong> 10 Eyl&uuml;l 2016</p>\r\n\r\n<p><strong>Mobil Etkinlik:</strong> Ekim Ayında</p>\r\n\r\n<p>Yarışmanın &ouml;d&uuml;l t&ouml;reni yarışmayı birinci olanın okuduğu &Uuml;niversite&rsquo;de ger&ccedil;ekleştirilecek olup t&ouml;rene t&uuml;m &ouml;ğrenciler katılabilecektir.</p>\r\n\r\n<p><strong>&lsquo;&Uuml;niversiteler İ&ccedil;in</strong> <strong>indir.com Mobil Uygulama &Ouml;d&uuml;lleri 2016</strong>&#39; şartlar ve başvuru i&ccedil;in <a href=\"http://www.indir.com/yarisma/\" target=\"_blank\">buraya</a> tıklayabilirsiniz.</p>\r\n\r\n<p><strong>&lsquo;indir.com Mobil Uygulama Yarışması 2016&rsquo;</strong> Takvimi</p>\r\n\r\n<p><strong>Yarışma Başlangıcı</strong>: 1 Ocak 2016</p>\r\n\r\n<p><strong>Son Başvuru:</strong> 28 Nisan 2016</p>\r\n\r\n<p><strong>Halk Oylaması:</strong> 30 Nisan 2016</p>\r\n\r\n<p><strong>J&uuml;ri Değerlendirmesi</strong>: 7 Mayıs 2016</p>\r\n\r\n<p><strong>Mobil Etkinlik:</strong> 14 Mayıs 2016&nbsp;</p>\r\n\r\n<p>Hi&ccedil;bir yaş sınırı g&ouml;zetmeksizin herkesin katılabildiği yarışmanın &ouml;d&uuml;l t&ouml;reni ise 14 Mayıs 2016&#39;da&nbsp;<strong>İstanbul Bah&ccedil;eşehir &Uuml;niversitesi</strong>&#39;nde ikincisi ger&ccedil;ekleşecek olan Mobil Etkinlik&#39;te yapılacaktır.</p>\r\n\r\n<p>Yarışma başvuru formu i&ccedil;in<strong> &lsquo;</strong><a href=\"http://www.indir.com/yarisma/\" target=\"_blank\"><strong>indir.com Mobil Uygulama &Ouml;d&uuml;lleri 2016</strong></a><a name=\"\\\"></a>&#39; adresini ziyaret edebilirsiniz.</p>\r\n','1454967635','indir.com',''),(29,'Spring Framework ile Java Tabanlı DataSource Konfigurasyonu','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nMerhaba arkadaşlar ,bu yazdıma Spring Framework DataSource konfigurasyonunu XML kullanmadan sadece Java tabanlı olarak oluşturacağız.(Bu &ouml;rnekte MySQL kullanılacaktır.) \r\n\r\n&Ouml;ncelikle .properties dosyamızı oluşturuyoruz.\r\n&nbsp;\r\n\r\n\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql://localhost:3306/database-name\r\nusername = root\r\npassword = \r\n\r\n\r\nArdından sınıfımızı oluşturuyoruz.\r\n\r\n\r\n@Configuration\r\n@PropertySource(&quot;classpath:/mysql.properties&quot;... </div>','<p><img alt=\"\" class=\"spring-framework-logo\" src=\"https://alicankustemur.github.io/images/spring-framework-logo.png\" style=\"height:380px; width:550px\" /></p>\r\n\r\n<p>Merhaba arkadaşlar ,bu yazdıma <strong>Spring Framework</strong> <strong>DataSource </strong>konfigurasyonunu <strong>XML</strong> kullanmadan sadece <strong>Java </strong>tabanlı olarak oluşturacağız.<strong>(Bu &ouml;rnekte MySQL kullanılacaktır.) </strong><br />\r\n<br />\r\n&Ouml;ncelikle <strong>.properties </strong>dosyamızı oluşturuyoruz.<br />\r\n&nbsp;</p>\r\n\r\n<pre>\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql://localhost:3306/database-name\r\nusername = root\r\npassword = </pre>\r\n\r\n<p><br />\r\nArdından sınıfımızı oluşturuyoruz.</p>\r\n\r\n<pre>\r\n@Configuration\r\n@PropertySource(&quot;classpath:/mysql.properties&quot;)\r\n@ComponentScan(basePackages = &quot;io.github.alicankustemur.blogproject&quot;)\r\npublic class BeanConfiguration {\r\n	@Autowired\r\n	public Environment environment;\r\n\r\n	@Bean\r\n	public SingleConnectionDataSource createDriverManagerDataSourceBean() {\r\n		SingleConnectionDataSource driverManager = new SingleConnectionDataSource();\r\n		driverManager.setDriverClassName(environment.getProperty(&quot;driverClassName&quot;));\r\n		driverManager.setUrl(environment.getProperty(&quot;url&quot;));\r\n		driverManager.setUsername(environment.getProperty(&quot;username&quot;));\r\n		driverManager.setPassword(environment.getProperty(&quot;password&quot;));\r\n		return driverManager;\r\n	}\r\n}</pre>\r\n\r\n<p>Bu sınıfın bir konfigurasyon işlemi yaptığını belirtmek i&ccedil;in <strong>@Configuration </strong>anotasyonunu sınıfın başına ekliyoruz.<br />\r\n<br />\r\n<strong>@PropertySource </strong>anotasyonu i&ccedil;erisinde ki <strong>&quot;classpath:/mysql.properties&quot; </strong>değeri <strong>mysql.properties </strong>dosyasını classpath i&ccedil;erisinde arayıp <strong>Environment&#39;a</strong> enjekte etmektedir.<br />\r\nDaha sonra <strong>getProperty()&nbsp; </strong>methodu ile birlikte properties dosyasında ki değişken değerlerine erişiyoruz.Bu değerleri de oluşturduğumuz <strong>SingleConnectionDataSource</strong> nesnesine set ediyoruz.<br />\r\n<br />\r\nBurada <strong>SingleConnectionDataSource </strong>kullanmamın sebebi bu sınıf ile yapılan <strong>DataSource</strong> tanımlamaları sadece bir <strong>Connection </strong>nesnesinin kullanımına izin verir.Uygulama her zaman aynı <strong>Connection </strong>nesnesini kullanarak &ccedil;alışmayı s&uuml;rd&uuml;r&uuml;r.<strong>DriverManagerDataSource </strong>kullanılarak oluşturulan bir <strong>DataSource </strong>tanımlaması her veri tabanı bağlantı isteği i&ccedil;in yeni bir <strong>Connection</strong> nesnesi oluşturacaktır.<br />\r\n<br />\r\n<strong>@ComponentScan </strong>anotasyonu ile Spring&#39;e gerekli sınıfları classpath i&ccedil;erisinde araması gerektiğini belirtiyoruz.<br />\r\n<br />\r\nBurada <strong>createDriverManagerDataSourceBean() </strong>methodu &uuml;zerinde ki <strong>@Bean </strong>anotasyonu methodu bean haline getirip <strong>DAO </strong>işlemleri i&ccedil;in <strong>Repository </strong>sınıfları i&ccedil;erisinde <strong>DataSource </strong>tanımlamalarına <strong>@Autowired </strong>anotasyonu ile otomatik olarak enjekte edeceğiz.<br />\r\n&nbsp;</p>\r\n\r\n<p>Aşağıda bununla ilgili kısa bir &ouml;rnek verilmiştir.</p>\r\n\r\n<pre>\r\n@Component\r\npublic class JdbcRepositoryImpl implements Repository {\r\n	@Autowired\r\n	private DataSource dataSource;\r\n\r\n	@Override\r\n	public void save(User user) {\r\n		PreparedStatement preparedStatement = null;\r\n		try {\r\n			Connection connection = dataSource.getConnection();\r\n			preparedStatement = connection.prepareStatement(&quot;INSERT INTO user (id,name) VALUES (?,?)&quot;);\r\n			preparedStatement.setLong(1, user.getId());\r\n			preparedStatement.setString(2, user.getName());\r\n			preparedStatement.executeUpdate();\r\n			preparedStatement.close();\r\n		} catch (Exception e) {\r\n		}\r\n	}\r\n}</pre>\r\n\r\n<p>Oluşturduğumuz konfigurasyon sınıfını <strong>ApplicationContext </strong>&uuml;zerinden &ccedil;ağırabilmek i&ccedil;in <strong>AnnotationConfigApplicationContext </strong>nesnesi ile oluşturup constructor değerine ilgili konfigurasyon sınıfını belirtmek gerekmektedir.<br />\r\n<br />\r\nAşağıda bununla ilgili kısa bir &ouml;rnek verilmiştir.</p>\r\n\r\n<pre>\r\npublic class Main {\r\n	public static void main(String[] args) throws SQLException {\r\n		ApplicationContext applicationContext = new AnnotationConfigApplicationContext(BeanConfiguration.class);\r\n		Repository repository = applicationContext.getBean(Repository.class);\r\n		User user = new User(&quot;1&quot;, &quot;Ali Can Kuştemur&quot;);\r\n		repository.save(user);\r\n	}\r\n}</pre>\r\n','1460987141','Java , spring,Spring Framework, datasource',''),(30,'PrimeFaces Başlarken','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Nedir bu PrimeFaces ?\r\n\r\nPrimeFaces opsiyonel ara&ccedil;lar dışında hi&ccedil;bir bağımlılığı olmayan sıfır konfigurasyonlu bir JSF framework&#39;&uuml;dur.Şu anda en son olarak 5.3 s&uuml;r&uuml;m&uuml; bulunmaktadır.Ben burada yazdığım t&uuml;m PrimeFaces makalelerinde projeleri&nbsp;Maven olarak oluşturacağım.Bir Maven Projesi oluşturduktan sonra ilgili dependecy&#39;i pom.xml&nbsp;dosyamıza ekliyoruz.\r\n\r\n\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.primefaces&lt;/groupI... </div>','<p>Nedir bu <strong>PrimeFaces </strong>?</p>\r\n\r\n<p><strong>PrimeFaces</strong> opsiyonel ara&ccedil;lar dışında hi&ccedil;bir bağımlılığı olmayan sıfır konfigurasyonlu bir <strong>JSF </strong>framework&#39;&uuml;dur.Şu anda en son olarak <strong>5.3 </strong>s&uuml;r&uuml;m&uuml; bulunmaktadır.Ben burada yazdığım t&uuml;m <strong>PrimeFaces </strong>makalelerinde projeleri&nbsp;<strong>Maven</strong> olarak oluşturacağım.Bir <strong>Maven Projesi</strong> oluşturduktan sonra ilgili <strong>dependecy&#39;i pom.xml&nbsp;</strong>dosyamıza ekliyoruz.</p>\r\n\r\n<pre>\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.primefaces&lt;/groupId&gt;\r\n    &lt;artifactId&gt;primefaces&lt;/artifactId&gt;\r\n    &lt;version&gt;5.3&lt;/version&gt;\r\n&lt;/dependency&gt;</pre>\r\n\r\n<p><strong>xhtml </strong>dosyalarımızda kullanabilmemiz i&ccedil;in <strong>html tag&#39;i </strong>i&ccedil;erisine bu <strong>namespace&#39;i </strong>eklemek zorundayız.</p>\r\n\r\n<pre>\r\nxmlns:p=&quot;<a href=\"http://primefaces.org/ui\">http://primefaces.org/ui</a>&quot;</pre>\r\n\r\n<p>aşağıdaki <strong>test </strong>sayfasını oluşturup başlıyoruz. &nbsp;</p>\r\n\r\n<pre>\r\n&lt;html xmlns=&quot;<a href=\"http://www.w3.org/1999/xhtml\">http://www.w3.org/1999/xhtml</a>&quot; xmlns:h=&quot;<a href=\"http://java.sun.com/jsf/html\">http://java.sun.com/jsf/html</a>&quot; xmlns:f=&quot;<a href=\"http://java.sun.com/jsf/core\">http://java.sun.com/jsf/core</a>&quot;\r\n      xmlns:ui=&quot;<a href=\"http://java.sun.com/jsf/facelets\">http://java.sun.com/jsf/facelets</a>&quot; xmlns:p=&quot;<a href=\"http://primefaces.org/ui\">http://primefaces.org/ui</a>&quot;&gt;\r\n&lt;h:head&gt;&lt;/h:head&gt;\r\n&lt;h:body&gt;\r\n    &lt;h:form&gt;\r\n        &lt;p:spinner/&gt;\r\n    &lt;/h:form&gt;\r\n&lt;/h:body&gt;\r\n&lt;/html&gt;</pre>\r\n\r\n<p>proje&#39;ye <strong>GitHub</strong> &uuml;zerinden erişebilirsiniz.</p>\r\n\r\n<p><strong>Link :&nbsp;<a href=\"https://github.com/alicankustemur/PrimeFacesExamples/tree/master/Beggin-Started\" target=\"_blank\">https://github.com/alicankustemur/PrimeFacesExamples/tree/master/Beggin-Started</a></strong></p>\r\n','1462867082','Java , Primefaces, JSF',''),(31,'PrimeFaces Komponentler','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Merhaba arkadaşlar bir &ouml;nceki&nbsp;PrimeFaces&nbsp;yazıma bu link&nbsp;&uuml;zerinden erişebilirsiniz.PrimeFaces ile ilgili orjinal d&ouml;k&uuml;mantasyona bu link &uuml;zerinden erişebilirsiniz , zaten bende &ouml;rnekleri bu&nbsp;d&ouml;k&uuml;mantasyon &uuml;zerinden oluşturmaktayım.\r\n\r\n\r\n\r\nInput : AutoComplete &Ouml;rneği :\r\n\r\n\r\n@ManagedBean(name = &quot;autoComplete&quot;)\r\npublic class AutoComplete\r\n{\r\n	private String text;\r\n\r\n	public List complete(String query)\r\n	{\r\n		List re... </div>','<p>Merhaba arkadaşlar bir &ouml;nceki&nbsp;<strong>PrimeFaces</strong>&nbsp;yazıma bu <a href=\"https://alicankustemur.github.io/#/post?id=30\" target=\"_blank\">link</a>&nbsp;&uuml;zerinden erişebilirsiniz.<strong>PrimeFaces</strong> ile ilgili orjinal d&ouml;k&uuml;mantasyona bu <a href=\"https://www.primefaces.org/docs/guide/primefaces_user_guide_5_3.pdf\" target=\"_blank\">link </a>&uuml;zerinden erişebilirsiniz , zaten bende &ouml;rnekleri bu&nbsp;d&ouml;k&uuml;mantasyon &uuml;zerinden oluşturmaktayım.</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/31/1.jpg\" style=\"height:336px; width:708px\" /></p>\r\n\r\n<p><strong>Input : AutoComplete &Ouml;rneği :</strong></p>\r\n\r\n<pre>\r\n@ManagedBean(name = &quot;autoComplete&quot;)\r\npublic class AutoComplete\r\n{\r\n	private String text;\r\n\r\n	public List complete(String query)\r\n	{\r\n		List results = new ArrayList();\r\n		for (int i = 0; i &lt; 10; i++)\r\n		{\r\n			results.add(query + i);\r\n		}\r\n		return results;\r\n	}\r\n\r\n	public List completeNew(String query)\r\n	{\r\n		List someTexts = new ArrayList();\r\n		someTexts.add(&quot;Java&quot;);\r\n		someTexts.add(&quot;Java Enterprise Edition&quot;);\r\n		someTexts.add(&quot;Primefaces&quot;);\r\n		someTexts.add(&quot;JSF&quot;);\r\n		return someTexts;\r\n	}\r\n\r\n	public String getText()\r\n	{\r\n		return text;\r\n	}\r\n\r\n	public void setText(String text)\r\n	{\r\n		this.text = text;\r\n	}\r\n\r\n}</pre>\r\n\r\n<p><strong>ManagedBean&#39;</strong>imizi oluşturduk ,</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><img src=\"\\\" />Burada <strong>completeMethod</strong> değeri <strong>autoComplete.complete</strong> methodu olan komponent girilen her değer i&ccedil;in random 10 adet değer sonucu vericektir.<strong>completeMethod</strong> değeri <strong>autoComplete.completeNew</strong> olan komponent ise girilen değeri <strong>completeNew</strong> i&ccedil;erisinde arayacaktır.</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/31/2.jpg\" style=\"height:615px; width:1341px\" /></p>\r\n\r\n<pre>\r\n@ManagedBean(name = &quot;carBean&quot;)\r\npublic class CarBean\r\n{\r\n\r\n	private List	cars;\r\n\r\n	private Car			selected;\r\n\r\n	public Car getSelected()\r\n	{\r\n		return selected;\r\n	}\r\n\r\n	public void setSelected(Car selected)\r\n	{\r\n		this.selected = selected;\r\n	}\r\n\r\n	public CarBean()\r\n	{\r\n		cars = new ArrayList();\r\n		for (int i = 0; i &lt; 10; i++)\r\n		{\r\n			cars.add(new Car(&quot;myModel&quot; + i, 2005, &quot;ManufacturerX&quot;, &quot;blue&quot;));\r\n		}\r\n	}\r\n\r\n	public List getCars()\r\n	{\r\n		return cars;\r\n	}\r\n\r\n	public void setCars(List cars)\r\n	{\r\n		this.cars = cars;\r\n	}\r\n\r\n}</pre>\r\n\r\n<p>ardından <strong>xhtml</strong> dosyamızı oluşturuyoruz.</p>\r\n\r\n<p><img src=\"\\\" />Burada 3 adet <strong>carousel</strong> bulunmaktadır , ilki 3 saniyede bir tetiklenen bir <strong>slider</strong>&#39;a ikincisi <strong>tab</strong> şeklinde en sonuncu ise se&ccedil;ilen değeri bir <strong>dialog</strong> i&ccedil;erisinde g&ouml;stermektedir.</p>\r\n\r\n<p>proje&#39;ye <strong>GitHub</strong> &uuml;zerinden erişebilirsiniz.</p>\r\n\r\n<p><strong>Link :&nbsp;<a href=\"https://github.com/alicankustemur/PrimeFacesExamples/tree/master/Components\" target=\"_blank\">https://github.com/alicankustemur/PrimeFacesExamples/tree/master/Components</a></strong></p>\r\n','1462899809','Java , Primefaces, JSF',''),(33,'Spring MVC , MongoDB ve Bootstrap 3 ile Kişisel Rehber Projesi ','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nMerhaba arkadaşlar bu yazımda Spring MVC&nbsp;yapısını kullanarak MongoDB&nbsp;veritabanı uygulaması ile birlikte sunum katmanında Bootstrap 3&nbsp;kullanarak bir Kişisel Rehber Projesi&nbsp;oluşturacağız.Ayrıca entegrasyon ve Mockito Testing Framework&nbsp;ile bazı test sınıflarını da oluşturacağız.( Test tarafını ilerleyen zamanlar da yazacağım. )\r\n\r\nBu uygulama sadece temel veritabanı işlemlerini i&ccedil;ermektedir. ( ekleme , getirme , g&uuml;ncelleme ve silme... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/spring-framework-logo.png\" style=\"height:190px; width:275px\" /></p>\r\n\r\n<p>Merhaba arkadaşlar bu yazımda <strong>Spring MVC&nbsp;</strong>yapısını kullanarak <strong>MongoDB</strong>&nbsp;veritabanı uygulaması ile birlikte sunum katmanında <strong>Bootstrap 3&nbsp;</strong>kullanarak bir <strong>Kişisel Rehber Projesi&nbsp;</strong>oluşturacağız.Ayrıca entegrasyon ve <strong>Mockito Testing Framework</strong>&nbsp;ile bazı test sınıflarını da oluşturacağız.( Test tarafını ilerleyen zamanlar da yazacağım. )</p>\r\n\r\n<p>Bu uygulama sadece temel veritabanı işlemlerini i&ccedil;ermektedir. ( ekleme , getirme , g&uuml;ncelleme ve silme )</p>\r\n\r\n<p>&Ouml;ncelikle bir <strong>Maven Projesi </strong>oluşturuyoruz ve <strong>pom.xml </strong>dosyamıza <strong>dependecy</strong>&#39;lerimizi ekliyoruz.(<strong>dependecy</strong> listesi uzun olduğu i&ccedil;in direk <strong>pom.xml</strong> dosyasına <a href=\"https://github.com/alicankustemur/PersonalContact/blob/master/pom.xml\" target=\"_blank\">buradan</a> erişebilirsiniz.)</p>\r\n\r\n<p>Projeyi anotasyonlar &uuml;zerinden ger&ccedil;ekleştireceğimiz i&ccedil;in <strong>Spring </strong>konfigurasyonu dışında diğer t&uuml;m işlemlerde anotasyon kullanabilmek i&ccedil;in <strong>servlet-context.xml&nbsp;</strong>dosyasına projenin temel package adresini verip <strong>Spring&#39;in </strong>ilgili sınıfları bizim i&ccedil;in bulup ilgili yerlere enjekte etmesini sağlayacağız.</p>\r\n\r\n<p><strong>MongoDB &nbsp;key-value</strong> şeklinde &ccedil;alışan , &nbsp;d&ouml;k&uuml;man tabanlı bir <strong>NoSQL&nbsp;</strong>veritabanı uygulamasıdır.&nbsp;Bildiğimiz <strong>SQL&#39;deki&nbsp;</strong>tablonun karşılığı burada <strong>Collection </strong>olarak tanımlanmaktadır.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/33/1.jpg\" style=\"height:382px; width:819px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/33/2.jpg\" style=\"height:434px; width:825px\" /></p>\r\n\r\n<p><strong>Spring MVC&nbsp;</strong>i&ccedil;in gerekli <strong>xml </strong>konfigurasyonlarını yaptıktan sonra <strong>MongoDB </strong>i&ccedil;in konfigurasyon sınıfımızı oluşturuyoruz.</p>\r\n\r\n<pre>\r\n// Kod 1 - MongoConfiguration.java\r\n@Configuration\r\n@EnableMongoRepositories(basePackages = &quot;com.tr.t2.personalcontact.dao&quot;)\r\npublic class MongoConfiguration extends AbstractMongoConfiguration\r\n{\r\n\r\n	@Override\r\n	protected String getDatabaseName()\r\n	{\r\n		return &quot;test&quot;;\r\n	}\r\n\r\n	@Override\r\n	public Mongo mongo() throws Exception\r\n	{\r\n		return new MongoClient(new ServerAddress(&quot;localhost&quot;, 27017));\r\n	}\r\n\r\n}</pre>\r\n\r\n<p><strong>@Configuration</strong> anotasyonu ile bu sınıfın bir konfigurasyon dosyası olduğunu belirtip , <strong>@EnableMongoRepositories&nbsp;</strong>anotasyonunun <strong>basePackages&nbsp;attribute&#39;&uuml;ne repository&#39;nin </strong>bulunduğu <strong>package </strong>adresini<strong>&nbsp;</strong>veriyoruz.</p>\r\n\r\n<p>Sınıfı&nbsp;<strong>AbstractMongoConfiguration </strong>sınıfı&nbsp;ile<strong> </strong>genişleterek gerekli methodları override edip kullanabileceğiz.</p>\r\n\r\n<p><strong>getDatabaseName()&nbsp;</strong>methodu ile veritabanı ismini d&ouml;nd&uuml;r&uuml;yoruz.Ardından <strong>Mongo </strong>sınıfının <strong>mongo()</strong> methodu ile yeni bir <strong>MongoDB</strong> bağlantısı oluşturup <strong>ServerAdress </strong>ilk&nbsp;constructor&#39;&uuml;ne localhost&#39;a &ccedil;alışacağını ikincisine ise <strong>MongoDB&#39;nin </strong>default portunu giriyoruz.&nbsp;</p>\r\n\r\n<p>Şimdi&nbsp;<strong>POJO</strong> sınıfımızı oluşturabiliriz.</p>\r\n\r\n<pre>\r\n// Kod 2 - Person.java\r\n@Document(collection = &quot;person&quot;)\r\npublic class Person\r\n{\r\n\r\n	@Id\r\n	private String	id;\r\n\r\n	private String	name;\r\n	private String	surname;\r\n	\r\n	// getters and setters\r\n}</pre>\r\n\r\n<p><strong>@Document </strong>anotasyonu i&ccedil;erisinde <strong>collection attribute&#39;&uuml;nde </strong>ki <strong>&quot;person&quot; </strong>değeri&nbsp;<strong>MongoDB </strong>i&ccedil;erisindeki <strong>person collection&#39;a</strong> denk gelmektedir.</p>\r\n\r\n<p>Ardından <strong>DAO&#39;muzu </strong>oluşturuyoruz <strong>@Repository </strong>anotasyonu ile bunun bir repository olduğunu belirtiyoruz&nbsp;<strong>PersonRepository&nbsp;</strong>interface&#39;ini <strong>MongoRepository </strong>ile genişleterek <strong>collection </strong>değerinin ilkini kullanacağımız <strong>POJO </strong>sınıfını diğerine <strong>String </strong>tipini belirtiyoruz.</p>\r\n\r\n<p>Zaten genişlettiğimiz sınıf i&ccedil;erisinde ki temel işlemleri kullancağımız i&ccedil;in herhangi bir yeni tanımlama yapmamıza gerek yok.</p>\r\n\r\n<pre>\r\n// Kod 3 - PersonRepository.java\r\n@Repository\r\npublic interface PersonRepository extends MongoRepository\r\n{\r\n\r\n}</pre>\r\n\r\n<p>Şimdi servis kısmını yazmaya başlayabiliriz.&Ouml;ncelikle <strong>PersonService</strong> <strong>interface&#39;imizi </strong>oluşturuyoruz.Ardından implementasyon sınıfını oluşturuyoruz.<strong>@Service&nbsp;</strong>anotasyonu ile bunun bir servis olduğunu belirtiyoruz.Veritabanı işlemlerini yapabilmemiz i&ccedil;in bir repository nesnesine ihtiyacımız var , bunun i&ccedil;in bir&nbsp;<strong>PersonRepository&nbsp;</strong>&ouml;rneği oluşturup <strong>@Autowired&nbsp;</strong>anotasyonu ile nesnemizi <strong>Spring&#39;in</strong> bizim i&ccedil;in enjekte etmesini istiyoruz.Yapacağımız temel methodları <strong>repository</strong> nesnesi &uuml;zerinden ger&ccedil;ekleştirip oluşturuyoruz.</p>\r\n\r\n<pre>\r\n// Kod 4 - PersonService.java\r\npublic interface PersonService\r\n{\r\n\r\n	public void addPerson(Person person);\r\n\r\n	public Person getPerson(String id);\r\n\r\n	public List getAllPersons();\r\n\r\n	public void deletePerson(String id);\r\n\r\n}</pre>\r\n\r\n<pre>\r\n// Kod 5 - PersonServiceImpl.java\r\n@Service\r\npublic class PersonServiceImpl implements PersonService\r\n{\r\n\r\n	@Autowired\r\n	private PersonRepository repository;\r\n\r\n	public PersonRepository getRepository()\r\n	{\r\n		return repository;\r\n	}\r\n\r\n	public void setRepository(PersonRepository repository)\r\n	{\r\n		this.repository = repository;\r\n	}\r\n\r\n	@Override\r\n	public void addPerson(Person person)\r\n	{\r\n		repository.save(person);\r\n	}\r\n\r\n	@Override\r\n	public Person getPerson(String id)\r\n	{\r\n		return repository.findOne(id);\r\n	}\r\n\r\n	@Override\r\n	public List getAllPersons()\r\n	{\r\n		return repository.findAll();\r\n	}\r\n\r\n	@Override\r\n	public void deletePerson(String id)\r\n	{\r\n		repository.delete(id);\r\n	}\r\n\r\n}	</pre>\r\n\r\n<p>Artık <strong>Controller</strong>&nbsp;sınıfımızı oluşturabiliriz , <strong>@Controller&nbsp;</strong>anotasyonu ile bunun bir controller olduğunu belirtiyoruz.İşlemlerimizi yapabilmemiz i&ccedil;in bir servis nesnesine ihtiyacımız var &nbsp;, bunun i&ccedil;in bir&nbsp;<strong>PersonService&nbsp;</strong>&ouml;rneği oluşturup&nbsp;<strong>@Autowired&nbsp;</strong>anotasyonu ile nesnemizi <strong>Spring&#39;in</strong> bizim i&ccedil;in enjekte etmesini istiyoruz.Buradaki <strong>@RequestMapping(&quot;/&quot;)</strong>&nbsp;anotasyonu i&ccedil;erisinde ki <strong>&quot;/&quot;</strong> değeri sayfaya yapılan her istekde bu methodun &ccedil;ağrılacağı anlamına gelmektedir.&nbsp;<strong>ModelAndView </strong>bizim nesne ile aray&uuml;z yapısını ilişkilendirmemizi sağlayan bir sınıf. <strong>index()&nbsp;</strong>methodu i&ccedil;erisine bir <strong>modelAndView </strong>nesnesi ile servis katmanından getirdiğimiz kişileri <strong>addObject&nbsp;</strong>methodu sayesinde aray&uuml;zde&nbsp;<strong>&quot;persons&quot;</strong>&nbsp;olarak erişebiliyoruz. <strong>&quot;person&quot;</strong>&nbsp;değeri ise sayfa her g&uuml;ncellendiğinde <strong>Kişi Ekle</strong>&nbsp;b&ouml;l&uuml;m&uuml;nde yeni bir kişi oluşturmaktadır.<strong>setViewName&nbsp;</strong>ile bir view tanımlayıp <strong>modelAndView </strong>nesnesini d&ouml;nd&uuml;r&uuml;yoruz.</p>\r\n\r\n<p><strong>addPerson() </strong>methodu kişi ekleme işlemi yapmaktadır.<strong>addPerson() </strong>&nbsp;methodu &uuml;zerindeki <strong>@RequestMapping</strong>&nbsp;anotasyonunda ise <strong>addPerson </strong>&uuml;zerinden gelen <strong>POST</strong>&nbsp;methodundaki istekleri karşılamaktadır.<strong>Constructor </strong>i&ccedil;erisindeki <strong>@ModelAttribute&nbsp;</strong>aray&uuml;z&#39;den gelen <strong>input </strong>değerlerinin <strong>Person </strong>tipinde bir nesneye işaret ettiğini belirtmektedir.Servis nesnesi ile kişi ekleme işlemini yaptıktan sonra <strong>&quot;redirect:/&quot;</strong>&nbsp;işlemi ile anasayfaya y&ouml;nlendirmesini sağlıyoruz.</p>\r\n\r\n<p><strong>deletePerson() </strong>methodu kişi silme işlemi yapmaktadır.<strong>deletePerson() </strong>&nbsp;methodu &uuml;zerindeki <strong>@RequestMapping</strong>&nbsp;anotasyonunda ise <strong>deletePerson&nbsp;</strong>&uuml;zerinden gelen <strong>GET&nbsp;</strong>methodundaki istekleri karşılamaktadır.( <strong>@RequestMapping</strong>&nbsp;anotasyonu i&ccedil;erisinde method tanımlaması yapılmaz ise <strong>default method attribute</strong> değeri <strong>RequestMethod.GET </strong>&#39;tir ve i&ccedil;erisindeki <strong>String</strong> değer value değerine denk gelmektedir.&nbsp;)<strong>Constructor </strong>i&ccedil;erisindeki <strong>@RequestParam&nbsp;GET&#39;ten</strong> gelen <strong>id&nbsp;</strong>değerini alır.Servis nesnesi ile kişi silme&nbsp;işlemini yaptıktan sonra <strong>&quot;redirect:/&quot;</strong>&nbsp;işlemi ile anasayfaya y&ouml;nlendirmesini sağlıyoruz.</p>\r\n\r\n<p><strong>updatePerson() </strong>methodu kişi g&uuml;ncelleme&nbsp;işlemi yapmaktadır.<strong>updatePerson() </strong>&nbsp;methodu &uuml;zerindeki <strong>@RequestMapping</strong>&nbsp;anotasyonunda ise <strong>updatePerson&nbsp;</strong>&uuml;zerinden gelen <strong>GET&nbsp;</strong>methodundaki istekleri karşılamaktadır.<strong>Constructor </strong>i&ccedil;erisindeki <strong>ModelAndView&nbsp;</strong>ve <strong>@RequestParam</strong>&nbsp;ile g&uuml;ncellenecek olan kişinin bilgilerini getirip <strong>Kişi Ekle&nbsp;</strong>b&ouml;l&uuml;m&uuml;n&uuml; <strong>Kişi G&uuml;ncelle</strong>&nbsp;olarak değiştirmekteyiz.<strong>Kaydet </strong>butonuna basıldığında yeni bir g&uuml;ncelleme işlemi yerine yine <strong>addPerson() </strong>methodu &uuml;zerinden sağlamaktayız.Ardından yeni kişi listesini tekrar getirip listeyi g&uuml;ncelliyoruz.</p>\r\n\r\n<pre>\r\n// Kod 6 - PersonController.java\r\n@Controller\r\npublic class PersonController\r\n{\r\n\r\n	@Autowired\r\n	private PersonService service;\r\n\r\n	@RequestMapping(&quot;/&quot;)\r\n	public ModelAndView index(ModelAndView modelAndView)\r\n	{\r\n		List persons = service.getAllPersons();\r\n		modelAndView.addObject(&quot;persons&quot;, persons);\r\n		modelAndView.addObject(&quot;person&quot;, new Person());\r\n		modelAndView.setViewName(&quot;index&quot;);\r\n\r\n		return modelAndView;\r\n	}\r\n\r\n	@RequestMapping(value = &quot;addPerson&quot;, method = RequestMethod.POST)\r\n	public String addPerson(@ModelAttribute Person person)\r\n	{\r\n\r\n		service.addPerson(person);\r\n\r\n		return &quot;redirect:/&quot;;\r\n	}\r\n\r\n	@RequestMapping(&quot;deletePerson&quot;)\r\n	public String deletePerson(@RequestParam String id)\r\n	{\r\n		service.deletePerson(id);\r\n		return &quot;redirect:/&quot;;\r\n	}\r\n\r\n	@RequestMapping(&quot;updatePerson&quot;)\r\n	public ModelAndView updatePerson(ModelAndView modelAndView, @RequestParam String id)\r\n	{\r\n\r\n		List persons = service.getAllPersons();\r\n		modelAndView.addObject(&quot;persons&quot;, persons);\r\n		modelAndView.addObject(&quot;person&quot;, service.getPerson(id));\r\n		modelAndView.setViewName(&quot;index&quot;);\r\n\r\n		return modelAndView;\r\n	}\r\n\r\n}</pre>\r\n\r\n<p>proje&#39;ye <strong>GitHub</strong> &uuml;zerinden erişebilirsiniz.</p>\r\n\r\n<p><strong>MongoDB Versiyon Link :&nbsp;<a href=\"https://github.com/alicankustemur/PersonalContact\" target=\"_blank\">https://github.com/alicankustemur/PersonalContact</a></strong></p>\r\n\r\n<p>Redis Versiyon Link :&nbsp;<a href=\"https://github.com/alicankustemur/PersonalContactRedis\" target=\"_blank\">https://github.com/alicankustemur/PersonalContactRedis</a></p>\r\n','1462972079','Java,Spring Framework, Spring, MongoDB, Spring MVC, Bootstrap',''),(34,'Eclipse Java Kod Renklendirme','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>Merhaba arkadaşlar bu yazımda Eclipse &uuml;zerinde Java kodunun daha okunulabilir bir hale gelmesi i&ccedil;in renklendirme işlemi yapacağız.\r\n\r\n\r\n\r\nResimde g&ouml;rd&uuml;ğ&uuml;n&uuml;z b&ouml;l&uuml;m&uuml; Eclipse i&ccedil;erisinde Window &gt; Prefences &gt; Editor &gt; Syntax Coloring path&#39;ini takip ederek a&ccedil;ıyoruz.\r\n\r\nDikkat : Bu değişiklikleri zaten varolan ayarların &uuml;zerine uygulayın , (&ouml;rn : bazı kısımlarda sadece renk ayarı değişmekte , enable zat... </div>','<p>Merhaba arkadaşlar bu yazımda <strong>Eclipse </strong>&uuml;zerinde <strong>Java </strong>kodunun daha okunulabilir bir hale gelmesi i&ccedil;in renklendirme işlemi yapacağız.</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/34/1.png\" style=\"height:503px; width:904px\" /><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/34/1.jpg\" style=\"height:713px; width:771px\" /></p>\r\n\r\n<p>Resimde g&ouml;rd&uuml;ğ&uuml;n&uuml;z b&ouml;l&uuml;m&uuml; <strong>Eclipse</strong> i&ccedil;erisinde <strong>Window &gt; Prefences &gt; Editor &gt; Syntax Coloring</strong> path&#39;ini takip ederek a&ccedil;ıyoruz.</p>\r\n\r\n<p><strong>Dikkat : Bu değişiklikleri zaten varolan ayarların &uuml;zerine uygulayın , (&ouml;rn : bazı kısımlarda sadece renk ayarı değişmekte , enable zaten aktif durumda)</strong></p>\r\n\r\n<p><strong><em>D&uuml;zenlenmiş hali ;</em></strong></p>\r\n\r\n<p><strong><em><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/34/2.jpg\" /></em></strong></p>\r\n\r\n<p>Renklendirmenin yukarıdaki gibi olması i&ccedil;in <strong>Element </strong>kısmında ki &ouml;ğelerin aşağıdaki ayarlarda olması gerekmektedir.</p>\r\n\r\n<p><strong>Abstract method invocations</strong> -&nbsp; Enable , <em>Italic</em> ,&nbsp; ( Color = Black )</p>\r\n\r\n<p><strong>Annotations</strong> - Color = Red : 255 , Green : 0 , Blue : 255</p>\r\n\r\n<p><strong>Classes </strong>- Enable , <strong>Bold</strong> , ( Color = Red : 0 , Green : 106 , Blue : 67 )</p>\r\n\r\n<p><strong>Deprecated members </strong>- Color = Red : 128 , Green : 128 , Blue : 128</p>\r\n\r\n<p><strong>Enum </strong>- Enable , Underline , ( Color = Red : 0 , Green : 106 , Blue : 67 )</p>\r\n\r\n<p><strong>Fields </strong>- <strong>Bold</strong></p>\r\n\r\n<p><strong>Inherited method invocations </strong>- Enable , ( Color : Black )</p>\r\n\r\n<p><strong>Interface -</strong> Enable , <em>Italic</em> , ( Color = Red : 0 , Green : 106 , Blue : 67 )</p>\r\n\r\n<p><strong>Local variable declarations</strong> -&nbsp; Enable , <strong>Bold </strong>, ( Color = Red : 255 , Green : 126 , Blue : 64 )</p>\r\n\r\n<p><strong>Local variables</strong> -&nbsp; Color = Red : 255 , Green : 126 , Blue : 64</p>\r\n\r\n<p><strong>Method declarations</strong> - Enable , <strong>Bold </strong>, ( Color = Black )</p>\r\n\r\n<p><strong>Methods</strong> - Enable<strong> </strong>, <strong>Bold </strong>, ( Color = Black )</p>\r\n\r\n<p><strong>Parameter variables</strong> - Enable , <strong>Bold </strong>, ( Color = Red : 128 , Green : 128 , Blue : 0 )</p>\r\n\r\n<p><strong>Static fields</strong> - <strong>Bold</strong></p>\r\n\r\n<p><strong>Static final fields</strong> - Color = Red</p>\r\n\r\n<p><strong>Static method invocations</strong> - Color = Red : 255 , Green : 126 , Blue : 64</p>\r\n\r\n<p><strong>Type arguments</strong> - <strong>Enable </strong>, ( Color = Red : 128 , Green : 0 , Blue : 0 )</p>\r\n\r\n<p><strong>Type variables</strong> - Enable , <strong>Bold</strong> , ( Color = Red : 128 , Green : 0 , Blue : 0&nbsp; )</p>\r\n','1463578982','Eclipse,java',''),(35,'Modern Bir Ailede İftar Sofrası','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>- Akşama bize buyur da iftarı bişlikte yapalım, dedi.\r\n\r\n- Oru&ccedil; tutmuyorum, dedim.\r\n\r\n- Canım hangimiz tutuyoruz sanki?...\r\n\r\n&Ccedil;oktan beri iftara davet eden bu zatın evine bir akşam gittim. İftara daha yarım saat vardı.Sofra kurulmuş ama, iftar sofrasından &ccedil;ok &ccedil;ilingir sofrasına benziyor. Buzlu rakı, meyvalar, salatalar, turşular, kızartmalar... Evin cıva gibi, g&uuml;zel, hareketli bir de kızı var. Karşıma oturdu. Bacak bacak &uuml;st&uuml;ne att?... </div>','<p>- Akşama bize buyur da iftarı bişlikte yapalım, dedi.</p>\r\n\r\n<p>- Oru&ccedil; tutmuyorum, dedim.</p>\r\n\r\n<p>- Canım hangimiz tutuyoruz sanki?...</p>\r\n\r\n<p>&Ccedil;oktan beri iftara davet eden bu zatın evine bir akşam gittim. İftara daha yarım saat vardı.Sofra kurulmuş ama, iftar sofrasından &ccedil;ok &ccedil;ilingir sofrasına benziyor. Buzlu rakı, meyvalar, salatalar, turşular, kızartmalar... Evin cıva gibi, g&uuml;zel, hareketli bir de kızı var. Karşıma oturdu. Bacak bacak &uuml;st&uuml;ne attı ama, &ouml;yle bir atış ki, başımı ondan yana &ccedil;evirmeye utanıyorum. Elde değil, ne kadar da bakmayayım desen, insanın g&ouml;z&uuml; kayı kayıveriyor. Durmadan konuşan gen&ccedil; kıza, g&ouml;zlerim tavanda, laf olsun diye sordum:</p>\r\n\r\n<p>- Hangi okula gidiyorsunuz?</p>\r\n\r\n<p>Annesi,</p>\r\n\r\n<p>- A&ccedil;ılmasın diye orta&#39;dan sonra okula g&ouml;ndermedik, dedi.</p>\r\n\r\n<p>Babası kadehime rakı dolduracaktı ki kız, kaba etine iğne batırılmış gibi bağırdı.</p>\r\n\r\n<p>- Aaa, vallahi olmaz, daha iftar topu patlamadı.</p>\r\n\r\n<p>- Oru&ccedil;lu musunuz? diye sordum.</p>\r\n\r\n<p>- Yoo, fakat &ouml;rf ve adetlerimize son derece bağlıyımdır, dedi.</p>\r\n\r\n<p>Babasına, anasına, danasına ağız a&ccedil;tırmayan &ouml;ten kız.</p>\r\n\r\n<p>- Kitap sever misiniz? diye bana sorunca, damdar d&uuml;şer değil de, damdan işer gibi sorulan bu soruya şaşırdım.</p>\r\n\r\n<p>- Severim, dedim.</p>\r\n\r\n<p>Yaylı gibi fırladı, etajerden getirdiği kitabı uzattı:</p>\r\n\r\n<p>- Bu kitabı okudunuz mu?</p>\r\n\r\n<p>Kitaba baktım : &lt;&lt; Tenas&uuml;l Hayatımız &gt;&gt;</p>\r\n\r\n<p>Babasına,</p>\r\n\r\n<p>- Maşallah kızınız okumaya meraklı, dedim.</p>\r\n\r\n<p>Annesi atıldı :</p>\r\n\r\n<p>- A&ccedil;ılmasın diye okula g&ouml;ndermedik ama, &ouml;zel &ouml;ğretmen tuttuk, evde okuttuk.</p>\r\n\r\n<p>Top patladı, iftar sofrasına oturduk. Kız hepimizin kadehini doldurup, ilk kadehi kendisi kaldırdı :</p>\r\n\r\n<p>- Hoş geldiniz!</p>\r\n\r\n<p>Biz kadehleri yuvarlarken, annesi,</p>\r\n\r\n<p>- A&ccedil;ılmasın diye kızımızı dizimizin dibinden ayırmadım, dedi.</p>\r\n\r\n<p>- Meze almaz mısınız?</p>\r\n\r\n<p>- Kızım a&ccedil;ılmasın diye...</p>\r\n\r\n<p>Babası devam ediyor :</p>\r\n\r\n<p>- Dışarıya pek g&ouml;ndermeyiz...</p>\r\n\r\n<p>- Beyefendi, kızımın...</p>\r\n\r\n<p>Babası :</p>\r\n\r\n<p>- A&ccedil;ılmaması i&ccedil;in, yabancılarla...</p>\r\n\r\n<p>Annesi :</p>\r\n\r\n<p>- Gezip tozmasına m&uuml;saade edemem...</p>\r\n\r\n<p>Babası da, anası da, kızı da i&ccedil;kiyi fazla ka&ccedil;ırmışlar, cıvımışlardı.</p>\r\n\r\n<p>- Buyurun Allaaşkına, Mezeden de alın, iftarlıktır.</p>\r\n\r\n<p>Kız, pikaba bir plak koydu; oynak, g&uuml;r&uuml;lt&uuml;l&uuml; bir dans havası...</p>\r\n\r\n<p>Annesi,</p>\r\n\r\n<p>- A&ccedil;ılmasın diye dışarda dansetmesine m&uuml;saade etmiyoruz da... dedi.</p>\r\n\r\n<p>Babası da aldı s&ouml;z&uuml; :</p>\r\n\r\n<p>- Katiyyen m&uuml;saade etmeyiz, hele big&uuml;n g&ouml;reyim, hele bir... Namus başka şeye benzemez birader. İ&ccedil;miyorsun yahu...</p>\r\n\r\n<p>Babası, koltuğa uzandı, horlamaya başladı.</p>\r\n\r\n<p>Vakit ge&ccedil;mişti. Ben evden ayrılırken adamı zorla uyandırdılar.</p>\r\n\r\n<p>- Yarın akşam yine iftara...</p>\r\n\r\n<p>Annesi,</p>\r\n\r\n<p>- Hadi kızım, misafiri ge&ccedil;ir durağa kadar g&ouml;t&uuml;r&uuml;ver, diyordu.</p>\r\n\r\n<p>Bana d&ouml;nd&uuml; :</p>\r\n\r\n<p>- Yabancılarla m&uuml;saade etmem, ama sizi yabancı saymıyoruz.</p>\r\n\r\n<p>Babası sarhoş peltekliğiyle,</p>\r\n\r\n<p>- Ne demek, diye bağırdı, hele bir yabancı ile... Alimallah...</p>\r\n\r\n<p>Bana s&ouml;z sırası vermiyorlardı, bir fırsatını bulup,</p>\r\n\r\n<p>- Affedersiniz, dedim, bundan fazla a&ccedil;ılmayalım, ben yalnız giderim, yolu biliyorum. Allaısmarladık.</p>\r\n\r\n<hr />\r\n<p><strong>Aziz Nesin - Geriye Kalan</strong></p>\r\n\r\n<p><strong>Modern Bir Ailede İftar Sofrası</strong></p>\r\n\r\n<p><strong>Mart 1950</strong></p>\r\n\r\n<p><strong>Markopaşa.</strong></p>\r\n','1466116400','Aziz Nesin',''),(36,'Nasıl İntihar Ettim?','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>&nbsp;&nbsp; Gazetelerin intihar haberlerini yazması yasaksa da (*), bu kendi intihar haberim olduğundan, pek ciddi olan resmi makamların, benim gibi ciddi olmayan bir adamın intiharına memnun bile olacaklarını umarım.\r\n\r\n\r\n&nbsp; (*) Bu hikayenin yazıldığı d&ouml;nemde intihar olaylarının gazetelerde yayınlanması yurttaşları intihara &ouml;zendirme ve kışkırtma sayılarak yasaklanmıştır.\r\n\r\n&nbsp;&nbsp; Bir zamanlar mortimari hastalığına tutulmuştum.İkidebir i&ccedi... </div>','<p>&nbsp;&nbsp; Gazetelerin intihar haberlerini yazması yasaksa da <strong>(*)</strong>, bu kendi intihar haberim olduğundan, pek ciddi olan resmi makamların, benim gibi ciddi olmayan bir adamın intiharına memnun bile olacaklarını umarım.</p>\r\n\r\n<hr />\r\n<p>&nbsp; <strong>(*) </strong><em>Bu hikayenin yazıldığı d&ouml;nemde intihar olaylarının gazetelerde yayınlanması yurttaşları intihara &ouml;zendirme ve kışkırtma sayılarak yasaklanmıştır.</em></p>\r\n\r\n<p>&nbsp;&nbsp; Bir zamanlar mortimari hastalığına tutulmuştum.İkidebir i&ccedil;imden intihar etmek arzusu geliyordu.</p>\r\n\r\n<p>&nbsp;&nbsp; İlk intiharım ş&ouml;yle oldu.</p>\r\n\r\n<p>&lt;&lt; Hey aşık! &gt;&gt; dedim, kendikendime, &lt;&lt; &ouml;l&uuml;mlerden &ouml;l&uuml;m beğen bakalım. Tabanca mı, bıcak mı, kırk katır mı, kırk satır mı? &gt;&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &Ouml;l&uuml;m &ouml;l&uuml;m bir &ouml;l&uuml;m... Bari şahane olsun diye,eski saray insanları gibi zehirle intihara karar verdim. M&uuml;thiş bir zehir aldım. Odama kapandım. Uzun, romantik bir mektup yazdım.</p>\r\n\r\n<p>Sonuna da, &lt;&lt; Elveda ey fani d&uuml;nya, elveda ey kahpe felek, elveda ey sadrazam... &gt;&gt; dedikten sonra, bir kadeh zehiri yuvarladım ve yere uzandım. Şimdi damarlarım b&uuml;z&uuml;lecek, şimdi elim ayağım &ccedil;arpılacak, şimdi kanım &ccedil;ekilecek diye bekledim. Bişey olmayınca, bir kadeh zehir daha i&ccedil;tim, bir daha. Yine bişey yok. Sonradan &ouml;ğrendim ki, meğer bu memlekette yalnız s&uuml;tler sulu, yağlar karışık, peynirler hiyleli değil, zehirler bile bozukmuş. Hani, insan ş&ouml;yle d&ouml;rt başı mamur bir intihar bile edemiyor.</p>\r\n\r\n<p>&nbsp;&nbsp; Aklıma bişey koydum mu mutlaka yaparım. Bu sefer de beynime bir kurşun sıkıp &ouml;lmeye karar verdim. T&uuml;feği şakağıma dayadım, tetiğe asıldım.</p>\r\n\r\n<p>&nbsp;&nbsp; - Pıff!</p>\r\n\r\n<p>&nbsp;&nbsp; Bir daha asıldım,</p>\r\n\r\n<p>&nbsp;&nbsp; - Peff,</p>\r\n\r\n<p>&nbsp;&nbsp; Bir daha...</p>\r\n\r\n<p>&nbsp;&nbsp; - P&uuml;ff!...</p>\r\n\r\n<p>&nbsp;&nbsp; Meğer bu t&uuml;fek yedek par&ccedil;asız Amerikan yardımındanmış. Kurşunla intiharın da imkansızlığını anlayınca, garanti bir &ouml;l&uuml;m diye havagazı ile &ouml;l&uuml;m&uuml; d&uuml;ş&uuml;nd&uuml;m. Malum ya, anlattıklarına g&ouml;re, havagazı ile zehirlenme pek şairane olurmuş. Havagazı musluğunu sonuna kadar a&ccedil;tım. Odanın b&uuml;t&uuml;n deliklerini de tıkamıştım. Koltuğa uzandım. Cesedimi ciddi bir bi&ccedil;imde bulmaları i&ccedil;in kendime en uygun pozu verdim ve Azrail&#39;i beklemeye başladım.</p>\r\n\r\n<p>&nbsp;&nbsp; &Ouml;ğle oldu, akşam oldu, birt&uuml;rl&uuml; can veremiyordum. Akşam &uuml;zeri bir arkadaşım odaya girdi.</p>\r\n\r\n<p>&nbsp;&nbsp; - Girme! diye bağırdım.</p>\r\n\r\n<p>&nbsp;&nbsp; - Ne var?</p>\r\n\r\n<p>&nbsp;&nbsp; - Ben &ouml;l&uuml;yorum.</p>\r\n\r\n<p>&nbsp;&nbsp; - Sen &ouml;lm&uuml;yorsun, &ccedil;ıldırıyorsun, dedi.</p>\r\n\r\n<p>&nbsp;&nbsp; Arkadaşıma projemi anlatınca, bir kahkaha attı,</p>\r\n\r\n<p>&nbsp;&nbsp; - Az salak değilsin dedi, havagazı musluğundan gaz değil, yalnız hava &ccedil;ıkar.</p>\r\n\r\n<p>&nbsp;&nbsp; Sonra bana sordu:</p>\r\n\r\n<p>&nbsp;&nbsp; - Sen ger&ccedil;ekten intihar etmek istiyor musun?</p>\r\n\r\n<p>&nbsp;&nbsp; - Elbette, dedim.</p>\r\n\r\n<p>&nbsp;&nbsp; - Sana bir dostluk etmek isterim, dedi.</p>\r\n\r\n<p>&nbsp;&nbsp; Bı&ccedil;ak&ccedil;ılara gidip bir Bursa bı&ccedil;ağı almamı, sonra karnıma dayayıp kahram Japonlar gibi, barsaklarımı avucuma d&ouml;kmemi tavsiye etti. Arkadaşımın dostluğuna teşekk&uuml;r ederek, gidip hemen tığ gibi bir Bursa bı&ccedil;ağı aldım.</p>\r\n\r\n<p>Doğrusu &lt;&lt; cart! &gt;&gt; diye bı&ccedil;akla insanın barsaklarını deşmesi hoş, bişey değil.Cesedin muayenesi i&ccedil;in morga kaldırılıp, barsaklarda besin adına bişey bulamayan doktorlara mah&ccedil;up olmak da caba. Ne olursa olsun, bı&ccedil;ak koynumda sevine sevine eve gelirken iki polis &uuml;st&uuml;me atıldı. Polislere kendimi anlatmağa başladım.</p>\r\n\r\n<p>&nbsp;&nbsp; - Efendiler, durun, bir dakika beni dinleyin. Ben muntazaman vergimi veririm. H&uuml;k&uuml;metimiz hakkında ufacık bir şey s&ouml;ylemem. Benim gibi namuslu...</p>\r\n\r\n<p>&nbsp;&nbsp; Onlar lafımı yarıda kestiler. Koynumda ki bı&ccedil;ağı bulup,</p>\r\n\r\n<p>&nbsp;&nbsp; - Bu ne? diye bağırdılar.</p>\r\n\r\n<p>&nbsp;&nbsp; Meğer cinayetleri &ouml;nlemek i&ccedil;in arama, tarama ekiplerinden birine &ccedil;atmışım.</p>\r\n\r\n<p>&nbsp;&nbsp; - Hey Allahım, dedim, alınan isabetli kararlar sayesinde, şu memlekette yaşayamıyoruz, ama &ouml;lemiyoruz da... Hep b&ouml;yle &ccedil;eke &ccedil;ekecek miyiz?</p>\r\n\r\n<p>&nbsp;&nbsp; Azim ve irade sahibi adam dediğin benim gibi olmalı. Bir kez &ouml;leceğim dedim mi &ouml;l&uuml;r&uuml;m. Bakkaldan kalın bir urgan aldım, bir kalıpda sabun. İpi iyice sabunladım. Tavandaki halkaya ipi bağladım. Vergi dairesine girer gibi, boynumu yağlı ilmiğe ge&ccedil;irip, altımdan sandalyeyi ittim. Daha bir kez bile sallanmaya kalmadan, pat diye yere d&uuml;şt&uuml;m, Meğer ipler de &ccedil;&uuml;r&uuml;km&uuml;ş ve sağlamını bulmanın da imkanı yokmuş. Bakkal,</p>\r\n\r\n<p>&nbsp;&nbsp; - Sağlam mal olsa satarlar mı? dedi.</p>\r\n\r\n<p>&nbsp;&nbsp; İyice anladım ki, artık &ouml;lmenin de olanağı yok. Bari yaşayayım, dedim. Bilirsiniz ya, yaşamak, &ouml;nce mideden başlar. Ben de pastırmalı yumurta yedim. Bir de konserve yalancı dolma. &Uuml;st&uuml;ne bir makarna.</p>\r\n\r\n<p>&nbsp;&nbsp; Sonra bir pastacıya girdim. D&ouml;rt beş pasta yedim. Pastacıya bir gazete satıcısı girdi,</p>\r\n\r\n<p>&nbsp;&nbsp; - Onaltı sahife... Okumazsan da paket yap! diye bağırıyordu.</p>\r\n\r\n<p>&nbsp;&nbsp; İktidar gazetelerini okumak adetim değildir, bir okuyayım dedim, başyazıyı okurken, uyuya kalmışım.</p>\r\n\r\n<p>&nbsp;&nbsp; Karnıma bı&ccedil;ak sokulur gibi bir ağrı duydum. Ama nasıl... Anlatılır gibi değil... Dayanamadım, bağırıp &ccedil;ağırmaya başladım. Bir cankurtaran arabasıyla zor hastaneye attılar. Bayılmışım. G&ouml;zlerimi a&ccedil;tığım zaman başucumda doktor soruyordu:</p>\r\n\r\n<p>&nbsp;&nbsp; - Siz zehirlenmişsiniz. Hekimden bişey saklanmaz, intihar mı ettiniz?</p>\r\n\r\n<p>&nbsp;&nbsp; Nerede o mutlu g&uuml;nler doktor, dedim nerede?</p>\r\n\r\n<p>&nbsp;&nbsp; - Siz zehirlenmişsiniz diyorum, ne yediniz?</p>\r\n\r\n<p>&nbsp;&nbsp; - Pastırma.</p>\r\n\r\n<p>&nbsp;&nbsp; Doktor bağırdı:</p>\r\n\r\n<p>&nbsp;&nbsp; - Ne, pastırma mı yediniz? Siz deli misiniz? Hi&ccedil; pastırma yenir mi? Gazeteleri okumadınız mı, pastırmadan zehirlenenlerin haberleri dolu... Ama bu pastırma zehrine benzemiyor.</p>\r\n\r\n<p>Başka ne yediniz?</p>\r\n\r\n<p>&nbsp;&nbsp; - Lokantaya gittim.</p>\r\n\r\n<p>&nbsp;&nbsp; - Siz &ccedil;ıldırmışsınız.</p>\r\n\r\n<p>&nbsp;&nbsp; - Lokantada konserve yedim.</p>\r\n\r\n<p>&nbsp;&nbsp; - Boşuna değil. Başka?</p>\r\n\r\n<p>&nbsp;&nbsp; - Makarna, pasta...</p>\r\n\r\n<p>&nbsp;&nbsp; - Elbette zehirlenirsiniz, konserve, makarna, pasta!.. Daha başka?</p>\r\n\r\n<p>&nbsp;&nbsp; - Vallahi başka bişey yemedim, iktidar gazetesini okurken...</p>\r\n\r\n<p>&nbsp;&nbsp; - Ne? diye haykırdı, &ouml;lmediğine dua et. Haydi yine ucuz kurtuldun.</p>\r\n\r\n<p>&nbsp;&nbsp; Hastaneden &ccedil;ıkarken d&uuml;ş&uuml;n&uuml;yordum: Peki biz ne yapacağız? Yaşamaya bırakmıyorlar, &ouml;lmeye bırakmıyorlar...</p>\r\n\r\n<p>Amma rahat rahat s&uuml;r&uuml;nebiliriz.</p>\r\n\r\n<hr />\r\n<p><strong>Aziz Nesin - İt Kuyruğu</strong></p>\r\n\r\n<p><strong>Nasıl İntihar Ettim?</strong></p>\r\n','1466812268','Aziz Nesin',''),(37,'Spring Boot - Giriş','<div style=\'fontSize=15px !important; text-decoration: none !important;\'>\r\n\r\nBu makale Spring Boot ile ilgili anatomik bilgileri ve basit bir uygulama &ouml;rneğini ihtiva eder. Spring Boot ile ilgili bu bilgileri okumadan &ouml;nce Spring ile ilgili temel bilgilere sahip olmanız sizin i&ccedil;in daha avantajlı olucaktır, aksi takdirde Spring &Ccedil;atısında kullanılan belli başlı konular detaylı bir şekilde a&ccedil;ıklanmayacaktır. Bu konular Spring &Ccedil;atısı adı altında ayrı bir makale olarak anlatılabilir.\r\n\r\nSpring Boot aslında mevcut S... </div>','<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/spring-boot/spring-boot-giris/spring-boot.png\" /><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/37/1.png\" style=\"height:421px; width:750px\" /></p>\r\n\r\n<p>Bu makale <strong>Spring Boot</strong> ile ilgili anatomik bilgileri ve basit bir uygulama &ouml;rneğini ihtiva eder.<strong> <ins>Spring Boot</ins></strong><ins> ile ilgili bu bilgileri okumadan &ouml;nce <strong>Spring </strong>ile ilgili temel bilgilere sahip olmanız sizin i&ccedil;in daha avantajlı olucaktır, aksi takdirde <strong>Spring &Ccedil;atısında </strong>kullanılan belli başlı konular detaylı bir şekilde a&ccedil;ıklanmayacaktır. Bu konular <strong>Spring &Ccedil;atısı </strong>adı altında ayrı bir makale olarak anlatılabilir.</ins></p>\r\n\r\n<p><strong>Spring Boot</strong> aslında mevcut <strong>Spring &Ccedil;atısında</strong> kullandığımız t&uuml;m yapıları barındırmakta, dolayısıyla <strong>Spring &Ccedil;atısı</strong> ile <strong>Spring Boot</strong>&#39;un farkı nedir sorusunun cevabı, basmakalıp kod işlemlerinden soyutlanıp, <strong>konfigurasyon</strong> işlemleri en aza indirilmiş, hemen &ccedil;alıştırılabilir <strong>(just run)</strong> <strong>Spring </strong>projeleri oluşturabilmektir.</p>\r\n\r\n<p><strong>&quot;just run&quot; </strong>raconuyla kendini tanıtan bu yapı, konfigurasyon işlemlerini olabildiğince en aza indirgeyip, geliştiriciden soyutlayarak daha hızlı bir şekilde uygulamalar geliştirebilmek i&ccedil;in oluşturulmuştur. Genellikle<strong> Stand-Alone</strong> uygulamalar ve &ouml;zellikle de <strong>Microservices </strong>mimarileri i&ccedil;in tercih edilir.</p>\r\n\r\n<ul>\r\n	<li>İ&ccedil;erisinde mevcut g&ouml;m&uuml;l&uuml; olan <strong>Tomcat,</strong> <strong>Jetty veya Undertow</strong> sayesinde <strong>Container </strong>ve <strong>Web Server </strong>kullanıma hazır bir şekilde gelmektedir, ekstra sunucu kurulumu gerektirmez.</li>\r\n	<li>&Ouml;rneğin bir <strong>Maven</strong> projesi olarak <strong>Spring MVC </strong>uygulaması geliştirebilmek i&ccedil;in ilgili bağımlıklıkları <strong>(spring-context, spring-web,spring-webmvc ...)</strong> bağımlılık listesine eklememiz gerekmekteydi. <strong>Spring Boot </strong>geliştiricileri, <strong>Spring </strong>kullanan geliştiriciler i&ccedil;in kabul g&ouml;r&uuml;len bağımlılıkları <strong>&quot;starter&quot; </strong>paketi adı altında toplayıp tek bir bağımlılık olarak sunmaktadır.</li>\r\n	<li><strong>XML konfigurasyonuna</strong> gerek duymaz.</li>\r\n	<li>Varsayılan olarak <strong>JPA, Hibernate&#39;i </strong>kullanmaktadır. Dilerseniz değiştirebilirsiniz.</li>\r\n	<li><strong>Tomcat</strong> port&#39;u varsayılan <strong>8080</strong> olarak gelmektedir. Bakın olabildiğince kabul g&ouml;r&uuml;lm&uuml;ş ve kalıplaşmış yapıları bize hazır bir şekilde sunmaktadır.</li>\r\n	<li>Sağladığı <strong>Test</strong> bağımlılıkları ve otomatik konfigurasyon işlemleri sayesinde, <strong>Test-Driven-Development&#39;a </strong>olabildiğince olanak sağlamaktadır. Bu bağımlıkların bir kısmı<strong> JUnit, Spring Test, Hamcrest, Mockito .</strong>..</li>\r\n	<li>Loglama işlemlerinde <strong>slf4j</strong> kullanılmaktadır.</li>\r\n</ul>\r\n\r\n<p>Basit bir uygulama oluşturacağız fakat &ouml;nce şunu s&ouml;yleyelim; <strong>Spring Boot</strong>&#39;un <a href=\"https://start.spring.io/\" target=\"_blank\"><strong>Spring Initializr</strong></a> adı altında, basit&ccedil;e yeni başlayacağınız projenizin hangi <strong>Build Tool</strong>&#39;u kullanacağını, hangi <strong>Java</strong> versiyonunda &ccedil;alışacağını, dilini, hangi <strong>Spring</strong> mod&uuml;llerini destekleyeceğini vs. se&ccedil;tiğinizde, size başlangı&ccedil; i&ccedil;in hazır zip&#39;lenmiş bir proje yaratıyor, ve hi&ccedil; de fena değil <strong>(bkz: Şekil 1)</strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/37/2.png\" style=\"height:573px; width:1197px\" /></p>\r\n\r\n<p><var>Şekil 1</var></p>\r\n\r\n<hr />\r\n<p>&nbsp;</p>\r\n\r\n<p>İlk uygulamamızı <strong>first-application </strong>adında, <strong>Spring Boot 1.4.6</strong> versiyonunda <strong>Maven </strong>ile oluşturulmuş bir <strong>Spring Boot Web</strong>&nbsp;projesi oluşturuyoruz.<strong>(bkz: Şekil 2)</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/37/3.png\" /></p>\r\n\r\n<p><var>Şekil 2</var></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>zip </strong>dosyası olarak inmiş olan projemizi, import ettiğimizde;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/37/4.png\" /></p>\r\n\r\n<p><var>Şekil 3</var></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Şekil 3</strong>&#39;deki gibi hazır bir iskelet yapı sunmakta.</p>\r\n\r\n<p>sonra <strong>FirstApplication </strong>sınıfını aşağıdaki gibi değiştiriyoruz.</p>\r\n\r\n<pre>\r\n@Controller\r\n@EnableAutoConfiguration\r\npublic class FirstApplication {\r\n	\r\n&nbsp;   @RequestMapping(&quot;/&quot;)\r\n    @ResponseBody\r\n    String home() {\r\n        return &quot;Hello World!&quot;;\r\n    }\r\n	\r\n	public static void main(String[] args) throws Exception {\r\n        SpringApplication.run(FirstApplication.class, args);\r\n    }\r\n}</pre>\r\n\r\n<p><strong>Spring Boot </strong>uygulaması &ccedil;alışmaya bir <strong>main </strong>methodu i&ccedil;erisindeki <strong>SpringApplication.run</strong> methodu &uuml;zerinden başlar.</p>\r\n\r\n<p><strong>@EnableAutoConfiguration </strong>anotasyonu gerekli konfigurasyonları bizim i&ccedil;in yapar,<strong> @Controller </strong>anotasyonu, Spring &ccedil;atısında ki kullanımıyla aynı g&ouml;reve sahiptir. (Spring Boot Biz burada basit bir sınıf oluşturduğumuz i&ccedil;in uygulamanın main methodunu ve controller sınıfını tek bir sınıf i&ccedil;erisinde oluşturduk.</p>\r\n\r\n<pre>\r\nserver.contextPath=/spring-boot-first-application\r\nserver.port=8085</pre>\r\n\r\n<p><strong>application.properties </strong>uygulamanın konfigurasyon parametrelerini d&uuml;zenlediğimiz properties dosyasyına iki adet değer ekledim, bunlar; <strong>server.contextPath</strong> uygulamaya erişilecek olan adresi, diğeri <strong>server.port</strong> ise sunucunun &ccedil;alışacağı portu temsil etmektedir.</p>\r\n\r\n<p>Uygulamamızı oluşturduğumuz sınıf &uuml;zerinden &ccedil;alıştırdığımızda console&#39;da varsayılan portun değiştiğini ve uygulamaya erişilecek olan adresi g&ouml;rebiliriz ;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/37/5.png\" style=\"height:503px; width:904px\" /></p>\r\n\r\n<p><var>Şekil 4</var></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://alicankustemur.github.io/images/id/37/6.png\" /></p>\r\n\r\n<p><var>Şekil 5</var></p>\r\n','1488746827','Java,Spring Framework, Spring, Spring Boot','');
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-09-11 22:36:51
